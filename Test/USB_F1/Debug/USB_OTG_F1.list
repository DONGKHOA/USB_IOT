
USB_OTG_F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080012dc  080012dc  000022dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001300  08001300  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001300  08001300  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001300  08001300  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001300  08001300  00002300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001304  08001304  00002304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001308  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000000c  08001314  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08001314  0000331c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f01  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001376  00000000  00000000  00008f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  0000a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000045d  00000000  00000000  0000a8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001601c  00000000  00000000  0000ad05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f49  00000000  00000000  00020d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ed3f  00000000  00000000  00027c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a69a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016e4  00000000  00000000  000a69ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000a80d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080012c4 	.word	0x080012c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080012c4 	.word	0x080012c4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f954 	bl	80003fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f806 	bl	8000164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f880 	bl	800025c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800015c:	f000 f85c 	bl	8000218 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000160:	bf00      	nop
 8000162:	e7fd      	b.n	8000160 <main+0x14>

08000164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b094      	sub	sp, #80	@ 0x50
 8000168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800016e:	2228      	movs	r2, #40	@ 0x28
 8000170:	2100      	movs	r1, #0
 8000172:	4618      	mov	r0, r3
 8000174:	f001 f87a 	bl	800126c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000178:	f107 0314 	add.w	r3, r7, #20
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000194:	2301      	movs	r3, #1
 8000196:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000198:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800019c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019e:	2300      	movs	r3, #0
 80001a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a2:	2301      	movs	r3, #1
 80001a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a6:	2302      	movs	r3, #2
 80001a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 fb62 	bl	8000884 <HAL_RCC_OscConfig>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001c6:	f000 f86b 	bl	80002a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ca:	230f      	movs	r3, #15
 80001cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2102      	movs	r1, #2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 fdce 	bl	8000d88 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f2:	f000 f855 	bl	80002a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001f6:	2310      	movs	r3, #16
 80001f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001fa:	2300      	movs	r3, #0
 80001fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	4618      	mov	r0, r3
 8000202:	f000 ff1d 	bl	8001040 <HAL_RCCEx_PeriphCLKConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800020c:	f000 f848 	bl	80002a0 <Error_Handler>
  }
}
 8000210:	bf00      	nop
 8000212:	3750      	adds	r7, #80	@ 0x50
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800021c:	4b0d      	ldr	r3, [pc, #52]	@ (8000254 <MX_USB_PCD_Init+0x3c>)
 800021e:	4a0e      	ldr	r2, [pc, #56]	@ (8000258 <MX_USB_PCD_Init+0x40>)
 8000220:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <MX_USB_PCD_Init+0x3c>)
 8000224:	2208      	movs	r2, #8
 8000226:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000228:	4b0a      	ldr	r3, [pc, #40]	@ (8000254 <MX_USB_PCD_Init+0x3c>)
 800022a:	2202      	movs	r2, #2
 800022c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800022e:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <MX_USB_PCD_Init+0x3c>)
 8000230:	2200      	movs	r2, #0
 8000232:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000234:	4b07      	ldr	r3, [pc, #28]	@ (8000254 <MX_USB_PCD_Init+0x3c>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800023a:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <MX_USB_PCD_Init+0x3c>)
 800023c:	2200      	movs	r2, #0
 800023e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000240:	4804      	ldr	r0, [pc, #16]	@ (8000254 <MX_USB_PCD_Init+0x3c>)
 8000242:	f000 fa20 	bl	8000686 <HAL_PCD_Init>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800024c:	f000 f828 	bl	80002a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000028 	.word	0x20000028
 8000258:	40005c00 	.word	0x40005c00

0800025c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000262:	4b0e      	ldr	r3, [pc, #56]	@ (800029c <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a0d      	ldr	r2, [pc, #52]	@ (800029c <MX_GPIO_Init+0x40>)
 8000268:	f043 0320 	orr.w	r3, r3, #32
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b0b      	ldr	r3, [pc, #44]	@ (800029c <MX_GPIO_Init+0x40>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0320 	and.w	r3, r3, #32
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027a:	4b08      	ldr	r3, [pc, #32]	@ (800029c <MX_GPIO_Init+0x40>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	4a07      	ldr	r2, [pc, #28]	@ (800029c <MX_GPIO_Init+0x40>)
 8000280:	f043 0304 	orr.w	r3, r3, #4
 8000284:	6193      	str	r3, [r2, #24]
 8000286:	4b05      	ldr	r3, [pc, #20]	@ (800029c <MX_GPIO_Init+0x40>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f003 0304 	and.w	r3, r3, #4
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	40021000 	.word	0x40021000

080002a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002a4:	b672      	cpsid	i
}
 80002a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002a8:	bf00      	nop
 80002aa:	e7fd      	b.n	80002a8 <Error_Handler+0x8>

080002ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002b2:	4b15      	ldr	r3, [pc, #84]	@ (8000308 <HAL_MspInit+0x5c>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a14      	ldr	r2, [pc, #80]	@ (8000308 <HAL_MspInit+0x5c>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b12      	ldr	r3, [pc, #72]	@ (8000308 <HAL_MspInit+0x5c>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000308 <HAL_MspInit+0x5c>)
 80002cc:	69db      	ldr	r3, [r3, #28]
 80002ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000308 <HAL_MspInit+0x5c>)
 80002d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002d4:	61d3      	str	r3, [r2, #28]
 80002d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <HAL_MspInit+0x5c>)
 80002d8:	69db      	ldr	r3, [r3, #28]
 80002da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80002e2:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <HAL_MspInit+0x60>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <HAL_MspInit+0x60>)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000
 800030c:	40010000 	.word	0x40010000

08000310 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a09      	ldr	r2, [pc, #36]	@ (8000344 <HAL_PCD_MspInit+0x34>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d10b      	bne.n	800033a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000322:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <HAL_PCD_MspInit+0x38>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a08      	ldr	r2, [pc, #32]	@ (8000348 <HAL_PCD_MspInit+0x38>)
 8000328:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <HAL_PCD_MspInit+0x38>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40005c00 	.word	0x40005c00
 8000348:	40021000 	.word	0x40021000

0800034c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <NMI_Handler+0x4>

08000354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <HardFault_Handler+0x4>

0800035c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <MemManage_Handler+0x4>

08000364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <BusFault_Handler+0x4>

0800036c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <UsageFault_Handler+0x4>

08000374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039c:	f000 f874 	bl	8000488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003b0:	f7ff fff8 	bl	80003a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480b      	ldr	r0, [pc, #44]	@ (80003e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003b6:	490c      	ldr	r1, [pc, #48]	@ (80003e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003b8:	4a0c      	ldr	r2, [pc, #48]	@ (80003ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a09      	ldr	r2, [pc, #36]	@ (80003f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003cc:	4c09      	ldr	r4, [pc, #36]	@ (80003f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003da:	f000 ff4f 	bl	800127c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003de:	f7ff feb5 	bl	800014c <main>
  bx lr
 80003e2:	4770      	bx	lr
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003ec:	08001308 	.word	0x08001308
  ldr r2, =_sbss
 80003f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003f4:	2000031c 	.word	0x2000031c

080003f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC1_2_IRQHandler>
	...

080003fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000400:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <HAL_Init+0x28>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a07      	ldr	r2, [pc, #28]	@ (8000424 <HAL_Init+0x28>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800040c:	2003      	movs	r0, #3
 800040e:	f000 f907 	bl	8000620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000412:	200f      	movs	r0, #15
 8000414:	f000 f808 	bl	8000428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000418:	f7ff ff48 	bl	80002ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800041c:	2300      	movs	r3, #0
}
 800041e:	4618      	mov	r0, r3
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40022000 	.word	0x40022000

08000428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000430:	4b12      	ldr	r3, [pc, #72]	@ (800047c <HAL_InitTick+0x54>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <HAL_InitTick+0x58>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800043e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000442:	fbb2 f3f3 	udiv	r3, r2, r3
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f911 	bl	800066e <HAL_SYSTICK_Config>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000452:	2301      	movs	r3, #1
 8000454:	e00e      	b.n	8000474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b0f      	cmp	r3, #15
 800045a:	d80a      	bhi.n	8000472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800045c:	2200      	movs	r2, #0
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	f04f 30ff 	mov.w	r0, #4294967295
 8000464:	f000 f8e7 	bl	8000636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000468:	4a06      	ldr	r2, [pc, #24]	@ (8000484 <HAL_InitTick+0x5c>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800046e:	2300      	movs	r3, #0
 8000470:	e000      	b.n	8000474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000472:	2301      	movs	r3, #1
}
 8000474:	4618      	mov	r0, r3
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000000 	.word	0x20000000
 8000480:	20000008 	.word	0x20000008
 8000484:	20000004 	.word	0x20000004

08000488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800048c:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <HAL_IncTick+0x1c>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	461a      	mov	r2, r3
 8000492:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <HAL_IncTick+0x20>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4413      	add	r3, r2
 8000498:	4a03      	ldr	r2, [pc, #12]	@ (80004a8 <HAL_IncTick+0x20>)
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	20000008 	.word	0x20000008
 80004a8:	20000318 	.word	0x20000318

080004ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  return uwTick;
 80004b0:	4b02      	ldr	r3, [pc, #8]	@ (80004bc <HAL_GetTick+0x10>)
 80004b2:	681b      	ldr	r3, [r3, #0]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	20000318 	.word	0x20000318

080004c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f003 0307 	and.w	r3, r3, #7
 80004ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <__NVIC_SetPriorityGrouping+0x44>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004d6:	68ba      	ldr	r2, [r7, #8]
 80004d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80004dc:	4013      	ands	r3, r2
 80004de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80004ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004f2:	4a04      	ldr	r2, [pc, #16]	@ (8000504 <__NVIC_SetPriorityGrouping+0x44>)
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	60d3      	str	r3, [r2, #12]
}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000ed00 	.word	0xe000ed00

08000508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800050c:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <__NVIC_GetPriorityGrouping+0x18>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	0a1b      	lsrs	r3, r3, #8
 8000512:	f003 0307 	and.w	r3, r3, #7
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db0a      	blt.n	800054e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	490c      	ldr	r1, [pc, #48]	@ (8000570 <__NVIC_SetPriority+0x4c>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	0112      	lsls	r2, r2, #4
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	440b      	add	r3, r1
 8000548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800054c:	e00a      	b.n	8000564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4908      	ldr	r1, [pc, #32]	@ (8000574 <__NVIC_SetPriority+0x50>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	3b04      	subs	r3, #4
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	440b      	add	r3, r1
 8000562:	761a      	strb	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000e100 	.word	0xe000e100
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000578:	b480      	push	{r7}
 800057a:	b089      	sub	sp, #36	@ 0x24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	f1c3 0307 	rsb	r3, r3, #7
 8000592:	2b04      	cmp	r3, #4
 8000594:	bf28      	it	cs
 8000596:	2304      	movcs	r3, #4
 8000598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	3304      	adds	r3, #4
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d902      	bls.n	80005a8 <NVIC_EncodePriority+0x30>
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3b03      	subs	r3, #3
 80005a6:	e000      	b.n	80005aa <NVIC_EncodePriority+0x32>
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43da      	mvns	r2, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	401a      	ands	r2, r3
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c0:	f04f 31ff 	mov.w	r1, #4294967295
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43d9      	mvns	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	4313      	orrs	r3, r2
         );
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3724      	adds	r7, #36	@ 0x24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005ec:	d301      	bcc.n	80005f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00f      	b.n	8000612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f2:	4a0a      	ldr	r2, [pc, #40]	@ (800061c <SysTick_Config+0x40>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005fa:	210f      	movs	r1, #15
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f7ff ff90 	bl	8000524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <SysTick_Config+0x40>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060a:	4b04      	ldr	r3, [pc, #16]	@ (800061c <SysTick_Config+0x40>)
 800060c:	2207      	movs	r2, #7
 800060e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	e000e010 	.word	0xe000e010

08000620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff49 	bl	80004c0 <__NVIC_SetPriorityGrouping>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000636:	b580      	push	{r7, lr}
 8000638:	b086      	sub	sp, #24
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
 8000642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000648:	f7ff ff5e 	bl	8000508 <__NVIC_GetPriorityGrouping>
 800064c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	68b9      	ldr	r1, [r7, #8]
 8000652:	6978      	ldr	r0, [r7, #20]
 8000654:	f7ff ff90 	bl	8000578 <NVIC_EncodePriority>
 8000658:	4602      	mov	r2, r0
 800065a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff5f 	bl	8000524 <__NVIC_SetPriority>
}
 8000666:	bf00      	nop
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ffb0 	bl	80005dc <SysTick_Config>
 800067c:	4603      	mov	r3, r0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000688:	b08b      	sub	sp, #44	@ 0x2c
 800068a:	af06      	add	r7, sp, #24
 800068c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000694:	2301      	movs	r3, #1
 8000696:	e0f1      	b.n	800087c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d106      	bne.n	80006b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff fe2f 	bl	8000310 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2203      	movs	r2, #3
 80006b6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fd84 	bl	80011cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	687e      	ldr	r6, [r7, #4]
 80006cc:	466d      	mov	r5, sp
 80006ce:	f106 0410 	add.w	r4, r6, #16
 80006d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	602b      	str	r3, [r5, #0]
 80006da:	1d33      	adds	r3, r6, #4
 80006dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006de:	6838      	ldr	r0, [r7, #0]
 80006e0:	f000 fd64 	bl	80011ac <USB_CoreInit>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d005      	beq.n	80006f6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2202      	movs	r2, #2
 80006ee:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e0c2      	b.n	800087c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fd7f 	bl	8001200 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e040      	b.n	800078a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	440b      	add	r3, r1
 8000718:	3301      	adds	r3, #1
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	4613      	mov	r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	440b      	add	r3, r1
 800072e:	7bfa      	ldrb	r2, [r7, #15]
 8000730:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	6879      	ldr	r1, [r7, #4]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	4613      	mov	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	440b      	add	r3, r1
 8000742:	3303      	adds	r3, #3
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	440b      	add	r3, r1
 8000756:	3338      	adds	r3, #56	@ 0x38
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800075c:	7bfa      	ldrb	r2, [r7, #15]
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	440b      	add	r3, r1
 800076a:	333c      	adds	r3, #60	@ 0x3c
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000770:	7bfa      	ldrb	r2, [r7, #15]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	440b      	add	r3, r1
 800077e:	3340      	adds	r3, #64	@ 0x40
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3301      	adds	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	7bfa      	ldrb	r2, [r7, #15]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	429a      	cmp	r2, r3
 8000792:	d3b9      	bcc.n	8000708 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e044      	b.n	8000824 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800079a:	7bfa      	ldrb	r2, [r7, #15]
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	440b      	add	r3, r1
 80007a8:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	440b      	add	r3, r1
 80007be:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80007c2:	7bfa      	ldrb	r2, [r7, #15]
 80007c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007c6:	7bfa      	ldrb	r2, [r7, #15]
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	4613      	mov	r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	440b      	add	r3, r1
 80007d4:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007dc:	7bfa      	ldrb	r2, [r7, #15]
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007f2:	7bfa      	ldrb	r2, [r7, #15]
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	4613      	mov	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000808:	7bfa      	ldrb	r2, [r7, #15]
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	440b      	add	r3, r1
 8000816:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	3301      	adds	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	d3b5      	bcc.n	800079a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	687e      	ldr	r6, [r7, #4]
 8000836:	466d      	mov	r5, sp
 8000838:	f106 0410 	add.w	r4, r6, #16
 800083c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800083e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	602b      	str	r3, [r5, #0]
 8000844:	1d33      	adds	r3, r6, #4
 8000846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000848:	6838      	ldr	r0, [r7, #0]
 800084a:	f000 fce5 	bl	8001218 <USB_DevInit>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d005      	beq.n	8000860 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2202      	movs	r2, #2
 8000858:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	e00d      	b.n	800087c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2201      	movs	r2, #1
 800086c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fcef 	bl	8001258 <USB_DevDisconnect>

  return HAL_OK;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e272      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 8087 	beq.w	80009b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80008a4:	4b92      	ldr	r3, [pc, #584]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 030c 	and.w	r3, r3, #12
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d00c      	beq.n	80008ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008b0:	4b8f      	ldr	r3, [pc, #572]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f003 030c 	and.w	r3, r3, #12
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d112      	bne.n	80008e2 <HAL_RCC_OscConfig+0x5e>
 80008bc:	4b8c      	ldr	r3, [pc, #560]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80008c8:	d10b      	bne.n	80008e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ca:	4b89      	ldr	r3, [pc, #548]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d06c      	beq.n	80009b0 <HAL_RCC_OscConfig+0x12c>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d168      	bne.n	80009b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e24c      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80008ea:	d106      	bne.n	80008fa <HAL_RCC_OscConfig+0x76>
 80008ec:	4b80      	ldr	r3, [pc, #512]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a7f      	ldr	r2, [pc, #508]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	e02e      	b.n	8000958 <HAL_RCC_OscConfig+0xd4>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10c      	bne.n	800091c <HAL_RCC_OscConfig+0x98>
 8000902:	4b7b      	ldr	r3, [pc, #492]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a7a      	ldr	r2, [pc, #488]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	4b78      	ldr	r3, [pc, #480]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a77      	ldr	r2, [pc, #476]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000914:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e01d      	b.n	8000958 <HAL_RCC_OscConfig+0xd4>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000924:	d10c      	bne.n	8000940 <HAL_RCC_OscConfig+0xbc>
 8000926:	4b72      	ldr	r3, [pc, #456]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a71      	ldr	r2, [pc, #452]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 800092c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	4b6f      	ldr	r3, [pc, #444]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a6e      	ldr	r2, [pc, #440]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e00b      	b.n	8000958 <HAL_RCC_OscConfig+0xd4>
 8000940:	4b6b      	ldr	r3, [pc, #428]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a6a      	ldr	r2, [pc, #424]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b68      	ldr	r3, [pc, #416]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a67      	ldr	r2, [pc, #412]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d013      	beq.n	8000988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000960:	f7ff fda4 	bl	80004ac <HAL_GetTick>
 8000964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000966:	e008      	b.n	800097a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000968:	f7ff fda0 	bl	80004ac <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b64      	cmp	r3, #100	@ 0x64
 8000974:	d901      	bls.n	800097a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000976:	2303      	movs	r3, #3
 8000978:	e200      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800097a:	4b5d      	ldr	r3, [pc, #372]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f0      	beq.n	8000968 <HAL_RCC_OscConfig+0xe4>
 8000986:	e014      	b.n	80009b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000988:	f7ff fd90 	bl	80004ac <HAL_GetTick>
 800098c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800098e:	e008      	b.n	80009a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000990:	f7ff fd8c 	bl	80004ac <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b64      	cmp	r3, #100	@ 0x64
 800099c:	d901      	bls.n	80009a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800099e:	2303      	movs	r3, #3
 80009a0:	e1ec      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009a2:	4b53      	ldr	r3, [pc, #332]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1f0      	bne.n	8000990 <HAL_RCC_OscConfig+0x10c>
 80009ae:	e000      	b.n	80009b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d063      	beq.n	8000a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009be:	4b4c      	ldr	r3, [pc, #304]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 030c 	and.w	r3, r3, #12
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d00b      	beq.n	80009e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009ca:	4b49      	ldr	r3, [pc, #292]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 030c 	and.w	r3, r3, #12
 80009d2:	2b08      	cmp	r3, #8
 80009d4:	d11c      	bne.n	8000a10 <HAL_RCC_OscConfig+0x18c>
 80009d6:	4b46      	ldr	r3, [pc, #280]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d116      	bne.n	8000a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e2:	4b43      	ldr	r3, [pc, #268]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d005      	beq.n	80009fa <HAL_RCC_OscConfig+0x176>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d001      	beq.n	80009fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e1c0      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009fa:	4b3d      	ldr	r3, [pc, #244]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	4939      	ldr	r1, [pc, #228]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a0e:	e03a      	b.n	8000a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d020      	beq.n	8000a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a18:	4b36      	ldr	r3, [pc, #216]	@ (8000af4 <HAL_RCC_OscConfig+0x270>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1e:	f7ff fd45 	bl	80004ac <HAL_GetTick>
 8000a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a24:	e008      	b.n	8000a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a26:	f7ff fd41 	bl	80004ac <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d901      	bls.n	8000a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000a34:	2303      	movs	r3, #3
 8000a36:	e1a1      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a38:	4b2d      	ldr	r3, [pc, #180]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0f0      	beq.n	8000a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a44:	4b2a      	ldr	r3, [pc, #168]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	4927      	ldr	r1, [pc, #156]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000a54:	4313      	orrs	r3, r2
 8000a56:	600b      	str	r3, [r1, #0]
 8000a58:	e015      	b.n	8000a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a5a:	4b26      	ldr	r3, [pc, #152]	@ (8000af4 <HAL_RCC_OscConfig+0x270>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a60:	f7ff fd24 	bl	80004ac <HAL_GetTick>
 8000a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a66:	e008      	b.n	8000a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a68:	f7ff fd20 	bl	80004ac <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d901      	bls.n	8000a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	e180      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f0      	bne.n	8000a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d03a      	beq.n	8000b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d019      	beq.n	8000ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <HAL_RCC_OscConfig+0x274>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa0:	f7ff fd04 	bl	80004ac <HAL_GetTick>
 8000aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa6:	e008      	b.n	8000aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aa8:	f7ff fd00 	bl	80004ac <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d901      	bls.n	8000aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e160      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f0      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f000 fa9c 	bl	8001004 <RCC_Delay>
 8000acc:	e01c      	b.n	8000b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <HAL_RCC_OscConfig+0x274>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fcea 	bl	80004ac <HAL_GetTick>
 8000ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ada:	e00f      	b.n	8000afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000adc:	f7ff fce6 	bl	80004ac <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d908      	bls.n	8000afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000aea:	2303      	movs	r3, #3
 8000aec:	e146      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	42420000 	.word	0x42420000
 8000af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000afc:	4b92      	ldr	r3, [pc, #584]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1e9      	bne.n	8000adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f000 80a6 	beq.w	8000c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b1a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10d      	bne.n	8000b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b88      	ldr	r3, [pc, #544]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a87      	ldr	r2, [pc, #540]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b85      	ldr	r3, [pc, #532]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b42:	4b82      	ldr	r3, [pc, #520]	@ (8000d4c <HAL_RCC_OscConfig+0x4c8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d118      	bne.n	8000b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d4c <HAL_RCC_OscConfig+0x4c8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a7e      	ldr	r2, [pc, #504]	@ (8000d4c <HAL_RCC_OscConfig+0x4c8>)
 8000b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b5a:	f7ff fca7 	bl	80004ac <HAL_GetTick>
 8000b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b60:	e008      	b.n	8000b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b62:	f7ff fca3 	bl	80004ac <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b64      	cmp	r3, #100	@ 0x64
 8000b6e:	d901      	bls.n	8000b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e103      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b74:	4b75      	ldr	r3, [pc, #468]	@ (8000d4c <HAL_RCC_OscConfig+0x4c8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f0      	beq.n	8000b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d106      	bne.n	8000b96 <HAL_RCC_OscConfig+0x312>
 8000b88:	4b6f      	ldr	r3, [pc, #444]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6213      	str	r3, [r2, #32]
 8000b94:	e02d      	b.n	8000bf2 <HAL_RCC_OscConfig+0x36e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x334>
 8000b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000ba0:	6a1b      	ldr	r3, [r3, #32]
 8000ba2:	4a69      	ldr	r2, [pc, #420]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000ba4:	f023 0301 	bic.w	r3, r3, #1
 8000ba8:	6213      	str	r3, [r2, #32]
 8000baa:	4b67      	ldr	r3, [pc, #412]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	4a66      	ldr	r2, [pc, #408]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000bb0:	f023 0304 	bic.w	r3, r3, #4
 8000bb4:	6213      	str	r3, [r2, #32]
 8000bb6:	e01c      	b.n	8000bf2 <HAL_RCC_OscConfig+0x36e>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	d10c      	bne.n	8000bda <HAL_RCC_OscConfig+0x356>
 8000bc0:	4b61      	ldr	r3, [pc, #388]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000bc2:	6a1b      	ldr	r3, [r3, #32]
 8000bc4:	4a60      	ldr	r2, [pc, #384]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6213      	str	r3, [r2, #32]
 8000bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000bce:	6a1b      	ldr	r3, [r3, #32]
 8000bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6213      	str	r3, [r2, #32]
 8000bd8:	e00b      	b.n	8000bf2 <HAL_RCC_OscConfig+0x36e>
 8000bda:	4b5b      	ldr	r3, [pc, #364]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000bdc:	6a1b      	ldr	r3, [r3, #32]
 8000bde:	4a5a      	ldr	r2, [pc, #360]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000be0:	f023 0301 	bic.w	r3, r3, #1
 8000be4:	6213      	str	r3, [r2, #32]
 8000be6:	4b58      	ldr	r3, [pc, #352]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000be8:	6a1b      	ldr	r3, [r3, #32]
 8000bea:	4a57      	ldr	r2, [pc, #348]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000bec:	f023 0304 	bic.w	r3, r3, #4
 8000bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d015      	beq.n	8000c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bfa:	f7ff fc57 	bl	80004ac <HAL_GetTick>
 8000bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c00:	e00a      	b.n	8000c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c02:	f7ff fc53 	bl	80004ac <HAL_GetTick>
 8000c06:	4602      	mov	r2, r0
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d901      	bls.n	8000c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c14:	2303      	movs	r3, #3
 8000c16:	e0b1      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c18:	4b4b      	ldr	r3, [pc, #300]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0ee      	beq.n	8000c02 <HAL_RCC_OscConfig+0x37e>
 8000c24:	e014      	b.n	8000c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c26:	f7ff fc41 	bl	80004ac <HAL_GetTick>
 8000c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c2c:	e00a      	b.n	8000c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c2e:	f7ff fc3d 	bl	80004ac <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d901      	bls.n	8000c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e09b      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c44:	4b40      	ldr	r3, [pc, #256]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1ee      	bne.n	8000c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d105      	bne.n	8000c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c56:	4b3c      	ldr	r3, [pc, #240]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 8087 	beq.w	8000d7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c6c:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 030c 	and.w	r3, r3, #12
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d061      	beq.n	8000d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d146      	bne.n	8000d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c80:	4b33      	ldr	r3, [pc, #204]	@ (8000d50 <HAL_RCC_OscConfig+0x4cc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c86:	f7ff fc11 	bl	80004ac <HAL_GetTick>
 8000c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c8e:	f7ff fc0d 	bl	80004ac <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e06d      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca0:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f0      	bne.n	8000c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cb4:	d108      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cb6:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	4921      	ldr	r1, [pc, #132]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a19      	ldr	r1, [r3, #32]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	491b      	ldr	r1, [pc, #108]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <HAL_RCC_OscConfig+0x4cc>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce6:	f7ff fbe1 	bl	80004ac <HAL_GetTick>
 8000cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cec:	e008      	b.n	8000d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cee:	f7ff fbdd 	bl	80004ac <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e03d      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f0      	beq.n	8000cee <HAL_RCC_OscConfig+0x46a>
 8000d0c:	e035      	b.n	8000d7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <HAL_RCC_OscConfig+0x4cc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fbca 	bl	80004ac <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d1c:	f7ff fbc6 	bl	80004ac <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e026      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_RCC_OscConfig+0x4c4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f0      	bne.n	8000d1c <HAL_RCC_OscConfig+0x498>
 8000d3a:	e01e      	b.n	8000d7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d107      	bne.n	8000d54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e019      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40007000 	.word	0x40007000
 8000d50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <HAL_RCC_OscConfig+0x500>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d106      	bne.n	8000d76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d001      	beq.n	8000d7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e0d0      	b.n	8000f3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8000f48 <HAL_RCC_ClockConfig+0x1c0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d910      	bls.n	8000dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000daa:	4b67      	ldr	r3, [pc, #412]	@ (8000f48 <HAL_RCC_ClockConfig+0x1c0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f023 0207 	bic.w	r2, r3, #7
 8000db2:	4965      	ldr	r1, [pc, #404]	@ (8000f48 <HAL_RCC_ClockConfig+0x1c0>)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dba:	4b63      	ldr	r3, [pc, #396]	@ (8000f48 <HAL_RCC_ClockConfig+0x1c0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d001      	beq.n	8000dcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e0b8      	b.n	8000f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d020      	beq.n	8000e1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000de4:	4b59      	ldr	r3, [pc, #356]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a58      	ldr	r2, [pc, #352]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000dea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000dee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d005      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000dfc:	4b53      	ldr	r3, [pc, #332]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	4a52      	ldr	r2, [pc, #328]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000e06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e08:	4b50      	ldr	r3, [pc, #320]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	494d      	ldr	r1, [pc, #308]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d040      	beq.n	8000ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d107      	bne.n	8000e3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2e:	4b47      	ldr	r3, [pc, #284]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d115      	bne.n	8000e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e07f      	b.n	8000f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d107      	bne.n	8000e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e46:	4b41      	ldr	r3, [pc, #260]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d109      	bne.n	8000e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e073      	b.n	8000f3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e56:	4b3d      	ldr	r3, [pc, #244]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e06b      	b.n	8000f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e66:	4b39      	ldr	r3, [pc, #228]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f023 0203 	bic.w	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	4936      	ldr	r1, [pc, #216]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e78:	f7ff fb18 	bl	80004ac <HAL_GetTick>
 8000e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e7e:	e00a      	b.n	8000e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e80:	f7ff fb14 	bl	80004ac <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e053      	b.n	8000f3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e96:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 020c 	and.w	r2, r3, #12
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d1eb      	bne.n	8000e80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ea8:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <HAL_RCC_ClockConfig+0x1c0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d210      	bcs.n	8000ed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb6:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <HAL_RCC_ClockConfig+0x1c0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f023 0207 	bic.w	r2, r3, #7
 8000ebe:	4922      	ldr	r1, [pc, #136]	@ (8000f48 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ec6:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d001      	beq.n	8000ed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e032      	b.n	8000f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d008      	beq.n	8000ef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	4916      	ldr	r1, [pc, #88]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d009      	beq.n	8000f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f02:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	490e      	ldr	r1, [pc, #56]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f16:	f000 f821 	bl	8000f5c <HAL_RCC_GetSysClockFreq>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <HAL_RCC_ClockConfig+0x1c4>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	490a      	ldr	r1, [pc, #40]	@ (8000f50 <HAL_RCC_ClockConfig+0x1c8>)
 8000f28:	5ccb      	ldrb	r3, [r1, r3]
 8000f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2e:	4a09      	ldr	r2, [pc, #36]	@ (8000f54 <HAL_RCC_ClockConfig+0x1cc>)
 8000f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <HAL_RCC_ClockConfig+0x1d0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fa76 	bl	8000428 <HAL_InitTick>

  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40022000 	.word	0x40022000
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	080012dc 	.word	0x080012dc
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <HAL_RCC_GetSysClockFreq+0x94>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d002      	beq.n	8000f8c <HAL_RCC_GetSysClockFreq+0x30>
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d003      	beq.n	8000f92 <HAL_RCC_GetSysClockFreq+0x36>
 8000f8a:	e027      	b.n	8000fdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f8e:	613b      	str	r3, [r7, #16]
      break;
 8000f90:	e027      	b.n	8000fe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	0c9b      	lsrs	r3, r3, #18
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ff8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000f9c:	5cd3      	ldrb	r3, [r2, r3]
 8000f9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d010      	beq.n	8000fcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <HAL_RCC_GetSysClockFreq+0x94>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	0c5b      	lsrs	r3, r3, #17
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	4a11      	ldr	r2, [pc, #68]	@ (8000ffc <HAL_RCC_GetSysClockFreq+0xa0>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000fbe:	fb03 f202 	mul.w	r2, r3, r2
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e004      	b.n	8000fd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	613b      	str	r3, [r7, #16]
      break;
 8000fda:	e002      	b.n	8000fe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000fde:	613b      	str	r3, [r7, #16]
      break;
 8000fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fe2:	693b      	ldr	r3, [r7, #16]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	007a1200 	.word	0x007a1200
 8000ff8:	080012ec 	.word	0x080012ec
 8000ffc:	080012fc 	.word	0x080012fc
 8001000:	003d0900 	.word	0x003d0900

08001004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <RCC_Delay+0x34>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <RCC_Delay+0x38>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	0a5b      	lsrs	r3, r3, #9
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001020:	bf00      	nop
  }
  while (Delay --);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1e5a      	subs	r2, r3, #1
 8001026:	60fa      	str	r2, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f9      	bne.n	8001020 <RCC_Delay+0x1c>
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000000 	.word	0x20000000
 800103c:	10624dd3 	.word	0x10624dd3

08001040 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d07d      	beq.n	8001158 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001060:	4b4f      	ldr	r3, [pc, #316]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10d      	bne.n	8001088 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	4b4c      	ldr	r3, [pc, #304]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	4a4b      	ldr	r2, [pc, #300]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	61d3      	str	r3, [r2, #28]
 8001078:	4b49      	ldr	r3, [pc, #292]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001084:	2301      	movs	r3, #1
 8001086:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001088:	4b46      	ldr	r3, [pc, #280]	@ (80011a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001090:	2b00      	cmp	r3, #0
 8001092:	d118      	bne.n	80010c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001094:	4b43      	ldr	r3, [pc, #268]	@ (80011a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a42      	ldr	r2, [pc, #264]	@ (80011a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a0:	f7ff fa04 	bl	80004ac <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a6:	e008      	b.n	80010ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a8:	f7ff fa00 	bl	80004ac <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	@ 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e06d      	b.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ba:	4b3a      	ldr	r3, [pc, #232]	@ (80011a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010c6:	4b36      	ldr	r3, [pc, #216]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80010ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d02e      	beq.n	8001134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d027      	beq.n	8001134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010e4:	4b2e      	ldr	r3, [pc, #184]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80010ee:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010f4:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80010fa:	4a29      	ldr	r2, [pc, #164]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d014      	beq.n	8001134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff f9cf 	bl	80004ac <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff f9cb 	bl	80004ac <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e036      	b.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0ee      	beq.n	8001112 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4917      	ldr	r1, [pc, #92]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001142:	4313      	orrs	r3, r2
 8001144:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001146:	7dfb      	ldrb	r3, [r7, #23]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d105      	bne.n	8001158 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800114c:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	4a13      	ldr	r2, [pc, #76]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001156:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	490b      	ldr	r1, [pc, #44]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001172:	4313      	orrs	r3, r2
 8001174:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	2b00      	cmp	r3, #0
 8001180:	d008      	beq.n	8001194 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	4904      	ldr	r1, [pc, #16]	@ (80011a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40007000 	.word	0x40007000
 80011a8:	42420440 	.word	0x42420440

080011ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80011ac:	b084      	sub	sp, #16
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	f107 0014 	add.w	r0, r7, #20
 80011ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	b004      	add	sp, #16
 80011ca:	4770      	bx	lr

080011cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80011d4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80011d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4013      	ands	r3, r2
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001218:	b084      	sub	sp, #16
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	f107 0014 	add.w	r0, r7, #20
 8001226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	b004      	add	sp, #16
 8001256:	4770      	bx	lr

08001258 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <memset>:
 800126c:	4603      	mov	r3, r0
 800126e:	4402      	add	r2, r0
 8001270:	4293      	cmp	r3, r2
 8001272:	d100      	bne.n	8001276 <memset+0xa>
 8001274:	4770      	bx	lr
 8001276:	f803 1b01 	strb.w	r1, [r3], #1
 800127a:	e7f9      	b.n	8001270 <memset+0x4>

0800127c <__libc_init_array>:
 800127c:	b570      	push	{r4, r5, r6, lr}
 800127e:	2600      	movs	r6, #0
 8001280:	4d0c      	ldr	r5, [pc, #48]	@ (80012b4 <__libc_init_array+0x38>)
 8001282:	4c0d      	ldr	r4, [pc, #52]	@ (80012b8 <__libc_init_array+0x3c>)
 8001284:	1b64      	subs	r4, r4, r5
 8001286:	10a4      	asrs	r4, r4, #2
 8001288:	42a6      	cmp	r6, r4
 800128a:	d109      	bne.n	80012a0 <__libc_init_array+0x24>
 800128c:	f000 f81a 	bl	80012c4 <_init>
 8001290:	2600      	movs	r6, #0
 8001292:	4d0a      	ldr	r5, [pc, #40]	@ (80012bc <__libc_init_array+0x40>)
 8001294:	4c0a      	ldr	r4, [pc, #40]	@ (80012c0 <__libc_init_array+0x44>)
 8001296:	1b64      	subs	r4, r4, r5
 8001298:	10a4      	asrs	r4, r4, #2
 800129a:	42a6      	cmp	r6, r4
 800129c:	d105      	bne.n	80012aa <__libc_init_array+0x2e>
 800129e:	bd70      	pop	{r4, r5, r6, pc}
 80012a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80012a4:	4798      	blx	r3
 80012a6:	3601      	adds	r6, #1
 80012a8:	e7ee      	b.n	8001288 <__libc_init_array+0xc>
 80012aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ae:	4798      	blx	r3
 80012b0:	3601      	adds	r6, #1
 80012b2:	e7f2      	b.n	800129a <__libc_init_array+0x1e>
 80012b4:	08001300 	.word	0x08001300
 80012b8:	08001300 	.word	0x08001300
 80012bc:	08001300 	.word	0x08001300
 80012c0:	08001304 	.word	0x08001304

080012c4 <_init>:
 80012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c6:	bf00      	nop
 80012c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ca:	bc08      	pop	{r3}
 80012cc:	469e      	mov	lr, r3
 80012ce:	4770      	bx	lr

080012d0 <_fini>:
 80012d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d2:	bf00      	nop
 80012d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012d6:	bc08      	pop	{r3}
 80012d8:	469e      	mov	lr, r3
 80012da:	4770      	bx	lr

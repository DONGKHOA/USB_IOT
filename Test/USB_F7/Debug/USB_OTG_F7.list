
USB_OTG_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000debc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800e090  0800e090  0000f090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e538  0800e538  000102d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e538  0800e538  0000f538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e540  0800e540  000102d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e540  0800e540  0000f540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e544  0800e544  0000f544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  0800e548  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019b30  200002d4  0800e81c  000102d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019e04  0800e81c  00010e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001068e  00000000  00000000  00010304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ad  00000000  00000000  00020992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00023d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a09  00000000  00000000  00024af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e65  00000000  00000000  000254f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ee3  00000000  00000000  0004e35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7262  00000000  00000000  00062241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001494a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aac  00000000  00000000  001494e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0014df94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e074 	.word	0x0800e074

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d8 	.word	0x200002d8
 800020c:	0800e074 	.word	0x0800e074

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001028:	f000 f8ba 	bl	80011a0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fa4a 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f806 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 f86a 	bl	800110c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001038:	f007 ff52 	bl	8008ee0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <main+0x18>

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	@ 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	@ 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f009 fced 	bl	800aa2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <SystemClock_Config+0xc4>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <SystemClock_Config+0xc4>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001070:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <SystemClock_Config+0xc4>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800107c:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <SystemClock_Config+0xc8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001084:	4a20      	ldr	r2, [pc, #128]	@ (8001108 <SystemClock_Config+0xc8>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <SystemClock_Config+0xc8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800109c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010ac:	2319      	movs	r3, #25
 80010ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010b0:	23c0      	movs	r3, #192	@ 0xc0
 80010b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010b4:	2304      	movs	r3, #4
 80010b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010b8:	2304      	movs	r3, #4
 80010ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 f88f 	bl	80031e4 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80010cc:	f000 f894 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2101      	movs	r1, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fb1d 	bl	800372c <HAL_RCC_ClockConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80010f8:	f000 f87e 	bl	80011f8 <Error_Handler>
  }
}
 80010fc:	bf00      	nop
 80010fe:	3750      	adds	r7, #80	@ 0x50
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <MX_GPIO_Init+0x8c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a1c      	ldr	r2, [pc, #112]	@ (8001198 <MX_GPIO_Init+0x8c>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_GPIO_Init+0x8c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_GPIO_Init+0x8c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <MX_GPIO_Init+0x8c>)
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_GPIO_Init+0x8c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_GPIO_Init+0x8c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a10      	ldr	r2, [pc, #64]	@ (8001198 <MX_GPIO_Init+0x8c>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <MX_GPIO_Init+0x8c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2120      	movs	r1, #32
 800116e:	480b      	ldr	r0, [pc, #44]	@ (800119c <MX_GPIO_Init+0x90>)
 8001170:	f000 fd68 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001174:	2320      	movs	r3, #32
 8001176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	4804      	ldr	r0, [pc, #16]	@ (800119c <MX_GPIO_Init+0x90>)
 800118c:	f000 fbae 	bl	80018ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40020c00 	.word	0x40020c00

080011a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011b2:	f000 fb23 	bl	80017fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011b6:	2301      	movs	r3, #1
 80011b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011c2:	231f      	movs	r3, #31
 80011c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011c6:	2387      	movs	r3, #135	@ 0x87
 80011c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011ce:	2300      	movs	r3, #0
 80011d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011d6:	2301      	movs	r3, #1
 80011d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011e2:	463b      	mov	r3, r7
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fb41 	bl	800186c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011ea:	2004      	movs	r0, #4
 80011ec:	f000 fb1e 	bl	800182c <HAL_MPU_Enable>

}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <Error_Handler+0x8>

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_MspInit+0x44>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a0e      	ldr	r2, [pc, #56]	@ (8001248 <HAL_MspInit+0x44>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <HAL_MspInit+0x44>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <HAL_MspInit+0x44>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <HAL_MspInit+0x44>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122c:	6453      	str	r3, [r2, #68]	@ 0x44
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_MspInit+0x44>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <NMI_Handler+0x4>

08001254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <MemManage_Handler+0x4>

08001264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <UsageFault_Handler+0x4>

08001274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a2:	f000 f955 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <OTG_FS_IRQHandler+0x10>)
 80012b2:	f000 fe18 	bl	8001ee6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200197d8 	.word	0x200197d8

080012c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return 1;
 80012c4:	2301      	movs	r3, #1
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_kill>:

int _kill(int pid, int sig)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012da:	f009 fc0b 	bl	800aaf4 <__errno>
 80012de:	4603      	mov	r3, r0
 80012e0:	2216      	movs	r2, #22
 80012e2:	601a      	str	r2, [r3, #0]
  return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_exit>:

void _exit (int status)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ffe7 	bl	80012d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001302:	bf00      	nop
 8001304:	e7fd      	b.n	8001302 <_exit+0x12>

08001306 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e00a      	b.n	800132e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001318:	f3af 8000 	nop.w
 800131c:	4601      	mov	r1, r0
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	60ba      	str	r2, [r7, #8]
 8001324:	b2ca      	uxtb	r2, r1
 8001326:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbf0      	blt.n	8001318 <_read+0x12>
  }

  return len;
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e009      	b.n	8001366 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	60ba      	str	r2, [r7, #8]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	dbf1      	blt.n	8001352 <_write+0x12>
  }
  return len;
 800136e:	687b      	ldr	r3, [r7, #4]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_close>:

int _close(int file)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a0:	605a      	str	r2, [r3, #4]
  return 0;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_isatty>:

int _isatty(int file)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b8:	2301      	movs	r3, #1
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e8:	4a14      	ldr	r2, [pc, #80]	@ (800143c <_sbrk+0x5c>)
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <_sbrk+0x60>)
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <_sbrk+0x64>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <_sbrk+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001410:	f009 fb70 	bl	800aaf4 <__errno>
 8001414:	4603      	mov	r3, r0
 8001416:	220c      	movs	r2, #12
 8001418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e009      	b.n	8001434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <_sbrk+0x64>)
 8001430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20050000 	.word	0x20050000
 8001440:	00000400 	.word	0x00000400
 8001444:	200002f0 	.word	0x200002f0
 8001448:	20019e08 	.word	0x20019e08

0800144c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <SystemInit+0x20>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001456:	4a05      	ldr	r2, [pc, #20]	@ (800146c <SystemInit+0x20>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001474:	f7ff ffea 	bl	800144c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	@ (80014b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	@ (80014bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800149e:	f009 fb2f 	bl	800ab00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7ff fdbf 	bl	8001024 <main>
  bx  lr    
 80014a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80014b4:	0800e548 	.word	0x0800e548
  ldr r2, =_sbss
 80014b8:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80014bc:	20019e04 	.word	0x20019e04

080014c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <HAL_Init+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	@ (80014ec <HAL_Init+0x28>)
 80014ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f94f 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	200f      	movs	r0, #15
 80014dc:	f000 f808 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff fe90 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023c00 	.word	0x40023c00

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_InitTick+0x54>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f967 	bl	80017e2 <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f92f 	bl	800178e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	@ (800154c <HAL_InitTick+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000000 	.word	0x20000000
 8001548:	20000008 	.word	0x20000008
 800154c:	20000004 	.word	0x20000004

08001550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_IncTick+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x24>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <HAL_IncTick+0x24>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000008 	.word	0x20000008
 8001574:	200002f4 	.word	0x200002f4

08001578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b03      	ldr	r3, [pc, #12]	@ (800158c <HAL_GetTick+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200002f4 	.word	0x200002f4

08001590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff ffee 	bl	8001578 <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d005      	beq.n	80015b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_Delay+0x44>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b6:	bf00      	nop
 80015b8:	f7ff ffde 	bl	8001578 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8f7      	bhi.n	80015b8 <HAL_Delay+0x28>
  {
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008

080015d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <__NVIC_SetPriorityGrouping+0x40>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f4:	4013      	ands	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	4313      	orrs	r3, r2
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <__NVIC_SetPriorityGrouping+0x40>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00
 800161c:	05fa0000 	.word	0x05fa0000

08001620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <__NVIC_GetPriorityGrouping+0x18>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	f003 0307 	and.w	r3, r3, #7
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	db0b      	blt.n	8001666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	f003 021f 	and.w	r2, r3, #31
 8001654:	4907      	ldr	r1, [pc, #28]	@ (8001674 <__NVIC_EnableIRQ+0x38>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	2001      	movs	r0, #1
 800165e:	fa00 f202 	lsl.w	r2, r0, r2
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	@ (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	@ 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001744:	d301      	bcc.n	800174a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2301      	movs	r3, #1
 8001748:	e00f      	b.n	800176a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <SysTick_Config+0x40>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001752:	210f      	movs	r1, #15
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f7ff ff8e 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <SysTick_Config+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <SysTick_Config+0x40>)
 8001764:	2207      	movs	r2, #7
 8001766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff29 	bl	80015d8 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff3e 	bl	8001620 <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff8e 	bl	80016cc <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff5d 	bl	8001678 <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff31 	bl	800163c <__NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffa2 	bl	8001734 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001800:	f3bf 8f5f 	dmb	sy
}
 8001804:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001806:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <HAL_MPU_Disable+0x28>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	4a06      	ldr	r2, [pc, #24]	@ (8001824 <HAL_MPU_Disable+0x28>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001810:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_MPU_Disable+0x2c>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	e000ed90 	.word	0xe000ed90

0800182c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <HAL_MPU_Enable+0x38>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_MPU_Enable+0x3c>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	4a09      	ldr	r2, [pc, #36]	@ (8001868 <HAL_MPU_Enable+0x3c>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001848:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800184a:	f3bf 8f4f 	dsb	sy
}
 800184e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001850:	f3bf 8f6f 	isb	sy
}
 8001854:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed90 	.word	0xe000ed90
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	785a      	ldrb	r2, [r3, #1]
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_MPU_ConfigRegion+0x7c>)
 800187a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <HAL_MPU_ConfigRegion+0x7c>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4a19      	ldr	r2, [pc, #100]	@ (80018e8 <HAL_MPU_ConfigRegion+0x7c>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001888:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <HAL_MPU_ConfigRegion+0x7c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7b1b      	ldrb	r3, [r3, #12]
 8001894:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7adb      	ldrb	r3, [r3, #11]
 800189a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800189c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7a9b      	ldrb	r3, [r3, #10]
 80018a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7b5b      	ldrb	r3, [r3, #13]
 80018aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7b9b      	ldrb	r3, [r3, #14]
 80018b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7bdb      	ldrb	r3, [r3, #15]
 80018ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7a5b      	ldrb	r3, [r3, #9]
 80018c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7a1b      	ldrb	r3, [r3, #8]
 80018ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018d8:	6113      	str	r3, [r2, #16]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed90 	.word	0xe000ed90

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e175      	b.n	8001bf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	429a      	cmp	r2, r3
 8001926:	f040 8164 	bne.w	8001bf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d005      	beq.n	8001942 <HAL_GPIO_Init+0x56>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d130      	bne.n	80019a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001978:	2201      	movs	r2, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 0201 	and.w	r2, r3, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d017      	beq.n	80019e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d123      	bne.n	8001a34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	08da      	lsrs	r2, r3, #3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3208      	adds	r2, #8
 80019f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	08da      	lsrs	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3208      	adds	r2, #8
 8001a2e:	69b9      	ldr	r1, [r7, #24]
 8001a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80be 	beq.w	8001bf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	4b66      	ldr	r3, [pc, #408]	@ (8001c10 <HAL_GPIO_Init+0x324>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4a65      	ldr	r2, [pc, #404]	@ (8001c10 <HAL_GPIO_Init+0x324>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a82:	4b63      	ldr	r3, [pc, #396]	@ (8001c10 <HAL_GPIO_Init+0x324>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a8e:	4a61      	ldr	r2, [pc, #388]	@ (8001c14 <HAL_GPIO_Init+0x328>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a58      	ldr	r2, [pc, #352]	@ (8001c18 <HAL_GPIO_Init+0x32c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d037      	beq.n	8001b2a <HAL_GPIO_Init+0x23e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a57      	ldr	r2, [pc, #348]	@ (8001c1c <HAL_GPIO_Init+0x330>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d031      	beq.n	8001b26 <HAL_GPIO_Init+0x23a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d02b      	beq.n	8001b22 <HAL_GPIO_Init+0x236>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a55      	ldr	r2, [pc, #340]	@ (8001c24 <HAL_GPIO_Init+0x338>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d025      	beq.n	8001b1e <HAL_GPIO_Init+0x232>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a54      	ldr	r2, [pc, #336]	@ (8001c28 <HAL_GPIO_Init+0x33c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01f      	beq.n	8001b1a <HAL_GPIO_Init+0x22e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a53      	ldr	r2, [pc, #332]	@ (8001c2c <HAL_GPIO_Init+0x340>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x22a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	@ (8001c30 <HAL_GPIO_Init+0x344>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x226>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a51      	ldr	r2, [pc, #324]	@ (8001c34 <HAL_GPIO_Init+0x348>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x222>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a50      	ldr	r2, [pc, #320]	@ (8001c38 <HAL_GPIO_Init+0x34c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x21e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c3c <HAL_GPIO_Init+0x350>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x21a>
 8001b02:	2309      	movs	r3, #9
 8001b04:	e012      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b06:	230a      	movs	r3, #10
 8001b08:	e010      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	e00e      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b0e:	2307      	movs	r3, #7
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b12:	2306      	movs	r3, #6
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b3c:	4935      	ldr	r1, [pc, #212]	@ (8001c14 <HAL_GPIO_Init+0x328>)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6e:	4a34      	ldr	r2, [pc, #208]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b74:	4b32      	ldr	r3, [pc, #200]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b98:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9e:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	f67f ae86 	bls.w	800190c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3724      	adds	r7, #36	@ 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40021c00 	.word	0x40021c00
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	40022400 	.word	0x40022400
 8001c40:	40013c00 	.word	0x40013c00

08001c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c60:	e003      	b.n	8001c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	619a      	str	r2, [r3, #24]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af02      	add	r7, sp, #8
 8001c7c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e108      	b.n	8001e9a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f007 fae6 	bl	8009274 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2203      	movs	r2, #3
 8001cac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cb6:	d102      	bne.n	8001cbe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fbed 	bl	80044a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7c1a      	ldrb	r2, [r3, #16]
 8001cd0:	f88d 2000 	strb.w	r2, [sp]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd8:	f002 fad6 	bl	8004288 <USB_CoreInit>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0d5      	b.n	8001e9a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f002 fbe5 	bl	80044c4 <USB_SetCurrentMode>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0c6      	b.n	8001e9a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e04a      	b.n	8001da8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	3315      	adds	r3, #21
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	3314      	adds	r3, #20
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b298      	uxth	r0, r3
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	332e      	adds	r3, #46	@ 0x2e
 8001d4e:	4602      	mov	r2, r0
 8001d50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3318      	adds	r3, #24
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	331c      	adds	r3, #28
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	3320      	adds	r3, #32
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3324      	adds	r3, #36	@ 0x24
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	3301      	adds	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	791b      	ldrb	r3, [r3, #4]
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d3af      	bcc.n	8001d12 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
 8001db6:	e044      	b.n	8001e42 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	791b      	ldrb	r3, [r3, #4]
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d3b5      	bcc.n	8001db8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7c1a      	ldrb	r2, [r3, #16]
 8001e54:	f88d 2000 	strb.w	r2, [sp]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5c:	f002 fb7e 	bl	800455c <USB_DevInit>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e013      	b.n	8001e9a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7b1b      	ldrb	r3, [r3, #12]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d102      	bne.n	8001e8e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f001 f987 	bl	800319c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fbbd 	bl	8005612 <USB_DevDisconnect>

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_PCD_Start+0x16>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e012      	b.n	8001ede <HAL_PCD_Start+0x3c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 fadb 	bl	8004480 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fb7e 	bl	80055d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ee6:	b590      	push	{r4, r7, lr}
 8001ee8:	b08d      	sub	sp, #52	@ 0x34
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 fc3c 	bl	800577a <USB_GetMode>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f040 84b9 	bne.w	800287c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fba0 	bl	8005654 <USB_ReadInterrupts>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 84af 	beq.w	800287a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 fb8d 	bl	8005654 <USB_ReadInterrupts>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d107      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f002 0202 	and.w	r2, r2, #2
 8001f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 fb7b 	bl	8005654 <USB_ReadInterrupts>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d161      	bne.n	800202c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0210 	bic.w	r2, r2, #16
 8001f76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	0c5b      	lsrs	r3, r3, #17
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d124      	bne.n	8001fee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d035      	beq.n	800201c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	6a38      	ldr	r0, [r7, #32]
 8001fc4:	f003 f9b2 	bl	800532c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fd4:	441a      	add	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe6:	441a      	add	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	615a      	str	r2, [r3, #20]
 8001fec:	e016      	b.n	800201c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	0c5b      	lsrs	r3, r3, #17
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d110      	bne.n	800201c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002000:	2208      	movs	r2, #8
 8002002:	4619      	mov	r1, r3
 8002004:	6a38      	ldr	r0, [r7, #32]
 8002006:	f003 f991 	bl	800532c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002016:	441a      	add	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0210 	orr.w	r2, r2, #16
 800202a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f003 fb0f 	bl	8005654 <USB_ReadInterrupts>
 8002036:	4603      	mov	r3, r0
 8002038:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800203c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002040:	f040 80a7 	bne.w	8002192 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f003 fb14 	bl	800567a <USB_ReadDevAllOutEpInterrupt>
 8002052:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002054:	e099      	b.n	800218a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 808e 	beq.w	800217e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fb38 	bl	80056e2 <USB_ReadDevOutEPInterrupt>
 8002072:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	4413      	add	r3, r2
 8002086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800208a:	461a      	mov	r2, r3
 800208c:	2301      	movs	r3, #1
 800208e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002090:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fefc 	bl	8002e90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00c      	beq.n	80020bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ae:	461a      	mov	r2, r3
 80020b0:	2308      	movs	r3, #8
 80020b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 ffd2 	bl	8003060 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d008      	beq.n	80020d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020d2:	461a      	mov	r2, r3
 80020d4:	2310      	movs	r3, #16
 80020d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d030      	beq.n	8002144 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ea:	2b80      	cmp	r3, #128	@ 0x80
 80020ec:	d109      	bne.n	8002102 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002100:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	78db      	ldrb	r3, [r3, #3]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d108      	bne.n	8002132 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2200      	movs	r2, #0
 8002124:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f007 f9c5 	bl	80094bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800213e:	461a      	mov	r2, r3
 8002140:	2302      	movs	r3, #2
 8002142:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800215a:	461a      	mov	r2, r3
 800215c:	2320      	movs	r3, #32
 800215e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002176:	461a      	mov	r2, r3
 8002178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800217c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	3301      	adds	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002186:	085b      	lsrs	r3, r3, #1
 8002188:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800218a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	f47f af62 	bne.w	8002056 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fa5c 	bl	8005654 <USB_ReadInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80021a6:	f040 80db 	bne.w	8002360 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f003 fa7d 	bl	80056ae <USB_ReadDevAllInEpInterrupt>
 80021b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80021ba:	e0cd      	b.n	8002358 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80c2 	beq.w	800234c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 faa3 	bl	800571e <USB_ReadDevInEPInterrupt>
 80021d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d057      	beq.n	8002294 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	2201      	movs	r2, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69f9      	ldr	r1, [r7, #28]
 8002200:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002204:	4013      	ands	r3, r2
 8002206:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002214:	461a      	mov	r2, r3
 8002216:	2301      	movs	r3, #1
 8002218:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	799b      	ldrb	r3, [r3, #6]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d132      	bne.n	8002288 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3320      	adds	r3, #32
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4403      	add	r3, r0
 8002242:	331c      	adds	r3, #28
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4419      	add	r1, r3
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4403      	add	r3, r0
 8002256:	3320      	adds	r3, #32
 8002258:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	2b00      	cmp	r3, #0
 800225e:	d113      	bne.n	8002288 <HAL_PCD_IRQHandler+0x3a2>
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	3324      	adds	r3, #36	@ 0x24
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d108      	bne.n	8002288 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002280:	461a      	mov	r2, r3
 8002282:	2101      	movs	r1, #1
 8002284:	f003 faac 	bl	80057e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	b2db      	uxtb	r3, r3
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f007 f88f 	bl	80093b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022aa:	461a      	mov	r2, r3
 80022ac:	2308      	movs	r3, #8
 80022ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022c6:	461a      	mov	r2, r3
 80022c8:	2310      	movs	r3, #16
 80022ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022e2:	461a      	mov	r2, r3
 80022e4:	2340      	movs	r3, #64	@ 0x40
 80022e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d023      	beq.n	800233a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022f4:	6a38      	ldr	r0, [r7, #32]
 80022f6:	f002 fa8f 	bl	8004818 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	3310      	adds	r3, #16
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	3304      	adds	r3, #4
 800230c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	78db      	ldrb	r3, [r3, #3]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d108      	bne.n	8002328 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2200      	movs	r2, #0
 800231a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	b2db      	uxtb	r3, r3
 8002320:	4619      	mov	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f007 f8dc 	bl	80094e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002334:	461a      	mov	r2, r3
 8002336:	2302      	movs	r3, #2
 8002338:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002344:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fd15 	bl	8002d76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	3301      	adds	r3, #1
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	f47f af2e 	bne.w	80021bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f003 f975 	bl	8005654 <USB_ReadInterrupts>
 800236a:	4603      	mov	r3, r0
 800236c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002374:	d122      	bne.n	80023bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002390:	2b01      	cmp	r3, #1
 8002392:	d108      	bne.n	80023a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800239c:	2100      	movs	r1, #0
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f007 fa76 	bl	8009890 <HAL_PCDEx_LPM_Callback>
 80023a4:	e002      	b.n	80023ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f007 f87a 	bl	80094a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80023ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 f947 	bl	8005654 <USB_ReadInterrupts>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023d0:	d112      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f007 f836 	bl	8009454 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80023f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 f929 	bl	8005654 <USB_ReadInterrupts>
 8002402:	4603      	mov	r3, r0
 8002404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800240c:	d121      	bne.n	8002452 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800241c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002424:	2b00      	cmp	r3, #0
 8002426:	d111      	bne.n	800244c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002442:	2101      	movs	r1, #1
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f007 fa23 	bl	8009890 <HAL_PCDEx_LPM_Callback>
 800244a:	e002      	b.n	8002452 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f007 f801 	bl	8009454 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f003 f8fc 	bl	8005654 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002466:	f040 80b7 	bne.w	80025d8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2110      	movs	r1, #16
 8002484:	4618      	mov	r0, r3
 8002486:	f002 f9c7 	bl	8004818 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800248e:	e046      	b.n	800251e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800249c:	461a      	mov	r2, r3
 800249e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80024a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024b4:	0151      	lsls	r1, r2, #5
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	440a      	add	r2, r1
 80024ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80024be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024d0:	461a      	mov	r2, r3
 80024d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80024d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024e8:	0151      	lsls	r1, r2, #5
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	440a      	add	r2, r1
 80024ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80024f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002508:	0151      	lsls	r1, r2, #5
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	440a      	add	r2, r1
 800250e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002512:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002516:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800251a:	3301      	adds	r3, #1
 800251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	791b      	ldrb	r3, [r3, #4]
 8002522:	461a      	mov	r2, r3
 8002524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002526:	4293      	cmp	r3, r2
 8002528:	d3b2      	bcc.n	8002490 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002538:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800253c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7bdb      	ldrb	r3, [r3, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800254c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002556:	f043 030b 	orr.w	r3, r3, #11
 800255a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800256c:	f043 030b 	orr.w	r3, r3, #11
 8002570:	6453      	str	r3, [r2, #68]	@ 0x44
 8002572:	e015      	b.n	80025a0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002582:	4619      	mov	r1, r3
 8002584:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002588:	4313      	orrs	r3, r2
 800258a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800259a:	f043 030b 	orr.w	r3, r3, #11
 800259e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80025b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025c2:	461a      	mov	r2, r3
 80025c4:	f003 f90c 	bl	80057e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80025d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 f839 	bl	8005654 <USB_ReadInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ec:	d123      	bne.n	8002636 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 f8d0 	bl	8005798 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 f984 	bl	800490a <USB_GetDevSpeed>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681c      	ldr	r4, [r3, #0]
 800260e:	f001 fa3f 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8002612:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002618:	461a      	mov	r2, r3
 800261a:	4620      	mov	r0, r4
 800261c:	f001 fe8e 	bl	800433c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f006 feee 	bl	8009402 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002634:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f003 f80a 	bl	8005654 <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d10a      	bne.n	8002660 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f006 fecb 	bl	80093e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f002 0208 	and.w	r2, r2, #8
 800265e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f002 fff5 	bl	8005654 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002670:	2b80      	cmp	r3, #128	@ 0x80
 8002672:	d123      	bne.n	80026bc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002680:	2301      	movs	r3, #1
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
 8002684:	e014      	b.n	80026b0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d105      	bne.n	80026aa <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fb08 	bl	8002cba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	3301      	adds	r3, #1
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	791b      	ldrb	r3, [r3, #4]
 80026b4:	461a      	mov	r2, r3
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d3e4      	bcc.n	8002686 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f002 ffc7 	bl	8005654 <USB_ReadInterrupts>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026d0:	d13c      	bne.n	800274c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026d2:	2301      	movs	r3, #1
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d6:	e02b      	b.n	8002730 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3318      	adds	r3, #24
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d115      	bne.n	800272a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80026fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002700:	2b00      	cmp	r3, #0
 8002702:	da12      	bge.n	800272a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3317      	adds	r3, #23
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4619      	mov	r1, r3
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fac8 	bl	8002cba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	3301      	adds	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	791b      	ldrb	r3, [r3, #4]
 8002734:	461a      	mov	r2, r3
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	4293      	cmp	r3, r2
 800273a:	d3cd      	bcc.n	80026d8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800274a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f002 ff7f 	bl	8005654 <USB_ReadInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800275c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002760:	d156      	bne.n	8002810 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002762:	2301      	movs	r3, #1
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
 8002766:	e045      	b.n	80027f4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	4413      	add	r3, r2
 8002770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d12e      	bne.n	80027ee <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002790:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002792:	2b00      	cmp	r3, #0
 8002794:	da2b      	bge.n	80027ee <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80027a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d121      	bne.n	80027ee <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ea:	6053      	str	r3, [r2, #4]
            break;
 80027ec:	e008      	b.n	8002800 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	3301      	adds	r3, #1
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	791b      	ldrb	r3, [r3, #4]
 80027f8:	461a      	mov	r2, r3
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d3b3      	bcc.n	8002768 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800280e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f002 ff1d 	bl	8005654 <USB_ReadInterrupts>
 800281a:	4603      	mov	r3, r0
 800281c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002824:	d10a      	bne.n	800283c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f006 fe6c 	bl	8009504 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800283a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f002 ff07 	bl	8005654 <USB_ReadInterrupts>
 8002846:	4603      	mov	r3, r0
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d115      	bne.n	800287c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f006 fe5c 	bl	8009520 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	e000      	b.n	800287c <HAL_PCD_IRQHandler+0x996>
      return;
 800287a:	bf00      	nop
    }
  }
}
 800287c:	3734      	adds	r7, #52	@ 0x34
 800287e:	46bd      	mov	sp, r7
 8002880:	bd90      	pop	{r4, r7, pc}

08002882 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_PCD_SetAddress+0x1a>
 8002898:	2302      	movs	r3, #2
 800289a:	e012      	b.n	80028c2 <HAL_PCD_SetAddress+0x40>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 fe66 	bl	8005584 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	4608      	mov	r0, r1
 80028d4:	4611      	mov	r1, r2
 80028d6:	461a      	mov	r2, r3
 80028d8:	4603      	mov	r3, r0
 80028da:	70fb      	strb	r3, [r7, #3]
 80028dc:	460b      	mov	r3, r1
 80028de:	803b      	strh	r3, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	da0f      	bge.n	8002910 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 020f 	and.w	r2, r3, #15
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	3310      	adds	r3, #16
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	3304      	adds	r3, #4
 8002906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	705a      	strb	r2, [r3, #1]
 800290e:	e00f      	b.n	8002930 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	f003 020f 	and.w	r2, r3, #15
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	3304      	adds	r3, #4
 8002928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800293c:	883a      	ldrh	r2, [r7, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	78ba      	ldrb	r2, [r7, #2]
 8002946:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d004      	beq.n	800295a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800295a:	78bb      	ldrb	r3, [r7, #2]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d102      	bne.n	8002966 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_PCD_EP_Open+0xaa>
 8002970:	2302      	movs	r3, #2
 8002972:	e00e      	b.n	8002992 <HAL_PCD_EP_Open+0xc8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68f9      	ldr	r1, [r7, #12]
 8002982:	4618      	mov	r0, r3
 8002984:	f001 ffe6 	bl	8004954 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002990:	7afb      	ldrb	r3, [r7, #11]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da0f      	bge.n	80029ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	f003 020f 	and.w	r2, r3, #15
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	3310      	adds	r3, #16
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	3304      	adds	r3, #4
 80029c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	705a      	strb	r2, [r3, #1]
 80029cc:	e00f      	b.n	80029ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 020f 	and.w	r2, r3, #15
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	3304      	adds	r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_PCD_EP_Close+0x6e>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e00e      	b.n	8002a26 <HAL_PCD_EP_Close+0x8c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68f9      	ldr	r1, [r7, #12]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 f824 	bl	8004a64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a3e:	7afb      	ldrb	r3, [r7, #11]
 8002a40:	f003 020f 	and.w	r2, r3, #15
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	3304      	adds	r3, #4
 8002a56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2200      	movs	r2, #0
 8002a68:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a70:	7afb      	ldrb	r3, [r7, #11]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	799b      	ldrb	r3, [r3, #6]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d102      	bne.n	8002a8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	799b      	ldrb	r3, [r3, #6]
 8002a92:	461a      	mov	r2, r3
 8002a94:	6979      	ldr	r1, [r7, #20]
 8002a96:	f002 f8c1 	bl	8004c1c <USB_EPStartXfer>

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	f003 020f 	and.w	r2, r3, #15
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	3310      	adds	r3, #16
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	3304      	adds	r3, #4
 8002afa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2201      	movs	r2, #1
 8002b12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b14:	7afb      	ldrb	r3, [r7, #11]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	799b      	ldrb	r3, [r3, #6]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d102      	bne.n	8002b2e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	799b      	ldrb	r3, [r3, #6]
 8002b36:	461a      	mov	r2, r3
 8002b38:	6979      	ldr	r1, [r7, #20]
 8002b3a:	f002 f86f 	bl	8004c1c <USB_EPStartXfer>

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	7912      	ldrb	r2, [r2, #4]
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e04f      	b.n	8002c06 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da0f      	bge.n	8002b8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	f003 020f 	and.w	r2, r3, #15
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	3310      	adds	r3, #16
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	3304      	adds	r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	705a      	strb	r2, [r3, #1]
 8002b8c:	e00d      	b.n	8002baa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_PCD_EP_SetStall+0x82>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e01d      	b.n	8002c06 <HAL_PCD_EP_SetStall+0xbe>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68f9      	ldr	r1, [r7, #12]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f002 fbff 	bl	80053dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d109      	bne.n	8002bfc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7999      	ldrb	r1, [r3, #6]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f002 fdf2 	bl	80057e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	7912      	ldrb	r2, [r2, #4]
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e042      	b.n	8002cb2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	da0f      	bge.n	8002c54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	f003 020f 	and.w	r2, r3, #15
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	3310      	adds	r3, #16
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	705a      	strb	r2, [r3, #1]
 8002c52:	e00f      	b.n	8002c74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 020f 	and.w	r2, r3, #15
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_PCD_EP_ClrStall+0x86>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e00e      	b.n	8002cb2 <HAL_PCD_EP_ClrStall+0xa4>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68f9      	ldr	r1, [r7, #12]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 fc08 	bl	80054b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	da0c      	bge.n	8002ce8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	3310      	adds	r3, #16
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e00c      	b.n	8002d02 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	f003 020f 	and.w	r2, r3, #15
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3304      	adds	r3, #4
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 fa27 	bl	800515c <USB_EPStopXfer>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d12:	7afb      	ldrb	r3, [r7, #11]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_PCD_EP_Flush+0x1a>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e01b      	b.n	8002d6e <HAL_PCD_EP_Flush+0x52>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8002d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da09      	bge.n	8002d5a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	4619      	mov	r1, r3
 8002d52:	4610      	mov	r0, r2
 8002d54:	f001 fd60 	bl	8004818 <USB_FlushTxFifo>
 8002d58:	e004      	b.n	8002d64 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fd8c 	bl	800487c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b08a      	sub	sp, #40	@ 0x28
 8002d7a:	af02      	add	r7, sp, #8
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	3310      	adds	r3, #16
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d901      	bls.n	8002dae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06b      	b.n	8002e86 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d902      	bls.n	8002dca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3303      	adds	r3, #3
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dd2:	e02a      	b.n	8002e2a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d902      	bls.n	8002df0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3303      	adds	r3, #3
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68d9      	ldr	r1, [r3, #12]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6978      	ldr	r0, [r7, #20]
 8002e0e:	f002 fa4f 	bl	80052b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	441a      	add	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	441a      	add	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d809      	bhi.n	8002e54 <PCD_WriteEmptyTxFifo+0xde>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d203      	bcs.n	8002e54 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1bf      	bne.n	8002dd4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d811      	bhi.n	8002e84 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	2201      	movs	r2, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	6939      	ldr	r1, [r7, #16]
 8002e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e80:	4013      	ands	r3, r2
 8002e82:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	333c      	adds	r3, #60	@ 0x3c
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	799b      	ldrb	r3, [r3, #6]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d17b      	bne.n	8002fbe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4a61      	ldr	r2, [pc, #388]	@ (8003058 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	f240 80b9 	bls.w	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80b3 	beq.w	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ef8:	6093      	str	r3, [r2, #8]
 8002efa:	e0a7      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f12:	461a      	mov	r2, r3
 8002f14:	2320      	movs	r3, #32
 8002f16:	6093      	str	r3, [r2, #8]
 8002f18:	e098      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 8093 	bne.w	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	4a4b      	ldr	r2, [pc, #300]	@ (8003058 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d90f      	bls.n	8002f4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f44:	461a      	mov	r2, r3
 8002f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f4a:	6093      	str	r3, [r2, #8]
 8002f4c:	e07e      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	0159      	lsls	r1, r3, #5
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	440b      	add	r3, r1
 8002f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d114      	bne.n	8002fb0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	f002 fc20 	bl	80057e0 <USB_EP0_OutStart>
 8002fa0:	e006      	b.n	8002fb0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	441a      	add	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f006 f9e0 	bl	800937c <HAL_PCD_DataOutStageCallback>
 8002fbc:	e046      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	4a26      	ldr	r2, [pc, #152]	@ (800305c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d124      	bne.n	8003010 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fe2:	6093      	str	r3, [r2, #8]
 8002fe4:	e032      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2320      	movs	r3, #32
 8003000:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f006 f9b7 	bl	800937c <HAL_PCD_DataOutStageCallback>
 800300e:	e01d      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d114      	bne.n	8003040 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d108      	bne.n	8003040 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003038:	461a      	mov	r2, r3
 800303a:	2100      	movs	r1, #0
 800303c:	f002 fbd0 	bl	80057e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f006 f998 	bl	800937c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	4f54300a 	.word	0x4f54300a
 800305c:	4f54310a 	.word	0x4f54310a

08003060 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	333c      	adds	r3, #60	@ 0x3c
 8003078:	3304      	adds	r3, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a15      	ldr	r2, [pc, #84]	@ (80030e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d90e      	bls.n	80030b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ac:	461a      	mov	r2, r3
 80030ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f006 f94f 	bl	8009358 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d90c      	bls.n	80030dc <PCD_EP_OutSetupPacket_int+0x7c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	799b      	ldrb	r3, [r3, #6]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d108      	bne.n	80030dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030d4:	461a      	mov	r2, r3
 80030d6:	2101      	movs	r1, #1
 80030d8:	f002 fb82 	bl	80057e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	4f54300a 	.word	0x4f54300a

080030ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	70fb      	strb	r3, [r7, #3]
 80030f8:	4613      	mov	r3, r2
 80030fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800310a:	883b      	ldrh	r3, [r7, #0]
 800310c:	0419      	lsls	r1, r3, #16
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	430a      	orrs	r2, r1
 8003116:	629a      	str	r2, [r3, #40]	@ 0x28
 8003118:	e028      	b.n	800316c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4413      	add	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e00d      	b.n	800314a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	3340      	adds	r3, #64	@ 0x40
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	3301      	adds	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	3b01      	subs	r3, #1
 8003150:	429a      	cmp	r2, r3
 8003152:	d3ec      	bcc.n	800312e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003154:	883b      	ldrh	r3, [r7, #0]
 8003156:	0418      	lsls	r0, r3, #16
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6819      	ldr	r1, [r3, #0]
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	3b01      	subs	r3, #1
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	4302      	orrs	r2, r0
 8003164:	3340      	adds	r3, #64	@ 0x40
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031ca:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	10000003 	.word	0x10000003

080031e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e291      	b.n	800371e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8087 	beq.w	8003316 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003208:	4b96      	ldr	r3, [pc, #600]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b04      	cmp	r3, #4
 8003212:	d00c      	beq.n	800322e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003214:	4b93      	ldr	r3, [pc, #588]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d112      	bne.n	8003246 <HAL_RCC_OscConfig+0x62>
 8003220:	4b90      	ldr	r3, [pc, #576]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	4b8d      	ldr	r3, [pc, #564]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06c      	beq.n	8003314 <HAL_RCC_OscConfig+0x130>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d168      	bne.n	8003314 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e26b      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x7a>
 8003250:	4b84      	ldr	r3, [pc, #528]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a83      	ldr	r2, [pc, #524]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e02e      	b.n	80032bc <HAL_RCC_OscConfig+0xd8>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x9c>
 8003266:	4b7f      	ldr	r3, [pc, #508]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7e      	ldr	r2, [pc, #504]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b7c      	ldr	r3, [pc, #496]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a7b      	ldr	r2, [pc, #492]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e01d      	b.n	80032bc <HAL_RCC_OscConfig+0xd8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0xc0>
 800328a:	4b76      	ldr	r3, [pc, #472]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a75      	ldr	r2, [pc, #468]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b73      	ldr	r3, [pc, #460]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a72      	ldr	r2, [pc, #456]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0xd8>
 80032a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe f958 	bl	8001578 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe f954 	bl	8001578 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e21f      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b61      	ldr	r3, [pc, #388]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0xe8>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe f944 	bl	8001578 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fe f940 	bl	8001578 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	@ 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e20b      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	4b57      	ldr	r3, [pc, #348]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x110>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d069      	beq.n	80033f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003322:	4b50      	ldr	r3, [pc, #320]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332e:	4b4d      	ldr	r3, [pc, #308]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d11c      	bne.n	8003374 <HAL_RCC_OscConfig+0x190>
 800333a:	4b4a      	ldr	r3, [pc, #296]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	4b47      	ldr	r3, [pc, #284]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x17a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e1df      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b41      	ldr	r3, [pc, #260]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	493d      	ldr	r1, [pc, #244]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	e040      	b.n	80033f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d023      	beq.n	80033c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b39      	ldr	r3, [pc, #228]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a38      	ldr	r2, [pc, #224]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fe f8f6 	bl	8001578 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003390:	f7fe f8f2 	bl	8001578 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1bd      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a2:	4b30      	ldr	r3, [pc, #192]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4929      	ldr	r1, [pc, #164]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
 80033c2:	e018      	b.n	80033f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c4:	4b27      	ldr	r3, [pc, #156]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a26      	ldr	r2, [pc, #152]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f8d2 	bl	8001578 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fe f8ce 	bl	8001578 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e199      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d038      	beq.n	8003474 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d019      	beq.n	800343e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340a:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 800340c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800340e:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fe f8af 	bl	8001578 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7fe f8ab 	bl	8001578 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e176      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003430:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x23a>
 800343c:	e01a      	b.n	8003474 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800343e:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003442:	4a08      	ldr	r2, [pc, #32]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344a:	f7fe f895 	bl	8001578 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	e00a      	b.n	8003468 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003452:	f7fe f891 	bl	8001578 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d903      	bls.n	8003468 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e15c      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
 8003464:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003468:	4b91      	ldr	r3, [pc, #580]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 800346a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ee      	bne.n	8003452 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80a4 	beq.w	80035ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003482:	4b8b      	ldr	r3, [pc, #556]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	4b88      	ldr	r3, [pc, #544]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	4a87      	ldr	r2, [pc, #540]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003498:	6413      	str	r3, [r2, #64]	@ 0x40
 800349a:	4b85      	ldr	r3, [pc, #532]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034aa:	4b82      	ldr	r3, [pc, #520]	@ (80036b4 <HAL_RCC_OscConfig+0x4d0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d118      	bne.n	80034e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034b6:	4b7f      	ldr	r3, [pc, #508]	@ (80036b4 <HAL_RCC_OscConfig+0x4d0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7e      	ldr	r2, [pc, #504]	@ (80036b4 <HAL_RCC_OscConfig+0x4d0>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7fe f859 	bl	8001578 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7fe f855 	bl	8001578 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	@ 0x64
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e120      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034dc:	4b75      	ldr	r3, [pc, #468]	@ (80036b4 <HAL_RCC_OscConfig+0x4d0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x31a>
 80034f0:	4b6f      	ldr	r3, [pc, #444]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f4:	4a6e      	ldr	r2, [pc, #440]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fc:	e02d      	b.n	800355a <HAL_RCC_OscConfig+0x376>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x33c>
 8003506:	4b6a      	ldr	r3, [pc, #424]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350a:	4a69      	ldr	r2, [pc, #420]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	6713      	str	r3, [r2, #112]	@ 0x70
 8003512:	4b67      	ldr	r3, [pc, #412]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003516:	4a66      	ldr	r2, [pc, #408]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003518:	f023 0304 	bic.w	r3, r3, #4
 800351c:	6713      	str	r3, [r2, #112]	@ 0x70
 800351e:	e01c      	b.n	800355a <HAL_RCC_OscConfig+0x376>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b05      	cmp	r3, #5
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_OscConfig+0x35e>
 8003528:	4b61      	ldr	r3, [pc, #388]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352c:	4a60      	ldr	r2, [pc, #384]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 800352e:	f043 0304 	orr.w	r3, r3, #4
 8003532:	6713      	str	r3, [r2, #112]	@ 0x70
 8003534:	4b5e      	ldr	r3, [pc, #376]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003538:	4a5d      	ldr	r2, [pc, #372]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003540:	e00b      	b.n	800355a <HAL_RCC_OscConfig+0x376>
 8003542:	4b5b      	ldr	r3, [pc, #364]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003546:	4a5a      	ldr	r2, [pc, #360]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	6713      	str	r3, [r2, #112]	@ 0x70
 800354e:	4b58      	ldr	r3, [pc, #352]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003552:	4a57      	ldr	r2, [pc, #348]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d015      	beq.n	800358e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003562:	f7fe f809 	bl	8001578 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fe f805 	bl	8001578 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0ce      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	4b4b      	ldr	r3, [pc, #300]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ee      	beq.n	800356a <HAL_RCC_OscConfig+0x386>
 800358c:	e014      	b.n	80035b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fd fff3 	bl	8001578 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003594:	e00a      	b.n	80035ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fd ffef 	bl	8001578 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0b8      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	4b40      	ldr	r3, [pc, #256]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ee      	bne.n	8003596 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d105      	bne.n	80035ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035be:	4b3c      	ldr	r3, [pc, #240]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	4a3b      	ldr	r2, [pc, #236]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 80035c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80a4 	beq.w	800371c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d4:	4b36      	ldr	r3, [pc, #216]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d06b      	beq.n	80036b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d149      	bne.n	800367c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	4b31      	ldr	r3, [pc, #196]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a30      	ldr	r2, [pc, #192]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fd ffc0 	bl	8001578 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fd ffbc 	bl	8001578 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e087      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69da      	ldr	r2, [r3, #28]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	019b      	lsls	r3, r3, #6
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	3b01      	subs	r3, #1
 8003634:	041b      	lsls	r3, r3, #16
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363c:	061b      	lsls	r3, r3, #24
 800363e:	4313      	orrs	r3, r2
 8003640:	4a1b      	ldr	r2, [pc, #108]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003642:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003646:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003648:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 800364e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd ff90 	bl	8001578 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fd ff8c 	bl	8001578 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e057      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b10      	ldr	r3, [pc, #64]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x478>
 800367a:	e04f      	b.n	800371c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367c:	4b0c      	ldr	r3, [pc, #48]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0b      	ldr	r2, [pc, #44]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd ff76 	bl	8001578 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7fd ff72 	bl	8001578 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e03d      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	4b03      	ldr	r3, [pc, #12]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x4ac>
 80036ae:	e035      	b.n	800371c <HAL_RCC_OscConfig+0x538>
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003728 <HAL_RCC_OscConfig+0x544>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d028      	beq.n	8003718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d121      	bne.n	8003718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d11a      	bne.n	8003718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d111      	bne.n	8003718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	3b01      	subs	r3, #1
 8003702:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d107      	bne.n	8003718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003712:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800

0800372c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0d0      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b6a      	ldr	r3, [pc, #424]	@ (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b67      	ldr	r3, [pc, #412]	@ (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 020f 	bic.w	r2, r3, #15
 800375a:	4965      	ldr	r1, [pc, #404]	@ (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b63      	ldr	r3, [pc, #396]	@ (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b8      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800378c:	4b59      	ldr	r3, [pc, #356]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a58      	ldr	r2, [pc, #352]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003796:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a4:	4b53      	ldr	r3, [pc, #332]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4a52      	ldr	r2, [pc, #328]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b0:	4b50      	ldr	r3, [pc, #320]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	494d      	ldr	r1, [pc, #308]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d040      	beq.n	8003850 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b47      	ldr	r3, [pc, #284]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d115      	bne.n	800380e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d107      	bne.n	80037fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ee:	4b41      	ldr	r3, [pc, #260]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e073      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fe:	4b3d      	ldr	r3, [pc, #244]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e06b      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800380e:	4b39      	ldr	r3, [pc, #228]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f023 0203 	bic.w	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4936      	ldr	r1, [pc, #216]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	4313      	orrs	r3, r2
 800381e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003820:	f7fd feaa 	bl	8001578 <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	e00a      	b.n	800383e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003828:	f7fd fea6 	bl	8001578 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e053      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	4b2d      	ldr	r3, [pc, #180]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 020c 	and.w	r2, r3, #12
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	429a      	cmp	r2, r3
 800384e:	d1eb      	bne.n	8003828 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003850:	4b27      	ldr	r3, [pc, #156]	@ (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d210      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b24      	ldr	r3, [pc, #144]	@ (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 020f 	bic.w	r2, r3, #15
 8003866:	4922      	ldr	r1, [pc, #136]	@ (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b20      	ldr	r3, [pc, #128]	@ (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e032      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388c:	4b19      	ldr	r3, [pc, #100]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4916      	ldr	r1, [pc, #88]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038aa:	4b12      	ldr	r3, [pc, #72]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	490e      	ldr	r1, [pc, #56]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038be:	f000 f821 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	490a      	ldr	r1, [pc, #40]	@ (80038f8 <HAL_RCC_ClockConfig+0x1cc>)
 80038d0:	5ccb      	ldrb	r3, [r1, r3]
 80038d2:	fa22 f303 	lsr.w	r3, r2, r3
 80038d6:	4a09      	ldr	r2, [pc, #36]	@ (80038fc <HAL_RCC_ClockConfig+0x1d0>)
 80038d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038da:	4b09      	ldr	r3, [pc, #36]	@ (8003900 <HAL_RCC_ClockConfig+0x1d4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd fe06 	bl	80014f0 <HAL_InitTick>

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023c00 	.word	0x40023c00
 80038f4:	40023800 	.word	0x40023800
 80038f8:	0800e0d4 	.word	0x0800e0d4
 80038fc:	20000000 	.word	0x20000000
 8003900:	20000004 	.word	0x20000004

08003904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b090      	sub	sp, #64	@ 0x40
 800390a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003910:	2300      	movs	r3, #0
 8003912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003914:	2300      	movs	r3, #0
 8003916:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800391c:	4b59      	ldr	r3, [pc, #356]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b08      	cmp	r3, #8
 8003926:	d00d      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x40>
 8003928:	2b08      	cmp	r3, #8
 800392a:	f200 80a1 	bhi.w	8003a70 <HAL_RCC_GetSysClockFreq+0x16c>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x34>
 8003932:	2b04      	cmp	r3, #4
 8003934:	d003      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0x3a>
 8003936:	e09b      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003938:	4b53      	ldr	r3, [pc, #332]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x184>)
 800393a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800393c:	e09b      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800393e:	4b53      	ldr	r3, [pc, #332]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003940:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003942:	e098      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003944:	4b4f      	ldr	r3, [pc, #316]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800394c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800394e:	4b4d      	ldr	r3, [pc, #308]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d028      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	099b      	lsrs	r3, r3, #6
 8003960:	2200      	movs	r2, #0
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	627a      	str	r2, [r7, #36]	@ 0x24
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800396c:	2100      	movs	r1, #0
 800396e:	4b47      	ldr	r3, [pc, #284]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003970:	fb03 f201 	mul.w	r2, r3, r1
 8003974:	2300      	movs	r3, #0
 8003976:	fb00 f303 	mul.w	r3, r0, r3
 800397a:	4413      	add	r3, r2
 800397c:	4a43      	ldr	r2, [pc, #268]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x188>)
 800397e:	fba0 1202 	umull	r1, r2, r0, r2
 8003982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003984:	460a      	mov	r2, r1
 8003986:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800398a:	4413      	add	r3, r2
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003990:	2200      	movs	r2, #0
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	61fa      	str	r2, [r7, #28]
 8003996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800399a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800399e:	f7fd f993 	bl	8000cc8 <__aeabi_uldivmod>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4613      	mov	r3, r2
 80039a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039aa:	e053      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ac:	4b35      	ldr	r3, [pc, #212]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	2200      	movs	r2, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	617a      	str	r2, [r7, #20]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039be:	f04f 0b00 	mov.w	fp, #0
 80039c2:	4652      	mov	r2, sl
 80039c4:	465b      	mov	r3, fp
 80039c6:	f04f 0000 	mov.w	r0, #0
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	0159      	lsls	r1, r3, #5
 80039d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d4:	0150      	lsls	r0, r2, #5
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	ebb2 080a 	subs.w	r8, r2, sl
 80039de:	eb63 090b 	sbc.w	r9, r3, fp
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039f6:	ebb2 0408 	subs.w	r4, r2, r8
 80039fa:	eb63 0509 	sbc.w	r5, r3, r9
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	00eb      	lsls	r3, r5, #3
 8003a08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a0c:	00e2      	lsls	r2, r4, #3
 8003a0e:	4614      	mov	r4, r2
 8003a10:	461d      	mov	r5, r3
 8003a12:	eb14 030a 	adds.w	r3, r4, sl
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	eb45 030b 	adc.w	r3, r5, fp
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	028b      	lsls	r3, r1, #10
 8003a2e:	4621      	mov	r1, r4
 8003a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a34:	4621      	mov	r1, r4
 8003a36:	028a      	lsls	r2, r1, #10
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3e:	2200      	movs	r2, #0
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	60fa      	str	r2, [r7, #12]
 8003a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a48:	f7fd f93e 	bl	8000cc8 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4613      	mov	r3, r2
 8003a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3740      	adds	r7, #64	@ 0x40
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	017d7840 	.word	0x017d7840

08003a90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	@ (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000000 	.word	0x20000000

08003aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d012      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ad0:	4b69      	ldr	r3, [pc, #420]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a68      	ldr	r2, [pc, #416]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ada:	6093      	str	r3, [r2, #8]
 8003adc:	4b66      	ldr	r3, [pc, #408]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae4:	4964      	ldr	r1, [pc, #400]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d017      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b02:	4b5d      	ldr	r3, [pc, #372]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b08:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	4959      	ldr	r1, [pc, #356]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b20:	d101      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b22:	2301      	movs	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d017      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b44:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	494a      	ldr	r1, [pc, #296]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 808b 	beq.w	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	4a39      	ldr	r2, [pc, #228]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b98:	4b37      	ldr	r3, [pc, #220]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ba4:	4b35      	ldr	r3, [pc, #212]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a34      	ldr	r2, [pc, #208]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb0:	f7fd fce2 	bl	8001578 <HAL_GetTick>
 8003bb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb8:	f7fd fcde 	bl	8001578 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	@ 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e357      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bca:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bd6:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d035      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d02e      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bf4:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bfc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	4a1d      	ldr	r2, [pc, #116]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c08:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c14:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c16:	4a18      	ldr	r2, [pc, #96]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c1c:	4b16      	ldr	r3, [pc, #88]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d114      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fd fca6 	bl	8001578 <HAL_GetTick>
 8003c2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2e:	e00a      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c30:	f7fd fca2 	bl	8001578 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e319      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c46:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ee      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c5e:	d111      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c6c:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c6e:	400b      	ands	r3, r1
 8003c70:	4901      	ldr	r1, [pc, #4]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
 8003c76:	e00b      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	0ffffcff 	.word	0x0ffffcff
 8003c84:	4baa      	ldr	r3, [pc, #680]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4aa9      	ldr	r2, [pc, #676]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c8a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c8e:	6093      	str	r3, [r2, #8]
 8003c90:	4ba7      	ldr	r3, [pc, #668]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9c:	49a4      	ldr	r1, [pc, #656]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d010      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cae:	4ba0      	ldr	r3, [pc, #640]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cb4:	4a9e      	ldr	r2, [pc, #632]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003cbe:	4b9c      	ldr	r3, [pc, #624]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc8:	4999      	ldr	r1, [pc, #612]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cdc:	4b94      	ldr	r3, [pc, #592]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cea:	4991      	ldr	r1, [pc, #580]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cfe:	4b8c      	ldr	r3, [pc, #560]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d0c:	4988      	ldr	r1, [pc, #544]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d20:	4b83      	ldr	r3, [pc, #524]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d2e:	4980      	ldr	r1, [pc, #512]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d42:	4b7b      	ldr	r3, [pc, #492]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d50:	4977      	ldr	r1, [pc, #476]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d64:	4b72      	ldr	r3, [pc, #456]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	496f      	ldr	r1, [pc, #444]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d86:	4b6a      	ldr	r3, [pc, #424]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8c:	f023 020c 	bic.w	r2, r3, #12
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d94:	4966      	ldr	r1, [pc, #408]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003da8:	4b61      	ldr	r3, [pc, #388]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db6:	495e      	ldr	r1, [pc, #376]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dca:	4b59      	ldr	r3, [pc, #356]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd8:	4955      	ldr	r1, [pc, #340]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dec:	4b50      	ldr	r3, [pc, #320]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfa:	494d      	ldr	r1, [pc, #308]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e0e:	4b48      	ldr	r3, [pc, #288]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e14:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1c:	4944      	ldr	r1, [pc, #272]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e30:	4b3f      	ldr	r3, [pc, #252]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3e:	493c      	ldr	r1, [pc, #240]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e52:	4b37      	ldr	r3, [pc, #220]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e60:	4933      	ldr	r1, [pc, #204]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e74:	4b2e      	ldr	r3, [pc, #184]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e82:	492b      	ldr	r1, [pc, #172]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d011      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e96:	4b26      	ldr	r3, [pc, #152]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ea4:	4922      	ldr	r1, [pc, #136]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb4:	d101      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ed6:	4b16      	ldr	r3, [pc, #88]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003edc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee4:	4912      	ldr	r1, [pc, #72]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f08:	4909      	ldr	r1, [pc, #36]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d006      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80d9 	beq.w	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f24:	4b02      	ldr	r3, [pc, #8]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a01      	ldr	r2, [pc, #4]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f2e:	e001      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f36:	f7fd fb1f 	bl	8001578 <HAL_GetTick>
 8003f3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f3e:	f7fd fb1b 	bl	8001578 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b64      	cmp	r3, #100	@ 0x64
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e194      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f50:	4b6c      	ldr	r3, [pc, #432]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d021      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11d      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f70:	4b64      	ldr	r3, [pc, #400]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f7e:	4b61      	ldr	r3, [pc, #388]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f84:	0e1b      	lsrs	r3, r3, #24
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	019a      	lsls	r2, r3, #6
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	071b      	lsls	r3, r3, #28
 8003fa4:	4957      	ldr	r1, [pc, #348]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d02e      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd6:	d129      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fe6:	4b47      	ldr	r3, [pc, #284]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fec:	0f1b      	lsrs	r3, r3, #28
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	019a      	lsls	r2, r3, #6
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	431a      	orrs	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	071b      	lsls	r3, r3, #28
 800400c:	493d      	ldr	r1, [pc, #244]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004014:	4b3b      	ldr	r3, [pc, #236]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800401a:	f023 021f 	bic.w	r2, r3, #31
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	3b01      	subs	r3, #1
 8004024:	4937      	ldr	r1, [pc, #220]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01d      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004038:	4b32      	ldr	r3, [pc, #200]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800403a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800403e:	0e1b      	lsrs	r3, r3, #24
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004046:	4b2f      	ldr	r3, [pc, #188]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800404c:	0f1b      	lsrs	r3, r3, #28
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	019a      	lsls	r2, r3, #6
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	041b      	lsls	r3, r3, #16
 8004060:	431a      	orrs	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	061b      	lsls	r3, r3, #24
 8004066:	431a      	orrs	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	071b      	lsls	r3, r3, #28
 800406c:	4925      	ldr	r1, [pc, #148]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d011      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	019a      	lsls	r2, r3, #6
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	041b      	lsls	r3, r3, #16
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	061b      	lsls	r3, r3, #24
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	071b      	lsls	r3, r3, #28
 800409c:	4919      	ldr	r1, [pc, #100]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040a4:	4b17      	ldr	r3, [pc, #92]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a16      	ldr	r2, [pc, #88]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b0:	f7fd fa62 	bl	8001578 <HAL_GetTick>
 80040b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040b8:	f7fd fa5e 	bl	8001578 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	@ 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e0d7      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f040 80cd 	bne.w	8004278 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040de:	4b09      	ldr	r3, [pc, #36]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a08      	ldr	r2, [pc, #32]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ea:	f7fd fa45 	bl	8001578 <HAL_GetTick>
 80040ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040f2:	f7fd fa41 	bl	8001578 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b64      	cmp	r3, #100	@ 0x64
 80040fe:	d903      	bls.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0ba      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004104:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004108:	4b5e      	ldr	r3, [pc, #376]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004114:	d0ed      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004132:	2b00      	cmp	r3, #0
 8004134:	d02e      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d12a      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800413e:	4b51      	ldr	r3, [pc, #324]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800414c:	4b4d      	ldr	r3, [pc, #308]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	0f1b      	lsrs	r3, r3, #28
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	019a      	lsls	r2, r3, #6
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	061b      	lsls	r3, r3, #24
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	4944      	ldr	r1, [pc, #272]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800417a:	4b42      	ldr	r3, [pc, #264]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004180:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	493d      	ldr	r1, [pc, #244]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d022      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041a8:	d11d      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041aa:	4b36      	ldr	r3, [pc, #216]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b0:	0e1b      	lsrs	r3, r3, #24
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041b8:	4b32      	ldr	r3, [pc, #200]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	0f1b      	lsrs	r3, r3, #28
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	019a      	lsls	r2, r3, #6
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	431a      	orrs	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	061b      	lsls	r3, r3, #24
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	071b      	lsls	r3, r3, #28
 80041de:	4929      	ldr	r1, [pc, #164]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d028      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041f2:	4b24      	ldr	r3, [pc, #144]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f8:	0e1b      	lsrs	r3, r3, #24
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004200:	4b20      	ldr	r3, [pc, #128]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004206:	0c1b      	lsrs	r3, r3, #16
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	019a      	lsls	r2, r3, #6
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	041b      	lsls	r3, r3, #16
 8004218:	431a      	orrs	r2, r3
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	071b      	lsls	r3, r3, #28
 8004226:	4917      	ldr	r1, [pc, #92]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800422e:	4b15      	ldr	r3, [pc, #84]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004234:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	4911      	ldr	r1, [pc, #68]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004244:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800424a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800424e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004250:	f7fd f992 	bl	8001578 <HAL_GetTick>
 8004254:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004256:	e008      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004258:	f7fd f98e 	bl	8001578 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b64      	cmp	r3, #100	@ 0x64
 8004264:	d901      	bls.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e007      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004276:	d1ef      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800

08004288 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004288:	b084      	sub	sp, #16
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	f107 001c 	add.w	r0, r7, #28
 8004296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800429a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d121      	bne.n	80042e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	4b21      	ldr	r3, [pc, #132]	@ (8004338 <USB_CoreInit+0xb0>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d105      	bne.n	80042da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 fade 	bl	800589c <USB_CoreReset>
 80042e0:	4603      	mov	r3, r0
 80042e2:	73fb      	strb	r3, [r7, #15]
 80042e4:	e010      	b.n	8004308 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f001 fad2 	bl	800589c <USB_CoreReset>
 80042f8:	4603      	mov	r3, r0
 80042fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004300:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004308:	7fbb      	ldrb	r3, [r7, #30]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d10b      	bne.n	8004326 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f043 0206 	orr.w	r2, r3, #6
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004332:	b004      	add	sp, #16
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	ffbdffbf 	.word	0xffbdffbf

0800433c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d165      	bne.n	800441c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4a41      	ldr	r2, [pc, #260]	@ (8004458 <USB_SetTurnaroundTime+0x11c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d906      	bls.n	8004366 <USB_SetTurnaroundTime+0x2a>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4a40      	ldr	r2, [pc, #256]	@ (800445c <USB_SetTurnaroundTime+0x120>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d202      	bcs.n	8004366 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004360:	230f      	movs	r3, #15
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e062      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4a3c      	ldr	r2, [pc, #240]	@ (800445c <USB_SetTurnaroundTime+0x120>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d306      	bcc.n	800437c <USB_SetTurnaroundTime+0x40>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a3b      	ldr	r2, [pc, #236]	@ (8004460 <USB_SetTurnaroundTime+0x124>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d202      	bcs.n	800437c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004376:	230e      	movs	r3, #14
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e057      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4a38      	ldr	r2, [pc, #224]	@ (8004460 <USB_SetTurnaroundTime+0x124>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d306      	bcc.n	8004392 <USB_SetTurnaroundTime+0x56>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a37      	ldr	r2, [pc, #220]	@ (8004464 <USB_SetTurnaroundTime+0x128>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d202      	bcs.n	8004392 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800438c:	230d      	movs	r3, #13
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e04c      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4a33      	ldr	r2, [pc, #204]	@ (8004464 <USB_SetTurnaroundTime+0x128>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d306      	bcc.n	80043a8 <USB_SetTurnaroundTime+0x6c>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4a32      	ldr	r2, [pc, #200]	@ (8004468 <USB_SetTurnaroundTime+0x12c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d802      	bhi.n	80043a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043a2:	230c      	movs	r3, #12
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e041      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004468 <USB_SetTurnaroundTime+0x12c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d906      	bls.n	80043be <USB_SetTurnaroundTime+0x82>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4a2e      	ldr	r2, [pc, #184]	@ (800446c <USB_SetTurnaroundTime+0x130>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d802      	bhi.n	80043be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043b8:	230b      	movs	r3, #11
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e036      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4a2a      	ldr	r2, [pc, #168]	@ (800446c <USB_SetTurnaroundTime+0x130>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d906      	bls.n	80043d4 <USB_SetTurnaroundTime+0x98>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4a29      	ldr	r2, [pc, #164]	@ (8004470 <USB_SetTurnaroundTime+0x134>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d802      	bhi.n	80043d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043ce:	230a      	movs	r3, #10
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e02b      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4a26      	ldr	r2, [pc, #152]	@ (8004470 <USB_SetTurnaroundTime+0x134>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d906      	bls.n	80043ea <USB_SetTurnaroundTime+0xae>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4a25      	ldr	r2, [pc, #148]	@ (8004474 <USB_SetTurnaroundTime+0x138>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d202      	bcs.n	80043ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043e4:	2309      	movs	r3, #9
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e020      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4a21      	ldr	r2, [pc, #132]	@ (8004474 <USB_SetTurnaroundTime+0x138>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d306      	bcc.n	8004400 <USB_SetTurnaroundTime+0xc4>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4a20      	ldr	r2, [pc, #128]	@ (8004478 <USB_SetTurnaroundTime+0x13c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d802      	bhi.n	8004400 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043fa:	2308      	movs	r3, #8
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e015      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4a1d      	ldr	r2, [pc, #116]	@ (8004478 <USB_SetTurnaroundTime+0x13c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d906      	bls.n	8004416 <USB_SetTurnaroundTime+0xda>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4a1c      	ldr	r2, [pc, #112]	@ (800447c <USB_SetTurnaroundTime+0x140>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d202      	bcs.n	8004416 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004410:	2307      	movs	r3, #7
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e00a      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004416:	2306      	movs	r3, #6
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	e007      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004422:	2309      	movs	r3, #9
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	e001      	b.n	800442c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004428:	2309      	movs	r3, #9
 800442a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	029b      	lsls	r3, r3, #10
 8004440:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	00d8acbf 	.word	0x00d8acbf
 800445c:	00e4e1c0 	.word	0x00e4e1c0
 8004460:	00f42400 	.word	0x00f42400
 8004464:	01067380 	.word	0x01067380
 8004468:	011a499f 	.word	0x011a499f
 800446c:	01312cff 	.word	0x01312cff
 8004470:	014ca43f 	.word	0x014ca43f
 8004474:	016e3600 	.word	0x016e3600
 8004478:	01a6ab1f 	.word	0x01a6ab1f
 800447c:	01e84800 	.word	0x01e84800

08004480 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f023 0201 	bic.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d115      	bne.n	8004512 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80044f2:	200a      	movs	r0, #10
 80044f4:	f7fd f84c 	bl	8001590 <HAL_Delay>
      ms += 10U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	330a      	adds	r3, #10
 80044fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f001 f93b 	bl	800577a <USB_GetMode>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d01e      	beq.n	8004548 <USB_SetCurrentMode+0x84>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2bc7      	cmp	r3, #199	@ 0xc7
 800450e:	d9f0      	bls.n	80044f2 <USB_SetCurrentMode+0x2e>
 8004510:	e01a      	b.n	8004548 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d115      	bne.n	8004544 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004524:	200a      	movs	r0, #10
 8004526:	f7fd f833 	bl	8001590 <HAL_Delay>
      ms += 10U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	330a      	adds	r3, #10
 800452e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f001 f922 	bl	800577a <USB_GetMode>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <USB_SetCurrentMode+0x84>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004540:	d9f0      	bls.n	8004524 <USB_SetCurrentMode+0x60>
 8004542:	e001      	b.n	8004548 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e005      	b.n	8004554 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2bc8      	cmp	r3, #200	@ 0xc8
 800454c:	d101      	bne.n	8004552 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800455c:	b084      	sub	sp, #16
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800456a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	e009      	b.n	8004590 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	3340      	adds	r3, #64	@ 0x40
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	2200      	movs	r2, #0
 8004588:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	3301      	adds	r3, #1
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b0e      	cmp	r3, #14
 8004594:	d9f2      	bls.n	800457c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004596:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800459a:	2b00      	cmp	r3, #0
 800459c:	d11c      	bne.n	80045d8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045ac:	f043 0302 	orr.w	r3, r3, #2
 80045b0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e005      	b.n	80045e4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80045ea:	461a      	mov	r2, r3
 80045ec:	2300      	movs	r3, #0
 80045ee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10d      	bne.n	8004614 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004600:	2100      	movs	r1, #0
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f968 	bl	80048d8 <USB_SetDevSpeed>
 8004608:	e008      	b.n	800461c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800460a:	2101      	movs	r1, #1
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f963 	bl	80048d8 <USB_SetDevSpeed>
 8004612:	e003      	b.n	800461c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004614:	2103      	movs	r1, #3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f95e 	bl	80048d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800461c:	2110      	movs	r1, #16
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8fa 	bl	8004818 <USB_FlushTxFifo>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f924 	bl	800487c <USB_FlushRxFifo>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004644:	461a      	mov	r2, r3
 8004646:	2300      	movs	r3, #0
 8004648:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004650:	461a      	mov	r2, r3
 8004652:	2300      	movs	r3, #0
 8004654:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800465c:	461a      	mov	r2, r3
 800465e:	2300      	movs	r3, #0
 8004660:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	e043      	b.n	80046f0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800467a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800467e:	d118      	bne.n	80046b2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004692:	461a      	mov	r2, r3
 8004694:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e013      	b.n	80046c4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a8:	461a      	mov	r2, r3
 80046aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e008      	b.n	80046c4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046be:	461a      	mov	r2, r3
 80046c0:	2300      	movs	r3, #0
 80046c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d0:	461a      	mov	r2, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e2:	461a      	mov	r2, r3
 80046e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046f4:	461a      	mov	r2, r3
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d3b5      	bcc.n	8004668 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e043      	b.n	800478a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004718:	d118      	bne.n	800474c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800472c:	461a      	mov	r2, r3
 800472e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	e013      	b.n	800475e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004742:	461a      	mov	r2, r3
 8004744:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e008      	b.n	800475e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476a:	461a      	mov	r2, r3
 800476c:	2300      	movs	r3, #0
 800476e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477c:	461a      	mov	r2, r3
 800477e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004782:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	3301      	adds	r3, #1
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800478e:	461a      	mov	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4293      	cmp	r3, r2
 8004794:	d3b5      	bcc.n	8004702 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f043 0210 	orr.w	r2, r3, #16
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699a      	ldr	r2, [r3, #24]
 80047d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <USB_DevInit+0x2b4>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f043 0208 	orr.w	r2, r3, #8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699a      	ldr	r2, [r3, #24]
 80047f8:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <USB_DevInit+0x2b8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004800:	7dfb      	ldrb	r3, [r7, #23]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800480c:	b004      	add	sp, #16
 800480e:	4770      	bx	lr
 8004810:	803c3800 	.word	0x803c3800
 8004814:	40000004 	.word	0x40000004

08004818 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004832:	d901      	bls.n	8004838 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e01b      	b.n	8004870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	daf2      	bge.n	8004826 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	019b      	lsls	r3, r3, #6
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800485c:	d901      	bls.n	8004862 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e006      	b.n	8004870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b20      	cmp	r3, #32
 800486c:	d0f0      	beq.n	8004850 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004894:	d901      	bls.n	800489a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e018      	b.n	80048cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	daf2      	bge.n	8004888 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2210      	movs	r2, #16
 80048aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3301      	adds	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048b8:	d901      	bls.n	80048be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e006      	b.n	80048cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d0f0      	beq.n	80048ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0306 	and.w	r3, r3, #6
 8004922:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]
 800492e:	e00a      	b.n	8004946 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d002      	beq.n	800493c <USB_GetDevSpeed+0x32>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b06      	cmp	r3, #6
 800493a:	d102      	bne.n	8004942 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800493c:	2302      	movs	r3, #2
 800493e:	75fb      	strb	r3, [r7, #23]
 8004940:	e001      	b.n	8004946 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004942:	230f      	movs	r3, #15
 8004944:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
}
 8004948:	4618      	mov	r0, r3
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	785b      	ldrb	r3, [r3, #1]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d139      	bne.n	80049e4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	2101      	movs	r1, #1
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	b29b      	uxth	r3, r3
 8004988:	68f9      	ldr	r1, [r7, #12]
 800498a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800498e:	4313      	orrs	r3, r2
 8004990:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d153      	bne.n	8004a50 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	791b      	ldrb	r3, [r3, #4]
 80049c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	059b      	lsls	r3, r3, #22
 80049ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	0159      	lsls	r1, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	440b      	add	r3, r1
 80049d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049da:	4619      	mov	r1, r3
 80049dc:	4b20      	ldr	r3, [pc, #128]	@ (8004a60 <USB_ActivateEndpoint+0x10c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]
 80049e2:	e035      	b.n	8004a50 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	68f9      	ldr	r1, [r7, #12]
 80049fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d119      	bne.n	8004a50 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	791b      	ldrb	r3, [r3, #4]
 8004a36:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	0159      	lsls	r1, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	440b      	add	r3, r1
 8004a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <USB_ActivateEndpoint+0x10c>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	10008000 	.word	0x10008000

08004a64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d161      	bne.n	8004b44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a96:	d11f      	bne.n	8004ad8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ab2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ab6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ad2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ade:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	2101      	movs	r1, #1
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004af8:	4013      	ands	r3, r2
 8004afa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	0159      	lsls	r1, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	440b      	add	r3, r1
 8004b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4b35      	ldr	r3, [pc, #212]	@ (8004c14 <USB_DeactivateEndpoint+0x1b0>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]
 8004b42:	e060      	b.n	8004c06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b5a:	d11f      	bne.n	8004b9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004be0:	4013      	ands	r3, r2
 8004be2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	0159      	lsls	r1, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	440b      	add	r3, r1
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <USB_DeactivateEndpoint+0x1b4>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	ec337800 	.word	0xec337800
 8004c18:	eff37800 	.word	0xeff37800

08004c1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	@ 0x28
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	f040 8181 	bne.w	8004f40 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d132      	bne.n	8004cac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	0159      	lsls	r1, r3, #5
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c60:	4619      	mov	r1, r3
 8004c62:	4ba5      	ldr	r3, [pc, #660]	@ (8004ef8 <USB_EPStartXfer+0x2dc>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	0159      	lsls	r1, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	440b      	add	r3, r1
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4b95      	ldr	r3, [pc, #596]	@ (8004efc <USB_EPStartXfer+0x2e0>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	610b      	str	r3, [r1, #16]
 8004caa:	e092      	b.n	8004dd2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	0159      	lsls	r1, r3, #5
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	440b      	add	r3, r1
 8004cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8004efc <USB_EPStartXfer+0x2e0>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	0159      	lsls	r1, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4b83      	ldr	r3, [pc, #524]	@ (8004ef8 <USB_EPStartXfer+0x2dc>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11a      	bne.n	8004d2c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d903      	bls.n	8004d0a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d28:	6113      	str	r3, [r2, #16]
 8004d2a:	e01b      	b.n	8004d64 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d38:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6919      	ldr	r1, [r3, #16]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	440b      	add	r3, r1
 8004d44:	1e59      	subs	r1, r3, #1
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d4e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d50:	4b6b      	ldr	r3, [pc, #428]	@ (8004f00 <USB_EPStartXfer+0x2e4>)
 8004d52:	400b      	ands	r3, r1
 8004d54:	69b9      	ldr	r1, [r7, #24]
 8004d56:	0148      	lsls	r0, r1, #5
 8004d58:	69f9      	ldr	r1, [r7, #28]
 8004d5a:	4401      	add	r1, r0
 8004d5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d60:	4313      	orrs	r3, r2
 8004d62:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d7a:	69b9      	ldr	r1, [r7, #24]
 8004d7c:	0148      	lsls	r0, r1, #5
 8004d7e:	69f9      	ldr	r1, [r7, #28]
 8004d80:	4401      	add	r1, r0
 8004d82:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d86:	4313      	orrs	r3, r2
 8004d88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	791b      	ldrb	r3, [r3, #4]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d11f      	bne.n	8004dd2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dac:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004db0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004dd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d14b      	bne.n	8004e70 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dec:	461a      	mov	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	791b      	ldrb	r3, [r3, #4]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d128      	bne.n	8004e4e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d110      	bne.n	8004e2e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e00f      	b.n	8004e4e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e16a      	b.n	8005146 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	791b      	ldrb	r3, [r3, #4]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d015      	beq.n	8004ec4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8152 	beq.w	8005146 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb8:	69f9      	ldr	r1, [r7, #28]
 8004eba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	634b      	str	r3, [r1, #52]	@ 0x34
 8004ec2:	e140      	b.n	8005146 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d117      	bne.n	8004f04 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	e016      	b.n	8004f24 <USB_EPStartXfer+0x308>
 8004ef6:	bf00      	nop
 8004ef8:	e007ffff 	.word	0xe007ffff
 8004efc:	fff80000 	.word	0xfff80000
 8004f00:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f22:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	68d9      	ldr	r1, [r3, #12]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	b298      	uxth	r0, r3
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	4603      	mov	r3, r0
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f9b9 	bl	80052b0 <USB_WritePacket>
 8004f3e:	e102      	b.n	8005146 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	0159      	lsls	r1, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	440b      	add	r3, r1
 8004f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4b7c      	ldr	r3, [pc, #496]	@ (8005150 <USB_EPStartXfer+0x534>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	0159      	lsls	r1, r3, #5
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	440b      	add	r3, r1
 8004f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4b75      	ldr	r3, [pc, #468]	@ (8005154 <USB_EPStartXfer+0x538>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d12f      	bne.n	8004fea <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb8:	69b9      	ldr	r1, [r7, #24]
 8004fba:	0148      	lsls	r0, r1, #5
 8004fbc:	69f9      	ldr	r1, [r7, #28]
 8004fbe:	4401      	add	r1, r0
 8004fc0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fe2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fe6:	6113      	str	r3, [r2, #16]
 8004fe8:	e05f      	b.n	80050aa <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d123      	bne.n	800503a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005008:	69b9      	ldr	r1, [r7, #24]
 800500a:	0148      	lsls	r0, r1, #5
 800500c:	69f9      	ldr	r1, [r7, #28]
 800500e:	4401      	add	r1, r0
 8005010:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005014:	4313      	orrs	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	0151      	lsls	r1, r2, #5
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	440a      	add	r2, r1
 800502e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005032:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005036:	6113      	str	r3, [r2, #16]
 8005038:	e037      	b.n	80050aa <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	4413      	add	r3, r2
 8005044:	1e5a      	subs	r2, r3, #1
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	fbb2 f3f3 	udiv	r3, r2, r3
 800504e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	8afa      	ldrh	r2, [r7, #22]
 8005056:	fb03 f202 	mul.w	r2, r3, r2
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	8afb      	ldrh	r3, [r7, #22]
 800506e:	04d9      	lsls	r1, r3, #19
 8005070:	4b39      	ldr	r3, [pc, #228]	@ (8005158 <USB_EPStartXfer+0x53c>)
 8005072:	400b      	ands	r3, r1
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	0148      	lsls	r0, r1, #5
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	4401      	add	r1, r0
 800507c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005080:	4313      	orrs	r3, r2
 8005082:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800509a:	69b9      	ldr	r1, [r7, #24]
 800509c:	0148      	lsls	r0, r1, #5
 800509e:	69f9      	ldr	r1, [r7, #28]
 80050a0:	4401      	add	r1, r0
 80050a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050a6:	4313      	orrs	r3, r2
 80050a8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d10d      	bne.n	80050cc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d009      	beq.n	80050cc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	68d9      	ldr	r1, [r3, #12]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c8:	460a      	mov	r2, r1
 80050ca:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	791b      	ldrb	r3, [r3, #4]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d128      	bne.n	8005126 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d110      	bne.n	8005106 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e00f      	b.n	8005126 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005124:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005140:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005144:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	fff80000 	.word	0xfff80000
 8005154:	e007ffff 	.word	0xe007ffff
 8005158:	1ff80000 	.word	0x1ff80000

0800515c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d14a      	bne.n	8005210 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800518e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005192:	f040 8086 	bne.w	80052a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	7812      	ldrb	r2, [r2, #0]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3301      	adds	r3, #1
 80051e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d902      	bls.n	80051f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	75fb      	strb	r3, [r7, #23]
          break;
 80051f2:	e056      	b.n	80052a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800520c:	d0e7      	beq.n	80051de <USB_EPStopXfer+0x82>
 800520e:	e048      	b.n	80052a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005228:	d13b      	bne.n	80052a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	7812      	ldrb	r2, [r2, #0]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005248:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800524c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	440a      	add	r2, r1
 8005268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800526c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005270:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3301      	adds	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800527e:	4293      	cmp	r3, r2
 8005280:	d902      	bls.n	8005288 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	75fb      	strb	r3, [r7, #23]
          break;
 8005286:	e00c      	b.n	80052a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800529c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052a0:	d0e7      	beq.n	8005272 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	@ 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4611      	mov	r1, r2
 80052bc:	461a      	mov	r2, r3
 80052be:	460b      	mov	r3, r1
 80052c0:	71fb      	strb	r3, [r7, #7]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d123      	bne.n	800531e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052d6:	88bb      	ldrh	r3, [r7, #4]
 80052d8:	3303      	adds	r3, #3
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	e018      	b.n	8005316 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	031a      	lsls	r2, r3, #12
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052f0:	461a      	mov	r2, r3
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	3301      	adds	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3301      	adds	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	3301      	adds	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3301      	adds	r3, #1
 800530e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	3301      	adds	r3, #1
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	429a      	cmp	r2, r3
 800531c:	d3e2      	bcc.n	80052e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3724      	adds	r7, #36	@ 0x24
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800532c:	b480      	push	{r7}
 800532e:	b08b      	sub	sp, #44	@ 0x2c
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	4613      	mov	r3, r2
 8005338:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	089b      	lsrs	r3, r3, #2
 8005346:	b29b      	uxth	r3, r3
 8005348:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	623b      	str	r3, [r7, #32]
 8005356:	e014      	b.n	8005382 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	601a      	str	r2, [r3, #0]
    pDest++;
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	3301      	adds	r3, #1
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	3301      	adds	r3, #1
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	3301      	adds	r3, #1
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	3301      	adds	r3, #1
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	3301      	adds	r3, #1
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	6a3a      	ldr	r2, [r7, #32]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	429a      	cmp	r2, r3
 8005388:	d3e6      	bcc.n	8005358 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800538a:	8bfb      	ldrh	r3, [r7, #30]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01e      	beq.n	80053ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800539a:	461a      	mov	r2, r3
 800539c:	f107 0310 	add.w	r3, r7, #16
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	701a      	strb	r2, [r3, #0]
      i++;
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	3301      	adds	r3, #1
 80053ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	3301      	adds	r3, #1
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80053c2:	8bfb      	ldrh	r3, [r7, #30]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053c8:	8bfb      	ldrh	r3, [r7, #30]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ea      	bne.n	80053a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	372c      	adds	r7, #44	@ 0x2c
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	785b      	ldrb	r3, [r3, #1]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d12c      	bne.n	8005452 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	db12      	blt.n	8005430 <USB_EPSetStall+0x54>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00f      	beq.n	8005430 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800542a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800542e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800544a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	e02b      	b.n	80054aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	db12      	blt.n	800548a <USB_EPSetStall+0xae>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00f      	beq.n	800548a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005484:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005488:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d128      	bne.n	8005526 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	0151      	lsls	r1, r2, #5
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	440a      	add	r2, r1
 80054ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	791b      	ldrb	r3, [r3, #4]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d003      	beq.n	8005504 <USB_EPClearStall+0x4c>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	791b      	ldrb	r3, [r3, #4]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d138      	bne.n	8005576 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800551e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	e027      	b.n	8005576 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005540:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005544:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	791b      	ldrb	r3, [r3, #4]
 800554a:	2b03      	cmp	r3, #3
 800554c:	d003      	beq.n	8005556 <USB_EPClearStall+0x9e>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	791b      	ldrb	r3, [r3, #4]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d10f      	bne.n	8005576 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005574:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80055b8:	68f9      	ldr	r1, [r7, #12]
 80055ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055be:	4313      	orrs	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055fe:	f023 0302 	bic.w	r3, r3, #2
 8005602:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800562c:	f023 0303 	bic.w	r3, r3, #3
 8005630:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005640:	f043 0302 	orr.w	r3, r3, #2
 8005644:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800566c:	68fb      	ldr	r3, [r7, #12]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	4013      	ands	r3, r2
 800569c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	0c1b      	lsrs	r3, r3, #16
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	4013      	ands	r3, r2
 80056d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	b29b      	uxth	r3, r3
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	460b      	mov	r3, r1
 80056ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	4013      	ands	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005710:	68bb      	ldr	r3, [r7, #8]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800571e:	b480      	push	{r7}
 8005720:	b087      	sub	sp, #28
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	460b      	mov	r3, r1
 8005728:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800573e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005740:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	fa22 f303 	lsr.w	r3, r2, r3
 800574e:	01db      	lsls	r3, r3, #7
 8005750:	b2db      	uxtb	r3, r3
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4013      	ands	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800576c:	68bb      	ldr	r3, [r7, #8]
}
 800576e:	4618      	mov	r0, r3
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f003 0301 	and.w	r3, r3, #1
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b2:	4619      	mov	r1, r3
 80057b4:	4b09      	ldr	r3, [pc, #36]	@ (80057dc <USB_ActivateSetup+0x44>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	fffff800 	.word	0xfffff800

080057e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	460b      	mov	r3, r1
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	333c      	adds	r3, #60	@ 0x3c
 80057f6:	3304      	adds	r3, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4a26      	ldr	r2, [pc, #152]	@ (8005898 <USB_EP0_OutStart+0xb8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d90a      	bls.n	800581a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005810:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005814:	d101      	bne.n	800581a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e037      	b.n	800588a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005820:	461a      	mov	r2, r3
 8005822:	2300      	movs	r3, #0
 8005824:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005834:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005838:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005848:	f043 0318 	orr.w	r3, r3, #24
 800584c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800585c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005860:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005862:	7afb      	ldrb	r3, [r7, #11]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10f      	bne.n	8005888 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586e:	461a      	mov	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005882:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005886:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	4f54300a 	.word	0x4f54300a

0800589c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3301      	adds	r3, #1
 80058ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058b4:	d901      	bls.n	80058ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e01b      	b.n	80058f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	daf2      	bge.n	80058a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f043 0201 	orr.w	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3301      	adds	r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058de:	d901      	bls.n	80058e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e006      	b.n	80058f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d0f0      	beq.n	80058d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
	...

08005900 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800590c:	f44f 701d 	mov.w	r0, #628	@ 0x274
 8005910:	f004 f83e 	bl	8009990 <malloc>
 8005914:	4603      	mov	r3, r0
 8005916:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <USBD_MSC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	32b0      	adds	r2, #176	@ 0xb0
 8005928:	2100      	movs	r1, #0
 800592a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800592e:	2302      	movs	r3, #2
 8005930:	e06e      	b.n	8005a10 <USBD_MSC_Init+0x110>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	32b0      	adds	r2, #176	@ 0xb0
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	32b0      	adds	r2, #176	@ 0xb0
 800594c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	7c1b      	ldrb	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d12b      	bne.n	80059b6 <USBD_MSC_Init+0xb6>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800595e:	4b2e      	ldr	r3, [pc, #184]	@ (8005a18 <USBD_MSC_Init+0x118>)
 8005960:	7819      	ldrb	r1, [r3, #0]
 8005962:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005966:	2202      	movs	r2, #2
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f003 fe4e 	bl	800960a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800596e:	4b2a      	ldr	r3, [pc, #168]	@ (8005a18 <USBD_MSC_Init+0x118>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f003 020f 	and.w	r2, r3, #15
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005986:	2201      	movs	r2, #1
 8005988:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800598a:	4b24      	ldr	r3, [pc, #144]	@ (8005a1c <USBD_MSC_Init+0x11c>)
 800598c:	7819      	ldrb	r1, [r3, #0]
 800598e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005992:	2202      	movs	r2, #2
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f003 fe38 	bl	800960a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800599a:	4b20      	ldr	r3, [pc, #128]	@ (8005a1c <USBD_MSC_Init+0x11c>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 020f 	and.w	r2, r3, #15
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	3324      	adds	r3, #36	@ 0x24
 80059b0:	2201      	movs	r2, #1
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	e028      	b.n	8005a08 <USBD_MSC_Init+0x108>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80059b6:	4b18      	ldr	r3, [pc, #96]	@ (8005a18 <USBD_MSC_Init+0x118>)
 80059b8:	7819      	ldrb	r1, [r3, #0]
 80059ba:	2340      	movs	r3, #64	@ 0x40
 80059bc:	2202      	movs	r2, #2
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f003 fe23 	bl	800960a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80059c4:	4b14      	ldr	r3, [pc, #80]	@ (8005a18 <USBD_MSC_Init+0x118>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	f003 020f 	and.w	r2, r3, #15
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80059dc:	2201      	movs	r2, #1
 80059de:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80059e0:	4b0e      	ldr	r3, [pc, #56]	@ (8005a1c <USBD_MSC_Init+0x11c>)
 80059e2:	7819      	ldrb	r1, [r3, #0]
 80059e4:	2340      	movs	r3, #64	@ 0x40
 80059e6:	2202      	movs	r2, #2
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f003 fe0e 	bl	800960a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80059ee:	4b0b      	ldr	r3, [pc, #44]	@ (8005a1c <USBD_MSC_Init+0x11c>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f003 020f 	and.w	r2, r3, #15
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	3324      	adds	r3, #36	@ 0x24
 8005a04:	2201      	movs	r2, #1
 8005a06:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fa2b 	bl	8005e64 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	2000006f 	.word	0x2000006f
 8005a1c:	2000006e 	.word	0x2000006e

08005a20 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8005a2c:	4b26      	ldr	r3, [pc, #152]	@ (8005ac8 <USBD_MSC_DeInit+0xa8>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f003 fe0f 	bl	8009656 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8005a38:	4b23      	ldr	r3, [pc, #140]	@ (8005ac8 <USBD_MSC_DeInit+0xa8>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a50:	2200      	movs	r2, #0
 8005a52:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8005a54:	4b1d      	ldr	r3, [pc, #116]	@ (8005acc <USBD_MSC_DeInit+0xac>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f003 fdfb 	bl	8009656 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8005a60:	4b1a      	ldr	r3, [pc, #104]	@ (8005acc <USBD_MSC_DeInit+0xac>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f003 020f 	and.w	r2, r3, #15
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	3324      	adds	r3, #36	@ 0x24
 8005a76:	2200      	movs	r2, #0
 8005a78:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	32b0      	adds	r2, #176	@ 0xb0
 8005a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d018      	beq.n	8005abe <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa67 	bl	8005f60 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	32b0      	adds	r2, #176	@ 0xb0
 8005a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f003 ff7d 	bl	80099a0 <free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	32b0      	adds	r2, #176	@ 0xb0
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	2000006f 	.word	0x2000006f
 8005acc:	2000006e 	.word	0x2000006e

08005ad0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	32b0      	adds	r2, #176	@ 0xb0
 8005ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e0e1      	b.n	8005cc0 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d053      	beq.n	8005bb0 <USBD_MSC_Setup+0xe0>
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	f040 80d1 	bne.w	8005cb0 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	2bfe      	cmp	r3, #254	@ 0xfe
 8005b14:	d002      	beq.n	8005b1c <USBD_MSC_Setup+0x4c>
 8005b16:	2bff      	cmp	r3, #255	@ 0xff
 8005b18:	d02a      	beq.n	8005b70 <USBD_MSC_Setup+0xa0>
 8005b1a:	e041      	b.n	8005ba0 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	885b      	ldrh	r3, [r3, #2]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11e      	bne.n	8005b62 <USBD_MSC_Setup+0x92>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	88db      	ldrh	r3, [r3, #6]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d11a      	bne.n	8005b62 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	da15      	bge.n	8005b62 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	33b0      	adds	r3, #176	@ 0xb0
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	4798      	blx	r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2201      	movs	r2, #1
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f003 f95d 	bl	8008e18 <USBD_CtlSendData>
 8005b5e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b60:	e025      	b.n	8005bae <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f003 f8da 	bl	8008d1e <USBD_CtlError>
            ret = USBD_FAIL;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b6e:	e01e      	b.n	8005bae <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	885b      	ldrh	r3, [r3, #2]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10c      	bne.n	8005b92 <USBD_MSC_Setup+0xc2>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	88db      	ldrh	r3, [r3, #6]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	db03      	blt.n	8005b92 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f9b4 	bl	8005ef8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b90:	e00d      	b.n	8005bae <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f003 f8c2 	bl	8008d1e <USBD_CtlError>
            ret = USBD_FAIL;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b9e:	e006      	b.n	8005bae <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f003 f8bb 	bl	8008d1e <USBD_CtlError>
          ret = USBD_FAIL;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	75fb      	strb	r3, [r7, #23]
          break;
 8005bac:	bf00      	nop
      }
      break;
 8005bae:	e086      	b.n	8005cbe <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b0b      	cmp	r3, #11
 8005bb6:	d872      	bhi.n	8005c9e <USBD_MSC_Setup+0x1ce>
 8005bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc0 <USBD_MSC_Setup+0xf0>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005bf1 	.word	0x08005bf1
 8005bc4:	08005c6d 	.word	0x08005c6d
 8005bc8:	08005c9f 	.word	0x08005c9f
 8005bcc:	08005c9f 	.word	0x08005c9f
 8005bd0:	08005c9f 	.word	0x08005c9f
 8005bd4:	08005c9f 	.word	0x08005c9f
 8005bd8:	08005c9f 	.word	0x08005c9f
 8005bdc:	08005c9f 	.word	0x08005c9f
 8005be0:	08005c9f 	.word	0x08005c9f
 8005be4:	08005c9f 	.word	0x08005c9f
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c45 	.word	0x08005c45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d107      	bne.n	8005c0c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bfc:	f107 030e 	add.w	r3, r7, #14
 8005c00:	2202      	movs	r2, #2
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f003 f907 	bl	8008e18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c0a:	e050      	b.n	8005cae <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f003 f885 	bl	8008d1e <USBD_CtlError>
            ret = USBD_FAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	75fb      	strb	r3, [r7, #23]
          break;
 8005c18:	e049      	b.n	8005cae <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d107      	bne.n	8005c36 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f003 f8f2 	bl	8008e18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c34:	e03b      	b.n	8005cae <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f003 f870 	bl	8008d1e <USBD_CtlError>
            ret = USBD_FAIL;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	75fb      	strb	r3, [r7, #23]
          break;
 8005c42:	e034      	b.n	8005cae <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d106      	bne.n	8005c5e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	885b      	ldrh	r3, [r3, #2]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c5c:	e027      	b.n	8005cae <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f003 f85c 	bl	8008d1e <USBD_CtlError>
            ret = USBD_FAIL;
 8005c66:	2303      	movs	r3, #3
 8005c68:	75fb      	strb	r3, [r7, #23]
          break;
 8005c6a:	e020      	b.n	8005cae <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d119      	bne.n	8005cac <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	885b      	ldrh	r3, [r3, #2]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d115      	bne.n	8005cac <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	889b      	ldrh	r3, [r3, #4]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	4619      	mov	r1, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f003 fd03 	bl	8009694 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	889b      	ldrh	r3, [r3, #4]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fb2e 	bl	80062f8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8005c9c:	e006      	b.n	8005cac <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f003 f83c 	bl	8008d1e <USBD_CtlError>
          ret = USBD_FAIL;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8005caa:	e000      	b.n	8005cae <USBD_MSC_Setup+0x1de>
          break;
 8005cac:	bf00      	nop
      }
      break;
 8005cae:	e006      	b.n	8005cbe <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f003 f833 	bl	8008d1e <USBD_CtlError>
      ret = USBD_FAIL;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	75fb      	strb	r3, [r7, #23]
      break;
 8005cbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f959 	bl	8005f90 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f983 	bl	8006004 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8005d10:	2181      	movs	r1, #129	@ 0x81
 8005d12:	4812      	ldr	r0, [pc, #72]	@ (8005d5c <USBD_MSC_GetHSCfgDesc+0x54>)
 8005d14:	f002 f9a4 	bl	8008060 <USBD_GetEpDesc>
 8005d18:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	480f      	ldr	r0, [pc, #60]	@ (8005d5c <USBD_MSC_GetHSCfgDesc+0x54>)
 8005d1e:	f002 f99f 	bl	8008060 <USBD_GetEpDesc>
 8005d22:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d006      	beq.n	8005d38 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	711a      	strb	r2, [r3, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f042 0202 	orr.w	r2, r2, #2
 8005d36:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d006      	beq.n	8005d4c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2200      	movs	r2, #0
 8005d42:	711a      	strb	r2, [r3, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f042 0202 	orr.w	r2, r2, #2
 8005d4a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8005d52:	4b02      	ldr	r3, [pc, #8]	@ (8005d5c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000044 	.word	0x20000044

08005d60 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8005d68:	2181      	movs	r1, #129	@ 0x81
 8005d6a:	4812      	ldr	r0, [pc, #72]	@ (8005db4 <USBD_MSC_GetFSCfgDesc+0x54>)
 8005d6c:	f002 f978 	bl	8008060 <USBD_GetEpDesc>
 8005d70:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005d72:	2101      	movs	r1, #1
 8005d74:	480f      	ldr	r0, [pc, #60]	@ (8005db4 <USBD_MSC_GetFSCfgDesc+0x54>)
 8005d76:	f002 f973 	bl	8008060 <USBD_GetEpDesc>
 8005d7a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d006      	beq.n	8005d90 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d8a:	711a      	strb	r2, [r3, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d006      	beq.n	8005da4 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d9e:	711a      	strb	r2, [r3, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8005daa:	4b02      	ldr	r3, [pc, #8]	@ (8005db4 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20000044 	.word	0x20000044

08005db8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8005dc0:	2181      	movs	r1, #129	@ 0x81
 8005dc2:	4812      	ldr	r0, [pc, #72]	@ (8005e0c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8005dc4:	f002 f94c 	bl	8008060 <USBD_GetEpDesc>
 8005dc8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005dca:	2101      	movs	r1, #1
 8005dcc:	480f      	ldr	r0, [pc, #60]	@ (8005e0c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8005dce:	f002 f947 	bl	8008060 <USBD_GetEpDesc>
 8005dd2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d006      	beq.n	8005de8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005de2:	711a      	strb	r2, [r3, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d006      	beq.n	8005dfc <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005df6:	711a      	strb	r2, [r3, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8005e02:	4b02      	ldr	r3, [pc, #8]	@ (8005e0c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000044 	.word	0x20000044

08005e10 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	220a      	movs	r2, #10
 8005e1c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8005e1e:	4b03      	ldr	r3, [pc, #12]	@ (8005e2c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	20000064 	.word	0x20000064

08005e30 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e009      	b.n	8005e58 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	33b0      	adds	r3, #176	@ 0xb0
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	32b0      	adds	r2, #176	@ 0xb0
 8005e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d032      	beq.n	8005ee8 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	33b0      	adds	r3, #176	@ 0xb0
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2000      	movs	r0, #0
 8005eba:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef0 <MSC_BOT_Init+0x8c>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f003 fbe6 	bl	8009694 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef4 <MSC_BOT_Init+0x90>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f003 fbe0 	bl	8009694 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005ed4:	4b06      	ldr	r3, [pc, #24]	@ (8005ef0 <MSC_BOT_Init+0x8c>)
 8005ed6:	7819      	ldrb	r1, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005ede:	231f      	movs	r3, #31
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f003 fca0 	bl	8009826 <USBD_LL_PrepareReceive>
 8005ee6:	e000      	b.n	8005eea <MSC_BOT_Init+0x86>
    return;
 8005ee8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	2000006f 	.word	0x2000006f
 8005ef4:	2000006e 	.word	0x2000006e

08005ef8 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	32b0      	adds	r2, #176	@ 0xb0
 8005f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01b      	beq.n	8005f4e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <MSC_BOT_Reset+0x60>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f003 fbf1 	bl	8009710 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <MSC_BOT_Reset+0x64>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f003 fbeb 	bl	8009710 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005f3a:	4b08      	ldr	r3, [pc, #32]	@ (8005f5c <MSC_BOT_Reset+0x64>)
 8005f3c:	7819      	ldrb	r1, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005f44:	231f      	movs	r3, #31
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f003 fc6d 	bl	8009826 <USBD_LL_PrepareReceive>
 8005f4c:	e000      	b.n	8005f50 <MSC_BOT_Reset+0x58>
    return;
 8005f4e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	2000006e 	.word	0x2000006e
 8005f5c:	2000006f 	.word	0x2000006f

08005f60 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	32b0      	adds	r2, #176	@ 0xb0
 8005f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f76:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	721a      	strb	r2, [r3, #8]
  }
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	32b0      	adds	r2, #176	@ 0xb0
 8005fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005faa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d020      	beq.n	8005ff4 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	7a1b      	ldrb	r3, [r3, #8]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d005      	beq.n	8005fc6 <MSC_BOT_DataIn+0x36>
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	db1c      	blt.n	8005ff8 <MSC_BOT_DataIn+0x68>
 8005fbe:	3b03      	subs	r3, #3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d819      	bhi.n	8005ff8 <MSC_BOT_DataIn+0x68>
 8005fc4:	e011      	b.n	8005fea <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f9c9 	bl	800636c <SCSI_ProcessCmd>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da0d      	bge.n	8005ffc <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f90c 	bl	8006200 <MSC_BOT_SendCSW>
      }
      break;
 8005fe8:	e008      	b.n	8005ffc <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005fea:	2100      	movs	r1, #0
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f907 	bl	8006200 <MSC_BOT_SendCSW>
      break;
 8005ff2:	e004      	b.n	8005ffe <MSC_BOT_DataIn+0x6e>
    return;
 8005ff4:	bf00      	nop
 8005ff6:	e002      	b.n	8005ffe <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8005ff8:	bf00      	nop
 8005ffa:	e000      	b.n	8005ffe <MSC_BOT_DataIn+0x6e>
      break;
 8005ffc:	bf00      	nop
  }
}
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	32b0      	adds	r2, #176	@ 0xb0
 800601a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01c      	beq.n	8006060 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	7a1b      	ldrb	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <MSC_BOT_DataOut+0x30>
 800602e:	2b01      	cmp	r3, #1
 8006030:	d004      	beq.n	800603c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006032:	e018      	b.n	8006066 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f819 	bl	800606c <MSC_BOT_CBW_Decode>
      break;
 800603a:	e014      	b.n	8006066 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8006048:	461a      	mov	r2, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f98e 	bl	800636c <SCSI_ProcessCmd>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	da06      	bge.n	8006064 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006056:	2101      	movs	r1, #1
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f8d1 	bl	8006200 <MSC_BOT_SendCSW>
      break;
 800605e:	e001      	b.n	8006064 <MSC_BOT_DataOut+0x60>
    return;
 8006060:	bf00      	nop
 8006062:	e000      	b.n	8006066 <MSC_BOT_DataOut+0x62>
      break;
 8006064:	bf00      	nop
  }
}
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	32b0      	adds	r2, #176	@ 0xb0
 800607e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006082:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d079      	beq.n	800617e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80060a2:	4b3a      	ldr	r3, [pc, #232]	@ (800618c <MSC_BOT_CBW_Decode+0x120>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f003 fbdd 	bl	8009868 <USBD_LL_GetRxDataSize>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b1f      	cmp	r3, #31
 80060b2:	d114      	bne.n	80060de <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80060ba:	4a35      	ldr	r2, [pc, #212]	@ (8006190 <MSC_BOT_CBW_Decode+0x124>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10e      	bne.n	80060de <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d809      	bhi.n	80060de <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d90e      	bls.n	80060fc <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80060e4:	2320      	movs	r3, #32
 80060e6:	2205      	movs	r2, #5
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fe54 	bl	8006d96 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2202      	movs	r2, #2
 80060f2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f8bd 	bl	8006274 <MSC_BOT_Abort>
 80060fa:	e043      	b.n	8006184 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8006108:	461a      	mov	r2, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f92e 	bl	800636c <SCSI_ProcessCmd>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	da0c      	bge.n	8006130 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	7a1b      	ldrb	r3, [r3, #8]
 800611a:	2b05      	cmp	r3, #5
 800611c:	d104      	bne.n	8006128 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800611e:	2101      	movs	r1, #1
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f86d 	bl	8006200 <MSC_BOT_SendCSW>
 8006126:	e02d      	b.n	8006184 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f8a3 	bl	8006274 <MSC_BOT_Abort>
 800612e:	e029      	b.n	8006184 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	7a1b      	ldrb	r3, [r3, #8]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d024      	beq.n	8006182 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800613c:	2b01      	cmp	r3, #1
 800613e:	d020      	beq.n	8006182 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006144:	2b03      	cmp	r3, #3
 8006146:	d01c      	beq.n	8006182 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d009      	beq.n	8006164 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f103 0110 	add.w	r1, r3, #16
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	461a      	mov	r2, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f819 	bl	8006194 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006162:	e00f      	b.n	8006184 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800616c:	2100      	movs	r1, #0
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f846 	bl	8006200 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006174:	e006      	b.n	8006184 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f87c 	bl	8006274 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800617c:	e002      	b.n	8006184 <MSC_BOT_CBW_Decode+0x118>
    return;
 800617e:	bf00      	nop
 8006180:	e000      	b.n	8006184 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8006182:	bf00      	nop
    }
  }
}
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	2000006f 	.word	0x2000006f
 8006190:	43425355 	.word	0x43425355

08006194 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	32b0      	adds	r2, #176	@ 0xb0
 80061aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ae:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01e      	beq.n	80061f4 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4293      	cmp	r3, r2
 80061c0:	bf28      	it	cs
 80061c2:	4613      	movcs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2204      	movs	r2, #4
 80061e2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80061e4:	4b05      	ldr	r3, [pc, #20]	@ (80061fc <MSC_BOT_SendData+0x68>)
 80061e6:	7819      	ldrb	r1, [r3, #0]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f003 faf9 	bl	80097e4 <USBD_LL_Transmit>
 80061f2:	e000      	b.n	80061f6 <MSC_BOT_SendData+0x62>
    return;
 80061f4:	bf00      	nop
}
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	2000006e 	.word	0x2000006e

08006200 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	32b0      	adds	r2, #176	@ 0xb0
 8006216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01d      	beq.n	800625e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4a10      	ldr	r2, [pc, #64]	@ (8006268 <MSC_BOT_SendCSW+0x68>)
 8006226:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	78fa      	ldrb	r2, [r7, #3]
 800622e:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8006238:	4b0c      	ldr	r3, [pc, #48]	@ (800626c <MSC_BOT_SendCSW+0x6c>)
 800623a:	7819      	ldrb	r1, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 8006242:	230d      	movs	r3, #13
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f003 facd 	bl	80097e4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800624a:	4b09      	ldr	r3, [pc, #36]	@ (8006270 <MSC_BOT_SendCSW+0x70>)
 800624c:	7819      	ldrb	r1, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8006254:	231f      	movs	r3, #31
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f003 fae5 	bl	8009826 <USBD_LL_PrepareReceive>
 800625c:	e000      	b.n	8006260 <MSC_BOT_SendCSW+0x60>
    return;
 800625e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	53425355 	.word	0x53425355
 800626c:	2000006e 	.word	0x2000006e
 8006270:	2000006f 	.word	0x2000006f

08006274 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	32b0      	adds	r2, #176	@ 0xb0
 8006286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d02a      	beq.n	80062e8 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10e      	bne.n	80062ba <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d105      	bne.n	80062ba <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80062ae:	4b10      	ldr	r3, [pc, #64]	@ (80062f0 <MSC_BOT_Abort+0x7c>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f003 fa0c 	bl	80096d2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80062ba:	4b0e      	ldr	r3, [pc, #56]	@ (80062f4 <MSC_BOT_Abort+0x80>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f003 fa06 	bl	80096d2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	7a5b      	ldrb	r3, [r3, #9]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d10d      	bne.n	80062ea <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80062ce:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <MSC_BOT_Abort+0x80>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f003 f9fc 	bl	80096d2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80062da:	4b05      	ldr	r3, [pc, #20]	@ (80062f0 <MSC_BOT_Abort+0x7c>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f003 f9f6 	bl	80096d2 <USBD_LL_StallEP>
 80062e6:	e000      	b.n	80062ea <MSC_BOT_Abort+0x76>
    return;
 80062e8:	bf00      	nop
  }
}
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	2000006f 	.word	0x2000006f
 80062f4:	2000006e 	.word	0x2000006e

080062f8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	32b0      	adds	r2, #176	@ 0xb0
 800630e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006312:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d01d      	beq.n	8006356 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	7a5b      	ldrb	r3, [r3, #9]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d10c      	bne.n	800633c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8006322:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <MSC_BOT_CplClrFeature+0x6c>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f003 f9d2 	bl	80096d2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800632e:	4b0e      	ldr	r3, [pc, #56]	@ (8006368 <MSC_BOT_CplClrFeature+0x70>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f003 f9cc 	bl	80096d2 <USBD_LL_StallEP>
 800633a:	e00f      	b.n	800635c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800633c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006340:	2b00      	cmp	r3, #0
 8006342:	da0a      	bge.n	800635a <MSC_BOT_CplClrFeature+0x62>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	7a5b      	ldrb	r3, [r3, #9]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d006      	beq.n	800635a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800634c:	2101      	movs	r1, #1
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff ff56 	bl	8006200 <MSC_BOT_SendCSW>
 8006354:	e002      	b.n	800635c <MSC_BOT_CplClrFeature+0x64>
    return;
 8006356:	bf00      	nop
 8006358:	e000      	b.n	800635c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800635a:	bf00      	nop
  }
}
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	2000006e 	.word	0x2000006e
 8006368:	2000006f 	.word	0x2000006f

0800636c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	460b      	mov	r3, r1
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	32b0      	adds	r2, #176	@ 0xb0
 8006384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006388:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d102      	bne.n	8006396 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8006390:	f04f 33ff 	mov.w	r3, #4294967295
 8006394:	e168      	b.n	8006668 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2baa      	cmp	r3, #170	@ 0xaa
 800639c:	f000 8144 	beq.w	8006628 <SCSI_ProcessCmd+0x2bc>
 80063a0:	2baa      	cmp	r3, #170	@ 0xaa
 80063a2:	f300 8153 	bgt.w	800664c <SCSI_ProcessCmd+0x2e0>
 80063a6:	2ba8      	cmp	r3, #168	@ 0xa8
 80063a8:	f000 812c 	beq.w	8006604 <SCSI_ProcessCmd+0x298>
 80063ac:	2ba8      	cmp	r3, #168	@ 0xa8
 80063ae:	f300 814d 	bgt.w	800664c <SCSI_ProcessCmd+0x2e0>
 80063b2:	2b5a      	cmp	r3, #90	@ 0x5a
 80063b4:	f300 80c0 	bgt.w	8006538 <SCSI_ProcessCmd+0x1cc>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f2c0 8147 	blt.w	800664c <SCSI_ProcessCmd+0x2e0>
 80063be:	2b5a      	cmp	r3, #90	@ 0x5a
 80063c0:	f200 8144 	bhi.w	800664c <SCSI_ProcessCmd+0x2e0>
 80063c4:	a201      	add	r2, pc, #4	@ (adr r2, 80063cc <SCSI_ProcessCmd+0x60>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	0800653f 	.word	0x0800653f
 80063d0:	0800664d 	.word	0x0800664d
 80063d4:	0800664d 	.word	0x0800664d
 80063d8:	08006551 	.word	0x08006551
 80063dc:	0800664d 	.word	0x0800664d
 80063e0:	0800664d 	.word	0x0800664d
 80063e4:	0800664d 	.word	0x0800664d
 80063e8:	0800664d 	.word	0x0800664d
 80063ec:	0800664d 	.word	0x0800664d
 80063f0:	0800664d 	.word	0x0800664d
 80063f4:	0800664d 	.word	0x0800664d
 80063f8:	0800664d 	.word	0x0800664d
 80063fc:	0800664d 	.word	0x0800664d
 8006400:	0800664d 	.word	0x0800664d
 8006404:	0800664d 	.word	0x0800664d
 8006408:	0800664d 	.word	0x0800664d
 800640c:	0800664d 	.word	0x0800664d
 8006410:	0800664d 	.word	0x0800664d
 8006414:	08006563 	.word	0x08006563
 8006418:	0800664d 	.word	0x0800664d
 800641c:	0800664d 	.word	0x0800664d
 8006420:	0800664d 	.word	0x0800664d
 8006424:	0800664d 	.word	0x0800664d
 8006428:	0800664d 	.word	0x0800664d
 800642c:	0800664d 	.word	0x0800664d
 8006430:	0800664d 	.word	0x0800664d
 8006434:	08006599 	.word	0x08006599
 8006438:	08006575 	.word	0x08006575
 800643c:	0800664d 	.word	0x0800664d
 8006440:	0800664d 	.word	0x0800664d
 8006444:	08006587 	.word	0x08006587
 8006448:	0800664d 	.word	0x0800664d
 800644c:	0800664d 	.word	0x0800664d
 8006450:	0800664d 	.word	0x0800664d
 8006454:	0800664d 	.word	0x0800664d
 8006458:	080065bd 	.word	0x080065bd
 800645c:	0800664d 	.word	0x0800664d
 8006460:	080065cf 	.word	0x080065cf
 8006464:	0800664d 	.word	0x0800664d
 8006468:	0800664d 	.word	0x0800664d
 800646c:	080065f3 	.word	0x080065f3
 8006470:	0800664d 	.word	0x0800664d
 8006474:	08006617 	.word	0x08006617
 8006478:	0800664d 	.word	0x0800664d
 800647c:	0800664d 	.word	0x0800664d
 8006480:	0800664d 	.word	0x0800664d
 8006484:	0800664d 	.word	0x0800664d
 8006488:	0800663b 	.word	0x0800663b
 800648c:	0800664d 	.word	0x0800664d
 8006490:	0800664d 	.word	0x0800664d
 8006494:	0800664d 	.word	0x0800664d
 8006498:	0800664d 	.word	0x0800664d
 800649c:	0800664d 	.word	0x0800664d
 80064a0:	0800664d 	.word	0x0800664d
 80064a4:	0800664d 	.word	0x0800664d
 80064a8:	0800664d 	.word	0x0800664d
 80064ac:	0800664d 	.word	0x0800664d
 80064b0:	0800664d 	.word	0x0800664d
 80064b4:	0800664d 	.word	0x0800664d
 80064b8:	0800664d 	.word	0x0800664d
 80064bc:	0800664d 	.word	0x0800664d
 80064c0:	0800664d 	.word	0x0800664d
 80064c4:	0800664d 	.word	0x0800664d
 80064c8:	0800664d 	.word	0x0800664d
 80064cc:	0800664d 	.word	0x0800664d
 80064d0:	0800664d 	.word	0x0800664d
 80064d4:	0800664d 	.word	0x0800664d
 80064d8:	0800664d 	.word	0x0800664d
 80064dc:	0800664d 	.word	0x0800664d
 80064e0:	0800664d 	.word	0x0800664d
 80064e4:	0800664d 	.word	0x0800664d
 80064e8:	0800664d 	.word	0x0800664d
 80064ec:	0800664d 	.word	0x0800664d
 80064f0:	0800664d 	.word	0x0800664d
 80064f4:	0800664d 	.word	0x0800664d
 80064f8:	0800664d 	.word	0x0800664d
 80064fc:	0800664d 	.word	0x0800664d
 8006500:	0800664d 	.word	0x0800664d
 8006504:	0800664d 	.word	0x0800664d
 8006508:	0800664d 	.word	0x0800664d
 800650c:	0800664d 	.word	0x0800664d
 8006510:	0800664d 	.word	0x0800664d
 8006514:	0800664d 	.word	0x0800664d
 8006518:	0800664d 	.word	0x0800664d
 800651c:	0800664d 	.word	0x0800664d
 8006520:	0800664d 	.word	0x0800664d
 8006524:	0800664d 	.word	0x0800664d
 8006528:	0800664d 	.word	0x0800664d
 800652c:	0800664d 	.word	0x0800664d
 8006530:	0800664d 	.word	0x0800664d
 8006534:	080065ab 	.word	0x080065ab
 8006538:	2b9e      	cmp	r3, #158	@ 0x9e
 800653a:	d051      	beq.n	80065e0 <SCSI_ProcessCmd+0x274>
 800653c:	e086      	b.n	800664c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800653e:	7afb      	ldrb	r3, [r7, #11]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	4619      	mov	r1, r3
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f893 	bl	8006670 <SCSI_TestUnitReady>
 800654a:	4603      	mov	r3, r0
 800654c:	75fb      	strb	r3, [r7, #23]
      break;
 800654e:	e089      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8006550:	7afb      	ldrb	r3, [r7, #11]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4619      	mov	r1, r3
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fb9a 	bl	8006c90 <SCSI_RequestSense>
 800655c:	4603      	mov	r3, r0
 800655e:	75fb      	strb	r3, [r7, #23]
      break;
 8006560:	e080      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8006562:	7afb      	ldrb	r3, [r7, #11]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	4619      	mov	r1, r3
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f8db 	bl	8006724 <SCSI_Inquiry>
 800656e:	4603      	mov	r3, r0
 8006570:	75fb      	strb	r3, [r7, #23]
      break;
 8006572:	e077      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8006574:	7afb      	ldrb	r3, [r7, #11]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4619      	mov	r1, r3
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fc56 	bl	8006e2c <SCSI_StartStopUnit>
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]
      break;
 8006584:	e06e      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8006586:	7afb      	ldrb	r3, [r7, #11]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	4619      	mov	r1, r3
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fca2 	bl	8006ed6 <SCSI_AllowPreventRemovable>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]
      break;
 8006596:	e065      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	4619      	mov	r1, r3
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 faea 	bl	8006b78 <SCSI_ModeSense6>
 80065a4:	4603      	mov	r3, r0
 80065a6:	75fb      	strb	r3, [r7, #23]
      break;
 80065a8:	e05c      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80065aa:	7afb      	ldrb	r3, [r7, #11]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	4619      	mov	r1, r3
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fb27 	bl	8006c04 <SCSI_ModeSense10>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]
      break;
 80065ba:	e053      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80065bc:	7afb      	ldrb	r3, [r7, #11]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	4619      	mov	r1, r3
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fa5c 	bl	8006a80 <SCSI_ReadFormatCapacity>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]
      break;
 80065cc:	e04a      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80065ce:	7afb      	ldrb	r3, [r7, #11]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	4619      	mov	r1, r3
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f921 	bl	800681c <SCSI_ReadCapacity10>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]
      break;
 80065de:	e041      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80065e0:	7afb      	ldrb	r3, [r7, #11]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4619      	mov	r1, r3
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f996 	bl	8006918 <SCSI_ReadCapacity16>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]
      break;
 80065f0:	e038      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80065f2:	7afb      	ldrb	r3, [r7, #11]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	4619      	mov	r1, r3
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fc99 	bl	8006f30 <SCSI_Read10>
 80065fe:	4603      	mov	r3, r0
 8006600:	75fb      	strb	r3, [r7, #23]
      break;
 8006602:	e02f      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8006604:	7afb      	ldrb	r3, [r7, #11]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4619      	mov	r1, r3
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fd3a 	bl	8007084 <SCSI_Read12>
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]
      break;
 8006614:	e026      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8006616:	7afb      	ldrb	r3, [r7, #11]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	4619      	mov	r1, r3
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 fde5 	bl	80071ec <SCSI_Write10>
 8006622:	4603      	mov	r3, r0
 8006624:	75fb      	strb	r3, [r7, #23]
      break;
 8006626:	e01d      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	4619      	mov	r1, r3
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 feb2 	bl	8007398 <SCSI_Write12>
 8006634:	4603      	mov	r3, r0
 8006636:	75fb      	strb	r3, [r7, #23]
      break;
 8006638:	e014      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	4619      	mov	r1, r3
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 ff8f 	bl	8007564 <SCSI_Verify10>
 8006646:	4603      	mov	r3, r0
 8006648:	75fb      	strb	r3, [r7, #23]
      break;
 800664a:	e00b      	b.n	8006664 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800664c:	7af9      	ldrb	r1, [r7, #11]
 800664e:	2320      	movs	r3, #32
 8006650:	2205      	movs	r2, #5
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fb9f 	bl	8006d96 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2202      	movs	r2, #2
 800665c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800665e:	23ff      	movs	r3, #255	@ 0xff
 8006660:	75fb      	strb	r3, [r7, #23]
      break;
 8006662:	bf00      	nop
  }

  return ret;
 8006664:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	460b      	mov	r3, r1
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	32b0      	adds	r2, #176	@ 0xb0
 8006688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8006694:	f04f 33ff 	mov.w	r3, #4294967295
 8006698:	e03f      	b.n	800671a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80066aa:	2320      	movs	r3, #32
 80066ac:	2205      	movs	r2, #5
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fb71 	bl	8006d96 <SCSI_SenseCode>

    return -1;
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295
 80066b8:	e02f      	b.n	800671a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d10b      	bne.n	80066dc <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80066c4:	7af9      	ldrb	r1, [r7, #11]
 80066c6:	233a      	movs	r3, #58	@ 0x3a
 80066c8:	2202      	movs	r2, #2
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 fb63 	bl	8006d96 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2205      	movs	r2, #5
 80066d4:	721a      	strb	r2, [r3, #8]
    return -1;
 80066d6:	f04f 33ff 	mov.w	r3, #4294967295
 80066da:	e01e      	b.n	800671a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	33b0      	adds	r3, #176	@ 0xb0
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	7afa      	ldrb	r2, [r7, #11]
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80066fa:	7af9      	ldrb	r1, [r7, #11]
 80066fc:	233a      	movs	r3, #58	@ 0x3a
 80066fe:	2202      	movs	r2, #2
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 fb48 	bl	8006d96 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2205      	movs	r2, #5
 800670a:	721a      	strb	r2, [r3, #8]

    return -1;
 800670c:	f04f 33ff 	mov.w	r3, #4294967295
 8006710:	e003      	b.n	800671a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2200      	movs	r2, #0
 8006716:	60da      	str	r2, [r3, #12]

  return 0;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	460b      	mov	r3, r1
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	32b0      	adds	r2, #176	@ 0xb0
 800673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006740:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8006748:	f04f 33ff 	mov.w	r3, #4294967295
 800674c:	e05e      	b.n	800680c <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800675e:	2320      	movs	r3, #32
 8006760:	2205      	movs	r2, #5
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fb17 	bl	8006d96 <SCSI_SenseCode>
    return -1;
 8006768:	f04f 33ff 	mov.w	r3, #4294967295
 800676c:	e04e      	b.n	800680c <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3301      	adds	r3, #1
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d020      	beq.n	80067be <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3302      	adds	r3, #2
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d105      	bne.n	8006792 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8006786:	2206      	movs	r2, #6
 8006788:	4922      	ldr	r1, [pc, #136]	@ (8006814 <SCSI_Inquiry+0xf0>)
 800678a:	69b8      	ldr	r0, [r7, #24]
 800678c:	f001 f870 	bl	8007870 <SCSI_UpdateBotData>
 8006790:	e03b      	b.n	800680a <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3302      	adds	r3, #2
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b80      	cmp	r3, #128	@ 0x80
 800679a:	d105      	bne.n	80067a8 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800679c:	2208      	movs	r2, #8
 800679e:	491e      	ldr	r1, [pc, #120]	@ (8006818 <SCSI_Inquiry+0xf4>)
 80067a0:	69b8      	ldr	r0, [r7, #24]
 80067a2:	f001 f865 	bl	8007870 <SCSI_UpdateBotData>
 80067a6:	e030      	b.n	800680a <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80067ae:	2324      	movs	r3, #36	@ 0x24
 80067b0:	2205      	movs	r2, #5
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 faef 	bl	8006d96 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80067b8:	f04f 33ff 	mov.w	r3, #4294967295
 80067bc:	e026      	b.n	800680c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	33b0      	adds	r3, #176	@ 0xb0
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80067ce:	69d9      	ldr	r1, [r3, #28]
 80067d0:	7afa      	ldrb	r2, [r7, #11]
 80067d2:	4613      	mov	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80067da:	440b      	add	r3, r1
 80067dc:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	3304      	adds	r3, #4
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	3305      	adds	r3, #5
 80067e6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3304      	adds	r3, #4
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	8bfb      	ldrh	r3, [r7, #30]
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d303      	bcc.n	80067fe <SCSI_Inquiry+0xda>
    {
      len = params[4];
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3304      	adds	r3, #4
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80067fe:	8bfb      	ldrh	r3, [r7, #30]
 8006800:	461a      	mov	r2, r3
 8006802:	6979      	ldr	r1, [r7, #20]
 8006804:	69b8      	ldr	r0, [r7, #24]
 8006806:	f001 f833 	bl	8007870 <SCSI_UpdateBotData>
  }

  return 0;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20000070 	.word	0x20000070
 8006818:	20000078 	.word	0x20000078

0800681c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	460b      	mov	r3, r1
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	32b0      	adds	r2, #176	@ 0xb0
 8006834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006838:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8006840:	f04f 33ff 	mov.w	r3, #4294967295
 8006844:	e064      	b.n	8006910 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	33b0      	adds	r3, #176	@ 0xb0
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8006864:	7af8      	ldrb	r0, [r7, #11]
 8006866:	4798      	blx	r3
 8006868:	4603      	mov	r3, r0
 800686a:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800686c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d104      	bne.n	800687e <SCSI_ReadCapacity10+0x62>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800687a:	2b02      	cmp	r3, #2
 800687c:	d108      	bne.n	8006890 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800687e:	7af9      	ldrb	r1, [r7, #11]
 8006880:	233a      	movs	r3, #58	@ 0x3a
 8006882:	2202      	movs	r2, #2
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fa86 	bl	8006d96 <SCSI_SenseCode>
    return -1;
 800688a:	f04f 33ff 	mov.w	r3, #4294967295
 800688e:	e03f      	b.n	8006910 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006896:	3b01      	subs	r3, #1
 8006898:	0e1b      	lsrs	r3, r3, #24
 800689a:	b2da      	uxtb	r2, r3
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80068a6:	3b01      	subs	r3, #1
 80068a8:	0c1b      	lsrs	r3, r3, #16
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80068b6:	3b01      	subs	r3, #1
 80068b8:	0a1b      	lsrs	r3, r3, #8
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80068d6:	161b      	asrs	r3, r3, #24
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80068e4:	141b      	asrs	r3, r3, #16
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80068f2:	0a1b      	lsrs	r3, r3, #8
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006902:	b2da      	uxtb	r2, r3
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2208      	movs	r2, #8
 800690c:	60da      	str	r2, [r3, #12]

  return 0;
 800690e:	2300      	movs	r3, #0

}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	460b      	mov	r3, r1
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	32b0      	adds	r2, #176	@ 0xb0
 8006930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006934:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800693c:	f04f 33ff 	mov.w	r3, #4294967295
 8006940:	e09a      	b.n	8006a78 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	33b0      	adds	r3, #176	@ 0xb0
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8006960:	7af8      	ldrb	r0, [r7, #11]
 8006962:	4798      	blx	r3
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d104      	bne.n	800697a <SCSI_ReadCapacity16+0x62>
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006976:	2b02      	cmp	r3, #2
 8006978:	d108      	bne.n	800698c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800697a:	7af9      	ldrb	r1, [r7, #11]
 800697c:	233a      	movs	r3, #58	@ 0x3a
 800697e:	2202      	movs	r2, #2
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fa08 	bl	8006d96 <SCSI_SenseCode>
    return -1;
 8006986:	f04f 33ff 	mov.w	r3, #4294967295
 800698a:	e075      	b.n	8006a78 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	330a      	adds	r3, #10
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	330b      	adds	r3, #11
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800699c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	330c      	adds	r3, #12
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80069a6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	320d      	adds	r2, #13
 80069ac:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80069ae:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80069b4:	2300      	movs	r3, #0
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	e008      	b.n	80069cc <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	3310      	adds	r3, #16
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3301      	adds	r3, #1
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d3f1      	bcc.n	80069ba <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80069dc:	3b01      	subs	r3, #1
 80069de:	0e1b      	lsrs	r3, r3, #24
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80069ec:	3b01      	subs	r3, #1
 80069ee:	0c1b      	lsrs	r3, r3, #16
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80069fc:	3b01      	subs	r3, #1
 80069fe:	0a1b      	lsrs	r3, r3, #8
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006a1c:	161b      	asrs	r3, r3, #24
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006a2a:	141b      	asrs	r3, r3, #16
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	330a      	adds	r3, #10
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	330b      	adds	r3, #11
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006a5e:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	330c      	adds	r3, #12
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006a68:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	320d      	adds	r2, #13
 8006a6e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006a70:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	60da      	str	r2, [r3, #12]

  return 0;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	32b0      	adds	r2, #176	@ 0xb0
 8006a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8006aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa8:	e061      	b.n	8006b6e <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	33b0      	adds	r3, #176	@ 0xb0
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f107 0214 	add.w	r2, r7, #20
 8006ac0:	f107 0110 	add.w	r1, r7, #16
 8006ac4:	7af8      	ldrb	r0, [r7, #11]
 8006ac6:	4798      	blx	r3
 8006ac8:	4603      	mov	r3, r0
 8006aca:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <SCSI_ReadFormatCapacity+0x5e>
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d108      	bne.n	8006af0 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006ade:	7af9      	ldrb	r1, [r7, #11]
 8006ae0:	233a      	movs	r3, #58	@ 0x3a
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f956 	bl	8006d96 <SCSI_SenseCode>
    return -1;
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295
 8006aee:	e03e      	b.n	8006b6e <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8006af0:	2300      	movs	r3, #0
 8006af2:	83fb      	strh	r3, [r7, #30]
 8006af4:	e007      	b.n	8006b06 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8006af6:	8bfb      	ldrh	r3, [r7, #30]
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4413      	add	r3, r2
 8006afc:	2200      	movs	r2, #0
 8006afe:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8006b00:	8bfb      	ldrh	r3, [r7, #30]
 8006b02:	3301      	adds	r3, #1
 8006b04:	83fb      	strh	r3, [r7, #30]
 8006b06:	8bfb      	ldrh	r3, [r7, #30]
 8006b08:	2b0b      	cmp	r3, #11
 8006b0a:	d9f4      	bls.n	8006af6 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2208      	movs	r2, #8
 8006b10:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	0e1b      	lsrs	r3, r3, #24
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	0c1b      	lsrs	r3, r3, #16
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2202      	movs	r2, #2
 8006b46:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006b48:	8abb      	ldrh	r3, [r7, #20]
 8006b4a:	141b      	asrs	r3, r3, #16
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006b52:	8abb      	ldrh	r3, [r7, #20]
 8006b54:	0a1b      	lsrs	r3, r3, #8
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006b5e:	8abb      	ldrh	r3, [r7, #20]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	220c      	movs	r2, #12
 8006b6a:	60da      	str	r2, [r3, #12]

  return 0;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	460b      	mov	r3, r1
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	32b0      	adds	r2, #176	@ 0xb0
 8006b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b94:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8006b96:	2304      	movs	r3, #4
 8006b98:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8006ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba4:	e027      	b.n	8006bf6 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	33b0      	adds	r3, #176	@ 0xb0
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	7afa      	ldrb	r2, [r7, #11]
 8006bba:	4610      	mov	r0, r2
 8006bbc:	4798      	blx	r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d006      	beq.n	8006bd2 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006c00 <SCSI_ModeSense6+0x88>)
 8006bc6:	789b      	ldrb	r3, [r3, #2]
 8006bc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	4b0c      	ldr	r3, [pc, #48]	@ (8006c00 <SCSI_ModeSense6+0x88>)
 8006bd0:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	8afb      	ldrh	r3, [r7, #22]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d303      	bcc.n	8006be8 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3304      	adds	r3, #4
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8006be8:	8afb      	ldrh	r3, [r7, #22]
 8006bea:	461a      	mov	r2, r3
 8006bec:	4904      	ldr	r1, [pc, #16]	@ (8006c00 <SCSI_ModeSense6+0x88>)
 8006bee:	6938      	ldr	r0, [r7, #16]
 8006bf0:	f000 fe3e 	bl	8007870 <SCSI_UpdateBotData>

  return 0;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20000080 	.word	0x20000080

08006c04 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	32b0      	adds	r2, #176	@ 0xb0
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8006c22:	2308      	movs	r3, #8
 8006c24:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8006c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c30:	e027      	b.n	8006c82 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	33b0      	adds	r3, #176	@ 0xb0
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	7afa      	ldrb	r2, [r7, #11]
 8006c46:	4610      	mov	r0, r2
 8006c48:	4798      	blx	r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d006      	beq.n	8006c5e <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8006c50:	4b0e      	ldr	r3, [pc, #56]	@ (8006c8c <SCSI_ModeSense10+0x88>)
 8006c52:	78db      	ldrb	r3, [r3, #3]
 8006c54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c8c <SCSI_ModeSense10+0x88>)
 8006c5c:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3308      	adds	r3, #8
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	8afb      	ldrh	r3, [r7, #22]
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d303      	bcc.n	8006c74 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3308      	adds	r3, #8
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8006c74:	8afb      	ldrh	r3, [r7, #22]
 8006c76:	461a      	mov	r2, r3
 8006c78:	4904      	ldr	r1, [pc, #16]	@ (8006c8c <SCSI_ModeSense10+0x88>)
 8006c7a:	6938      	ldr	r0, [r7, #16]
 8006c7c:	f000 fdf8 	bl	8007870 <SCSI_UpdateBotData>

  return 0;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000084 	.word	0x20000084

08006c90 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	32b0      	adds	r2, #176	@ 0xb0
 8006ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d102      	bne.n	8006cba <SCSI_RequestSense+0x2a>
  {
    return -1;
 8006cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb8:	e069      	b.n	8006d8e <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006cca:	2320      	movs	r3, #32
 8006ccc:	2205      	movs	r2, #5
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 f861 	bl	8006d96 <SCSI_SenseCode>
    return -1;
 8006cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd8:	e059      	b.n	8006d8e <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75fb      	strb	r3, [r7, #23]
 8006cde:	e007      	b.n	8006cf0 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	3301      	adds	r3, #1
 8006cee:	75fb      	strb	r3, [r7, #23]
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b11      	cmp	r3, #17
 8006cf4:	d9f4      	bls.n	8006ce0 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2270      	movs	r2, #112	@ 0x70
 8006cfa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	220c      	movs	r2, #12
 8006d00:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d02e      	beq.n	8006d70 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006d18:	461a      	mov	r2, r3
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3248      	adds	r2, #72	@ 0x48
 8006d1e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	3348      	adds	r3, #72	@ 0x48
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	4413      	add	r3, r2
 8006d34:	791a      	ldrb	r2, [r3, #4]
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	3348      	adds	r3, #72	@ 0x48
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	4413      	add	r3, r2
 8006d48:	795a      	ldrb	r2, [r3, #5]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006d54:	3301      	adds	r3, #1
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d103      	bne.n	8006d70 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2212      	movs	r2, #18
 8006d74:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b12      	cmp	r3, #18
 8006d7e:	d805      	bhi.n	8006d8c <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3304      	adds	r3, #4
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	4608      	mov	r0, r1
 8006da0:	4611      	mov	r1, r2
 8006da2:	461a      	mov	r2, r3
 8006da4:	4603      	mov	r3, r0
 8006da6:	70fb      	strb	r3, [r7, #3]
 8006da8:	460b      	mov	r3, r1
 8006daa:	70bb      	strb	r3, [r7, #2]
 8006dac:	4613      	mov	r3, r2
 8006dae:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	32b0      	adds	r2, #176	@ 0xb0
 8006dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d02c      	beq.n	8006e20 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8006dcc:	461a      	mov	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3248      	adds	r2, #72	@ 0x48
 8006dd2:	78b9      	ldrb	r1, [r7, #2]
 8006dd4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	3348      	adds	r3, #72	@ 0x48
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	4413      	add	r3, r2
 8006de6:	787a      	ldrb	r2, [r7, #1]
 8006de8:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	3348      	adds	r3, #72	@ 0x48
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	4413      	add	r3, r2
 8006df8:	2200      	movs	r2, #0
 8006dfa:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8006e02:	3301      	adds	r3, #1
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d105      	bne.n	8006e22 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8006e1e:	e000      	b.n	8006e22 <SCSI_SenseCode+0x8c>
    return;
 8006e20:	bf00      	nop
  }
}
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	460b      	mov	r3, r1
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	32b0      	adds	r2, #176	@ 0xb0
 8006e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e48:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d102      	bne.n	8006e56 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8006e50:	f04f 33ff 	mov.w	r3, #4294967295
 8006e54:	e03b      	b.n	8006ece <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d10f      	bne.n	8006e80 <SCSI_StartStopUnit+0x54>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d108      	bne.n	8006e80 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8006e6e:	7af9      	ldrb	r1, [r7, #11]
 8006e70:	2324      	movs	r3, #36	@ 0x24
 8006e72:	2205      	movs	r2, #5
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f7ff ff8e 	bl	8006d96 <SCSI_SenseCode>

    return -1;
 8006e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7e:	e026      	b.n	8006ece <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3304      	adds	r3, #4
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d104      	bne.n	8006e98 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8006e96:	e016      	b.n	8006ec6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d104      	bne.n	8006eb0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8006eae:	e00a      	b.n	8006ec6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d103      	bne.n	8006ec6 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	60da      	str	r2, [r3, #12]

  return 0;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b087      	sub	sp, #28
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	607a      	str	r2, [r7, #4]
 8006ee2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	32b0      	adds	r2, #176	@ 0xb0
 8006eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d102      	bne.n	8006f00 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295
 8006efe:	e011      	b.n	8006f24 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3304      	adds	r3, #4
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d104      	bne.n	8006f14 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8006f12:	e003      	b.n	8006f1c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	60da      	str	r2, [r3, #12]

  return 0;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	371c      	adds	r7, #28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	32b0      	adds	r2, #176	@ 0xb0
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <SCSI_Read10+0x2a>
  {
    return -1;
 8006f54:	f04f 33ff 	mov.w	r3, #4294967295
 8006f58:	e090      	b.n	800707c <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	7a1b      	ldrb	r3, [r3, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 8082 	bne.w	8007068 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8006f6a:	b25b      	sxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	db0a      	blt.n	8006f86 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006f76:	2320      	movs	r3, #32
 8006f78:	2205      	movs	r2, #5
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff ff0b 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 8006f80:	f04f 33ff 	mov.w	r3, #4294967295
 8006f84:	e07a      	b.n	800707c <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d108      	bne.n	8006fa2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f90:	7af9      	ldrb	r1, [r7, #11]
 8006f92:	233a      	movs	r3, #58	@ 0x3a
 8006f94:	2202      	movs	r2, #2
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff fefd 	bl	8006d96 <SCSI_SenseCode>

      return -1;
 8006f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa0:	e06c      	b.n	800707c <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	33b0      	adds	r3, #176	@ 0xb0
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	7afa      	ldrb	r2, [r7, #11]
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4798      	blx	r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d008      	beq.n	8006fd2 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006fc0:	7af9      	ldrb	r1, [r7, #11]
 8006fc2:	233a      	movs	r3, #58	@ 0x3a
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff fee5 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 8006fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd0:	e054      	b.n	800707c <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3302      	adds	r3, #2
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3303      	adds	r3, #3
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006fe2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006fec:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	3205      	adds	r2, #5
 8006ff2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006ff4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3307      	adds	r3, #7
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	3208      	adds	r2, #8
 8007008:	7812      	ldrb	r2, [r2, #0]
 800700a:	431a      	orrs	r2, r3
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800701e:	7af9      	ldrb	r1, [r7, #11]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fadc 	bl	80075de <SCSI_CheckAddressRange>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	da02      	bge.n	8007032 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800702c:	f04f 33ff 	mov.w	r3, #4294967295
 8007030:	e024      	b.n	800707c <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800703e:	6979      	ldr	r1, [r7, #20]
 8007040:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	429a      	cmp	r2, r3
 800704a:	d00a      	beq.n	8007062 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007052:	2320      	movs	r3, #32
 8007054:	2205      	movs	r2, #5
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7ff fe9d 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 800705c:	f04f 33ff 	mov.w	r3, #4294967295
 8007060:	e00c      	b.n	800707c <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2202      	movs	r2, #2
 8007066:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800706e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007070:	7afb      	ldrb	r3, [r7, #11]
 8007072:	4619      	mov	r1, r3
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fadf 	bl	8007638 <SCSI_ProcessRead>
 800707a:	4603      	mov	r3, r0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	460b      	mov	r3, r1
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	32b0      	adds	r2, #176	@ 0xb0
 800709c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <SCSI_Read12+0x2a>
  {
    return -1;
 80070a8:	f04f 33ff 	mov.w	r3, #4294967295
 80070ac:	e09a      	b.n	80071e4 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	7a1b      	ldrb	r3, [r3, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f040 808c 	bne.w	80071d0 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80070be:	b25b      	sxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	db0a      	blt.n	80070da <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80070ca:	2320      	movs	r3, #32
 80070cc:	2205      	movs	r2, #5
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7ff fe61 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 80070d4:	f04f 33ff 	mov.w	r3, #4294967295
 80070d8:	e084      	b.n	80071e4 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d108      	bne.n	80070f6 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80070e4:	7af9      	ldrb	r1, [r7, #11]
 80070e6:	233a      	movs	r3, #58	@ 0x3a
 80070e8:	2202      	movs	r2, #2
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f7ff fe53 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 80070f0:	f04f 33ff 	mov.w	r3, #4294967295
 80070f4:	e076      	b.n	80071e4 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	33b0      	adds	r3, #176	@ 0xb0
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	7afa      	ldrb	r2, [r7, #11]
 800710a:	4610      	mov	r0, r2
 800710c:	4798      	blx	r3
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007114:	7af9      	ldrb	r1, [r7, #11]
 8007116:	233a      	movs	r3, #58	@ 0x3a
 8007118:	2202      	movs	r2, #2
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff fe3b 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 8007120:	f04f 33ff 	mov.w	r3, #4294967295
 8007124:	e05e      	b.n	80071e4 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3302      	adds	r3, #2
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3303      	adds	r3, #3
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007136:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3304      	adds	r3, #4
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007140:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	3205      	adds	r2, #5
 8007146:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007148:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3306      	adds	r3, #6
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3307      	adds	r3, #7
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007160:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3308      	adds	r3, #8
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800716a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	3209      	adds	r2, #9
 8007170:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007172:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007186:	7af9      	ldrb	r1, [r7, #11]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fa28 	bl	80075de <SCSI_CheckAddressRange>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	da02      	bge.n	800719a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007194:	f04f 33ff 	mov.w	r3, #4294967295
 8007198:	e024      	b.n	80071e4 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80071a6:	6979      	ldr	r1, [r7, #20]
 80071a8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d00a      	beq.n	80071ca <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80071ba:	2320      	movs	r3, #32
 80071bc:	2205      	movs	r2, #5
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f7ff fde9 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 80071c4:	f04f 33ff 	mov.w	r3, #4294967295
 80071c8:	e00c      	b.n	80071e4 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2202      	movs	r2, #2
 80071ce:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071d6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80071d8:	7afb      	ldrb	r3, [r7, #11]
 80071da:	4619      	mov	r1, r3
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fa2b 	bl	8007638 <SCSI_ProcessRead>
 80071e2:	4603      	mov	r3, r0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	460b      	mov	r3, r1
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	32b0      	adds	r2, #176	@ 0xb0
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <SCSI_Write10+0x2a>
  {
    return -1;
 8007210:	f04f 33ff 	mov.w	r3, #4294967295
 8007214:	e0ba      	b.n	800738c <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	7a1b      	ldrb	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f040 80b0 	bne.w	8007380 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10a      	bne.n	8007240 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007230:	2320      	movs	r3, #32
 8007232:	2205      	movs	r2, #5
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff fdae 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 800723a:	f04f 33ff 	mov.w	r3, #4294967295
 800723e:	e0a5      	b.n	800738c <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007246:	b25b      	sxtb	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	da0a      	bge.n	8007262 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007252:	2320      	movs	r3, #32
 8007254:	2205      	movs	r2, #5
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f7ff fd9d 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 800725c:	f04f 33ff 	mov.w	r3, #4294967295
 8007260:	e094      	b.n	800738c <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	33b0      	adds	r3, #176	@ 0xb0
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	7afa      	ldrb	r2, [r7, #11]
 8007276:	4610      	mov	r0, r2
 8007278:	4798      	blx	r3
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d008      	beq.n	8007292 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007280:	7af9      	ldrb	r1, [r7, #11]
 8007282:	233a      	movs	r3, #58	@ 0x3a
 8007284:	2202      	movs	r2, #2
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f7ff fd85 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
 8007290:	e07c      	b.n	800738c <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	33b0      	adds	r3, #176	@ 0xb0
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	7afa      	ldrb	r2, [r7, #11]
 80072a6:	4610      	mov	r0, r2
 80072a8:	4798      	blx	r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d008      	beq.n	80072c2 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80072b0:	7af9      	ldrb	r1, [r7, #11]
 80072b2:	2327      	movs	r3, #39	@ 0x27
 80072b4:	2202      	movs	r2, #2
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff fd6d 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 80072bc:	f04f 33ff 	mov.w	r3, #4294967295
 80072c0:	e064      	b.n	800738c <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3302      	adds	r3, #2
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3303      	adds	r3, #3
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072d2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3304      	adds	r3, #4
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80072dc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	3205      	adds	r2, #5
 80072e2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80072e4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3307      	adds	r3, #7
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	3208      	adds	r2, #8
 80072f8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80072fa:	431a      	orrs	r2, r3
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800730e:	7af9      	ldrb	r1, [r7, #11]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f964 	bl	80075de <SCSI_CheckAddressRange>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	da02      	bge.n	8007322 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800731c:	f04f 33ff 	mov.w	r3, #4294967295
 8007320:	e034      	b.n	800738c <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800732e:	fb02 f303 	mul.w	r3, r2, r3
 8007332:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	429a      	cmp	r2, r3
 800733e:	d00a      	beq.n	8007356 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007346:	2320      	movs	r3, #32
 8007348:	2205      	movs	r2, #5
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff fd23 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 8007350:	f04f 33ff 	mov.w	r3, #4294967295
 8007354:	e01a      	b.n	800738c <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800735c:	bf28      	it	cs
 800735e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8007362:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2201      	movs	r2, #1
 8007368:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800736a:	4b0a      	ldr	r3, [pc, #40]	@ (8007394 <SCSI_Write10+0x1a8>)
 800736c:	7819      	ldrb	r1, [r3, #0]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f103 0210 	add.w	r2, r3, #16
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f002 fa55 	bl	8009826 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800737c:	2300      	movs	r3, #0
 800737e:	e005      	b.n	800738c <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	4619      	mov	r1, r3
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f9dd 	bl	8007744 <SCSI_ProcessWrite>
 800738a:	4603      	mov	r3, r0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	2000006f 	.word	0x2000006f

08007398 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	460b      	mov	r3, r1
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	32b0      	adds	r2, #176	@ 0xb0
 80073b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <SCSI_Write12+0x2a>
  {
    return -1;
 80073bc:	f04f 33ff 	mov.w	r3, #4294967295
 80073c0:	e0ca      	b.n	8007558 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	7a1b      	ldrb	r3, [r3, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f040 80c0 	bne.w	800754c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80073dc:	2320      	movs	r3, #32
 80073de:	2205      	movs	r2, #5
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7ff fcd8 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	e0b5      	b.n	8007558 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80073f2:	b25b      	sxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da0a      	bge.n	800740e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80073fe:	2320      	movs	r3, #32
 8007400:	2205      	movs	r2, #5
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7ff fcc7 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 8007408:	f04f 33ff 	mov.w	r3, #4294967295
 800740c:	e0a4      	b.n	8007558 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	33b0      	adds	r3, #176	@ 0xb0
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	7afa      	ldrb	r2, [r7, #11]
 8007422:	4610      	mov	r0, r2
 8007424:	4798      	blx	r3
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800742c:	7af9      	ldrb	r1, [r7, #11]
 800742e:	233a      	movs	r3, #58	@ 0x3a
 8007430:	2202      	movs	r2, #2
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff fcaf 	bl	8006d96 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2205      	movs	r2, #5
 800743c:	721a      	strb	r2, [r3, #8]
      return -1;
 800743e:	f04f 33ff 	mov.w	r3, #4294967295
 8007442:	e089      	b.n	8007558 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	33b0      	adds	r3, #176	@ 0xb0
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	7afa      	ldrb	r2, [r7, #11]
 8007458:	4610      	mov	r0, r2
 800745a:	4798      	blx	r3
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007462:	7af9      	ldrb	r1, [r7, #11]
 8007464:	2327      	movs	r3, #39	@ 0x27
 8007466:	2202      	movs	r2, #2
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff fc94 	bl	8006d96 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2205      	movs	r2, #5
 8007472:	721a      	strb	r2, [r3, #8]
      return -1;
 8007474:	f04f 33ff 	mov.w	r3, #4294967295
 8007478:	e06e      	b.n	8007558 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3302      	adds	r3, #2
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3303      	adds	r3, #3
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800748a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3304      	adds	r3, #4
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007494:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	3205      	adds	r2, #5
 800749a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800749c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3306      	adds	r3, #6
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3307      	adds	r3, #7
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80074b4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3308      	adds	r3, #8
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80074be:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	3209      	adds	r2, #9
 80074c4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80074c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80074da:	7af9      	ldrb	r1, [r7, #11]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f87e 	bl	80075de <SCSI_CheckAddressRange>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	da02      	bge.n	80074ee <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80074e8:	f04f 33ff 	mov.w	r3, #4294967295
 80074ec:	e034      	b.n	8007558 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	429a      	cmp	r2, r3
 800750a:	d00a      	beq.n	8007522 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007512:	2320      	movs	r3, #32
 8007514:	2205      	movs	r2, #5
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fc3d 	bl	8006d96 <SCSI_SenseCode>
      return -1;
 800751c:	f04f 33ff 	mov.w	r3, #4294967295
 8007520:	e01a      	b.n	8007558 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007528:	bf28      	it	cs
 800752a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800752e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2201      	movs	r2, #1
 8007534:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8007536:	4b0a      	ldr	r3, [pc, #40]	@ (8007560 <SCSI_Write12+0x1c8>)
 8007538:	7819      	ldrb	r1, [r3, #0]
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f103 0210 	add.w	r2, r3, #16
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f002 f96f 	bl	8009826 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007548:	2300      	movs	r3, #0
 800754a:	e005      	b.n	8007558 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800754c:	7afb      	ldrb	r3, [r7, #11]
 800754e:	4619      	mov	r1, r3
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f8f7 	bl	8007744 <SCSI_ProcessWrite>
 8007556:	4603      	mov	r3, r0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	2000006f 	.word	0x2000006f

08007564 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	460b      	mov	r3, r1
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	32b0      	adds	r2, #176	@ 0xb0
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <SCSI_Verify10+0x2a>
  {
    return -1;
 8007588:	f04f 33ff 	mov.w	r3, #4294967295
 800758c:	e023      	b.n	80075d6 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3301      	adds	r3, #1
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800759c:	7af9      	ldrb	r1, [r7, #11]
 800759e:	2324      	movs	r3, #36	@ 0x24
 80075a0:	2205      	movs	r2, #5
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f7ff fbf7 	bl	8006d96 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80075a8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ac:	e013      	b.n	80075d6 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80075ba:	7af9      	ldrb	r1, [r7, #11]
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 f80e 	bl	80075de <SCSI_CheckAddressRange>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	da02      	bge.n	80075ce <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80075c8:	f04f 33ff 	mov.w	r3, #4294967295
 80075cc:	e003      	b.n	80075d6 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2200      	movs	r2, #0
 80075d2:	60da      	str	r2, [r3, #12]

  return 0;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b086      	sub	sp, #24
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	603b      	str	r3, [r7, #0]
 80075ea:	460b      	mov	r3, r1
 80075ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	32b0      	adds	r2, #176	@ 0xb0
 80075f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8007604:	f04f 33ff 	mov.w	r3, #4294967295
 8007608:	e011      	b.n	800762e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	441a      	add	r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007616:	429a      	cmp	r2, r3
 8007618:	d908      	bls.n	800762c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800761a:	7af9      	ldrb	r1, [r7, #11]
 800761c:	2321      	movs	r3, #33	@ 0x21
 800761e:	2205      	movs	r2, #5
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7ff fbb8 	bl	8006d96 <SCSI_SenseCode>
    return -1;
 8007626:	f04f 33ff 	mov.w	r3, #4294967295
 800762a:	e000      	b.n	800762e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007638:	b590      	push	{r4, r7, lr}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	32b0      	adds	r2, #176	@ 0xb0
 800764e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007652:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800765a:	f04f 33ff 	mov.w	r3, #4294967295
 800765e:	e06a      	b.n	8007736 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800766c:	fb02 f303 	mul.w	r3, r2, r3
 8007670:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007678:	bf28      	it	cs
 800767a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800767e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	33b0      	adds	r3, #176	@ 0xb0
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	691c      	ldr	r4, [r3, #16]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f103 0110 	add.w	r1, r3, #16
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80076a4:	4618      	mov	r0, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	78f8      	ldrb	r0, [r7, #3]
 80076b0:	47a0      	blx	r4
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	da08      	bge.n	80076ca <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80076b8:	78f9      	ldrb	r1, [r7, #3]
 80076ba:	2311      	movs	r3, #17
 80076bc:	2204      	movs	r2, #4
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fb69 	bl	8006d96 <SCSI_SenseCode>
    return -1;
 80076c4:	f04f 33ff 	mov.w	r3, #4294967295
 80076c8:	e035      	b.n	8007736 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80076ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007740 <SCSI_ProcessRead+0x108>)
 80076cc:	7819      	ldrb	r1, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f103 0210 	add.w	r2, r3, #16
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f002 f884 	bl	80097e4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80076e8:	4619      	mov	r1, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80076f0:	441a      	add	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007704:	4619      	mov	r1, r3
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	fbb3 f3f1 	udiv	r3, r3, r1
 800770c:	1ad2      	subs	r2, r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	1ad2      	subs	r2, r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2203      	movs	r2, #3
 8007732:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	bd90      	pop	{r4, r7, pc}
 800773e:	bf00      	nop
 8007740:	2000006e 	.word	0x2000006e

08007744 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007744:	b590      	push	{r4, r7, lr}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	32b0      	adds	r2, #176	@ 0xb0
 800775a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8007766:	f04f 33ff 	mov.w	r3, #4294967295
 800776a:	e07a      	b.n	8007862 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8007778:	fb02 f303 	mul.w	r3, r2, r3
 800777c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007784:	bf28      	it	cs
 8007786:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800778a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	33b0      	adds	r3, #176	@ 0xb0
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	695c      	ldr	r4, [r3, #20]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f103 0110 	add.w	r1, r3, #16
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80077b0:	4618      	mov	r0, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	78f8      	ldrb	r0, [r7, #3]
 80077bc:	47a0      	blx	r4
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	da08      	bge.n	80077d6 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80077c4:	78f9      	ldrb	r1, [r7, #3]
 80077c6:	2303      	movs	r3, #3
 80077c8:	2204      	movs	r2, #4
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff fae3 	bl	8006d96 <SCSI_SenseCode>
    return -1;
 80077d0:	f04f 33ff 	mov.w	r3, #4294967295
 80077d4:	e045      	b.n	8007862 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80077e2:	4619      	mov	r1, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80077ea:	441a      	add	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80077fe:	4619      	mov	r1, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	fbb3 f3f1 	udiv	r3, r3, r1
 8007806:	1ad2      	subs	r2, r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	1ad2      	subs	r2, r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007828:	2100      	movs	r1, #0
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fe fce8 	bl	8006200 <MSC_BOT_SendCSW>
 8007830:	e016      	b.n	8007860 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800783e:	fb02 f303 	mul.w	r3, r2, r3
 8007842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007846:	bf28      	it	cs
 8007848:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800784c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800784e:	4b07      	ldr	r3, [pc, #28]	@ (800786c <SCSI_ProcessWrite+0x128>)
 8007850:	7819      	ldrb	r1, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f103 0210 	add.w	r2, r3, #16
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 ffe3 	bl	8009826 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	bd90      	pop	{r4, r7, pc}
 800786a:	bf00      	nop
 800786c:	2000006f 	.word	0x2000006f

08007870 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8007870:	b480      	push	{r7}
 8007872:	b087      	sub	sp, #28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800787e:	88fb      	ldrh	r3, [r7, #6]
 8007880:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8007888:	f04f 33ff 	mov.w	r3, #4294967295
 800788c:	e013      	b.n	80078b6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800788e:	8afa      	ldrh	r2, [r7, #22]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8007894:	e00b      	b.n	80078ae <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8007896:	8afb      	ldrh	r3, [r7, #22]
 8007898:	3b01      	subs	r3, #1
 800789a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800789c:	8afb      	ldrh	r3, [r7, #22]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	441a      	add	r2, r3
 80078a2:	8afb      	ldrh	r3, [r7, #22]
 80078a4:	7811      	ldrb	r1, [r2, #0]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	460a      	mov	r2, r1
 80078ac:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80078ae:	8afb      	ldrh	r3, [r7, #22]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f0      	bne.n	8007896 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b086      	sub	sp, #24
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	4613      	mov	r3, r2
 80078ce:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e01f      	b.n	800791a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	79fa      	ldrb	r2, [r7, #7]
 800790c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f001 fe14 	bl	800953c <USBD_LL_Init>
 8007914:	4603      	mov	r3, r0
 8007916:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007918:	7dfb      	ldrb	r3, [r7, #23]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007936:	2303      	movs	r3, #3
 8007938:	e025      	b.n	8007986 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	32ae      	adds	r2, #174	@ 0xae
 800794c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00f      	beq.n	8007976 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	32ae      	adds	r2, #174	@ 0xae
 8007960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	f107 020e 	add.w	r2, r7, #14
 800796a:	4610      	mov	r0, r2
 800796c:	4798      	blx	r3
 800796e:	4602      	mov	r2, r0
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 fe1c 	bl	80095d4 <USBD_LL_Start>
 800799c:	4603      	mov	r3, r0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079ae:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	4611      	mov	r1, r2
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
 80079e6:	4603      	mov	r3, r0
 80079e8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	78fa      	ldrb	r2, [r7, #3]
 8007a0e:	4611      	mov	r1, r2
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 f935 	bl	8008caa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007a4e:	461a      	mov	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d01a      	beq.n	8007a9a <USBD_LL_SetupStage+0x72>
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d822      	bhi.n	8007aae <USBD_LL_SetupStage+0x86>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <USBD_LL_SetupStage+0x4a>
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d00a      	beq.n	8007a86 <USBD_LL_SetupStage+0x5e>
 8007a70:	e01d      	b.n	8007aae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fb62 	bl	8008144 <USBD_StdDevReq>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]
      break;
 8007a84:	e020      	b.n	8007ac8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fbca 	bl	8008228 <USBD_StdItfReq>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]
      break;
 8007a98:	e016      	b.n	8007ac8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fc2c 	bl	8008300 <USBD_StdEPReq>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007aac:	e00c      	b.n	8007ac8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007ab4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 fe08 	bl	80096d2 <USBD_LL_StallEP>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac6:	bf00      	nop
  }

  return ret;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b086      	sub	sp, #24
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	460b      	mov	r3, r1
 8007adc:	607a      	str	r2, [r7, #4]
 8007ade:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007ae4:	7afb      	ldrb	r3, [r7, #11]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d16e      	bne.n	8007bc8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007af0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	f040 8098 	bne.w	8007c2e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d913      	bls.n	8007b32 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	1ad2      	subs	r2, r2, r3
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	4293      	cmp	r3, r2
 8007b22:	bf28      	it	cs
 8007b24:	4613      	movcs	r3, r2
 8007b26:	461a      	mov	r2, r3
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f001 f9a0 	bl	8008e70 <USBD_CtlContinueRx>
 8007b30:	e07d      	b.n	8007c2e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d014      	beq.n	8007b6a <USBD_LL_DataOutStage+0x98>
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d81d      	bhi.n	8007b80 <USBD_LL_DataOutStage+0xae>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <USBD_LL_DataOutStage+0x7c>
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d003      	beq.n	8007b54 <USBD_LL_DataOutStage+0x82>
 8007b4c:	e018      	b.n	8007b80 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75bb      	strb	r3, [r7, #22]
            break;
 8007b52:	e018      	b.n	8007b86 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fa64 	bl	800802c <USBD_CoreFindIF>
 8007b64:	4603      	mov	r3, r0
 8007b66:	75bb      	strb	r3, [r7, #22]
            break;
 8007b68:	e00d      	b.n	8007b86 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	4619      	mov	r1, r3
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fa66 	bl	8008046 <USBD_CoreFindEP>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75bb      	strb	r3, [r7, #22]
            break;
 8007b7e:	e002      	b.n	8007b86 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75bb      	strb	r3, [r7, #22]
            break;
 8007b84:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b86:	7dbb      	ldrb	r3, [r7, #22]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d119      	bne.n	8007bc0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d113      	bne.n	8007bc0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b98:	7dba      	ldrb	r2, [r7, #22]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	32ae      	adds	r2, #174	@ 0xae
 8007b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007ba8:	7dba      	ldrb	r2, [r7, #22]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007bb0:	7dba      	ldrb	r2, [r7, #22]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	32ae      	adds	r2, #174	@ 0xae
 8007bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f001 f966 	bl	8008e92 <USBD_CtlSendStatus>
 8007bc6:	e032      	b.n	8007c2e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fa37 	bl	8008046 <USBD_CoreFindEP>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bdc:	7dbb      	ldrb	r3, [r7, #22]
 8007bde:	2bff      	cmp	r3, #255	@ 0xff
 8007be0:	d025      	beq.n	8007c2e <USBD_LL_DataOutStage+0x15c>
 8007be2:	7dbb      	ldrb	r3, [r7, #22]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d122      	bne.n	8007c2e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d117      	bne.n	8007c24 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007bf4:	7dba      	ldrb	r2, [r7, #22]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	32ae      	adds	r2, #174	@ 0xae
 8007bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00f      	beq.n	8007c24 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007c04:	7dba      	ldrb	r2, [r7, #22]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c0c:	7dba      	ldrb	r2, [r7, #22]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	32ae      	adds	r2, #174	@ 0xae
 8007c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	7afa      	ldrb	r2, [r7, #11]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	4798      	blx	r3
 8007c20:	4603      	mov	r3, r0
 8007c22:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	e000      	b.n	8007c30 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	460b      	mov	r3, r1
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d16f      	bne.n	8007d2c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3314      	adds	r3, #20
 8007c50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d15a      	bne.n	8007d12 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d914      	bls.n	8007c92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	1ad2      	subs	r2, r2, r3
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f001 f8e5 	bl	8008e4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c84:	2300      	movs	r3, #0
 8007c86:	2200      	movs	r2, #0
 8007c88:	2100      	movs	r1, #0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f001 fdcb 	bl	8009826 <USBD_LL_PrepareReceive>
 8007c90:	e03f      	b.n	8007d12 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d11c      	bne.n	8007cd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d316      	bcc.n	8007cd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d20f      	bcs.n	8007cd8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2100      	movs	r1, #0
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f001 f8c6 	bl	8008e4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f001 fda8 	bl	8009826 <USBD_LL_PrepareReceive>
 8007cd6:	e01c      	b.n	8007d12 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d10f      	bne.n	8007d04 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d009      	beq.n	8007d04 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d04:	2180      	movs	r1, #128	@ 0x80
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f001 fce3 	bl	80096d2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f001 f8d3 	bl	8008eb8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d03a      	beq.n	8007d92 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff fe42 	bl	80079a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007d2a:	e032      	b.n	8007d92 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d2c:	7afb      	ldrb	r3, [r7, #11]
 8007d2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	4619      	mov	r1, r3
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f985 	bl	8008046 <USBD_CoreFindEP>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	2bff      	cmp	r3, #255	@ 0xff
 8007d44:	d025      	beq.n	8007d92 <USBD_LL_DataInStage+0x15a>
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d122      	bne.n	8007d92 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d11c      	bne.n	8007d92 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007d58:	7dfa      	ldrb	r2, [r7, #23]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	32ae      	adds	r2, #174	@ 0xae
 8007d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d014      	beq.n	8007d92 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007d68:	7dfa      	ldrb	r2, [r7, #23]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d70:	7dfa      	ldrb	r2, [r7, #23]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	32ae      	adds	r2, #174	@ 0xae
 8007d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	7afa      	ldrb	r2, [r7, #11]
 8007d7e:	4611      	mov	r1, r2
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	4798      	blx	r3
 8007d84:	4603      	mov	r3, r0
 8007d86:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d88:	7dbb      	ldrb	r3, [r7, #22]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007d8e:	7dbb      	ldrb	r3, [r7, #22]
 8007d90:	e000      	b.n	8007d94 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d014      	beq.n	8007e02 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00e      	beq.n	8007e02 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6852      	ldr	r2, [r2, #4]
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	4611      	mov	r1, r2
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	4798      	blx	r3
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e02:	2340      	movs	r3, #64	@ 0x40
 8007e04:	2200      	movs	r2, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 fbfe 	bl	800960a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2240      	movs	r2, #64	@ 0x40
 8007e1a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e1e:	2340      	movs	r3, #64	@ 0x40
 8007e20:	2200      	movs	r2, #0
 8007e22:	2180      	movs	r1, #128	@ 0x80
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fbf0 	bl	800960a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2240      	movs	r2, #64	@ 0x40
 8007e34:	621a      	str	r2, [r3, #32]

  return ret;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d006      	beq.n	8007e82 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2204      	movs	r2, #4
 8007e86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d106      	bne.n	8007eba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d110      	bne.n	8007efe <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	32ae      	adds	r2, #174	@ 0xae
 8007f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e01c      	b.n	8007f64 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d115      	bne.n	8007f62 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	32ae      	adds	r2, #174	@ 0xae
 8007f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	32ae      	adds	r2, #174	@ 0xae
 8007f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	32ae      	adds	r2, #174	@ 0xae
 8007f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e01c      	b.n	8007fc8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d115      	bne.n	8007fc6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	32ae      	adds	r2, #174	@ 0xae
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	32ae      	adds	r2, #174	@ 0xae
 8007fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbe:	78fa      	ldrb	r2, [r7, #3]
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00e      	beq.n	8008022 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6852      	ldr	r2, [r2, #4]
 8008010:	b2d2      	uxtb	r2, r2
 8008012:	4611      	mov	r1, r2
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800801e:	2303      	movs	r3, #3
 8008020:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008022:	7bfb      	ldrb	r3, [r7, #15]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008038:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008052:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008074:	2300      	movs	r3, #0
 8008076:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	885b      	ldrh	r3, [r3, #2]
 800807c:	b29b      	uxth	r3, r3
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	7812      	ldrb	r2, [r2, #0]
 8008082:	4293      	cmp	r3, r2
 8008084:	d91f      	bls.n	80080c6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800808c:	e013      	b.n	80080b6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800808e:	f107 030a 	add.w	r3, r7, #10
 8008092:	4619      	mov	r1, r3
 8008094:	6978      	ldr	r0, [r7, #20]
 8008096:	f000 f81b 	bl	80080d0 <USBD_GetNextDesc>
 800809a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	2b05      	cmp	r3, #5
 80080a2:	d108      	bne.n	80080b6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	789b      	ldrb	r3, [r3, #2]
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d008      	beq.n	80080c4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	885b      	ldrh	r3, [r3, #2]
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	897b      	ldrh	r3, [r7, #10]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d8e5      	bhi.n	800808e <USBD_GetEpDesc+0x2e>
 80080c2:	e000      	b.n	80080c6 <USBD_GetEpDesc+0x66>
          break;
 80080c4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80080c6:	693b      	ldr	r3, [r7, #16]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	7812      	ldrb	r2, [r2, #0]
 80080e6:	4413      	add	r3, r2
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4413      	add	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080fa:	68fb      	ldr	r3, [r7, #12]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	3301      	adds	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008126:	8a3b      	ldrh	r3, [r7, #16]
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	b21a      	sxth	r2, r3
 800812c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008130:	4313      	orrs	r3, r2
 8008132:	b21b      	sxth	r3, r3
 8008134:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008136:	89fb      	ldrh	r3, [r7, #14]
}
 8008138:	4618      	mov	r0, r3
 800813a:	371c      	adds	r7, #28
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800815a:	2b40      	cmp	r3, #64	@ 0x40
 800815c:	d005      	beq.n	800816a <USBD_StdDevReq+0x26>
 800815e:	2b40      	cmp	r3, #64	@ 0x40
 8008160:	d857      	bhi.n	8008212 <USBD_StdDevReq+0xce>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00f      	beq.n	8008186 <USBD_StdDevReq+0x42>
 8008166:	2b20      	cmp	r3, #32
 8008168:	d153      	bne.n	8008212 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	32ae      	adds	r2, #174	@ 0xae
 8008174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	4798      	blx	r3
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]
      break;
 8008184:	e04a      	b.n	800821c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	785b      	ldrb	r3, [r3, #1]
 800818a:	2b09      	cmp	r3, #9
 800818c:	d83b      	bhi.n	8008206 <USBD_StdDevReq+0xc2>
 800818e:	a201      	add	r2, pc, #4	@ (adr r2, 8008194 <USBD_StdDevReq+0x50>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081e9 	.word	0x080081e9
 8008198:	080081fd 	.word	0x080081fd
 800819c:	08008207 	.word	0x08008207
 80081a0:	080081f3 	.word	0x080081f3
 80081a4:	08008207 	.word	0x08008207
 80081a8:	080081c7 	.word	0x080081c7
 80081ac:	080081bd 	.word	0x080081bd
 80081b0:	08008207 	.word	0x08008207
 80081b4:	080081df 	.word	0x080081df
 80081b8:	080081d1 	.word	0x080081d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa3c 	bl	800863c <USBD_GetDescriptor>
          break;
 80081c4:	e024      	b.n	8008210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fbcb 	bl	8008964 <USBD_SetAddress>
          break;
 80081ce:	e01f      	b.n	8008210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fc0a 	bl	80089ec <USBD_SetConfig>
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
          break;
 80081dc:	e018      	b.n	8008210 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fcad 	bl	8008b40 <USBD_GetConfig>
          break;
 80081e6:	e013      	b.n	8008210 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fcde 	bl	8008bac <USBD_GetStatus>
          break;
 80081f0:	e00e      	b.n	8008210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fd0d 	bl	8008c14 <USBD_SetFeature>
          break;
 80081fa:	e009      	b.n	8008210 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fd31 	bl	8008c66 <USBD_ClrFeature>
          break;
 8008204:	e004      	b.n	8008210 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fd88 	bl	8008d1e <USBD_CtlError>
          break;
 800820e:	bf00      	nop
      }
      break;
 8008210:	e004      	b.n	800821c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fd82 	bl	8008d1e <USBD_CtlError>
      break;
 800821a:	bf00      	nop
  }

  return ret;
 800821c:	7bfb      	ldrb	r3, [r7, #15]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop

08008228 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800823e:	2b40      	cmp	r3, #64	@ 0x40
 8008240:	d005      	beq.n	800824e <USBD_StdItfReq+0x26>
 8008242:	2b40      	cmp	r3, #64	@ 0x40
 8008244:	d852      	bhi.n	80082ec <USBD_StdItfReq+0xc4>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <USBD_StdItfReq+0x26>
 800824a:	2b20      	cmp	r3, #32
 800824c:	d14e      	bne.n	80082ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008254:	b2db      	uxtb	r3, r3
 8008256:	3b01      	subs	r3, #1
 8008258:	2b02      	cmp	r3, #2
 800825a:	d840      	bhi.n	80082de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	889b      	ldrh	r3, [r3, #4]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b01      	cmp	r3, #1
 8008264:	d836      	bhi.n	80082d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	889b      	ldrh	r3, [r3, #4]
 800826a:	b2db      	uxtb	r3, r3
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff fedc 	bl	800802c <USBD_CoreFindIF>
 8008274:	4603      	mov	r3, r0
 8008276:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	2bff      	cmp	r3, #255	@ 0xff
 800827c:	d01d      	beq.n	80082ba <USBD_StdItfReq+0x92>
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d11a      	bne.n	80082ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008284:	7bba      	ldrb	r2, [r7, #14]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	32ae      	adds	r2, #174	@ 0xae
 800828a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00f      	beq.n	80082b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008294:	7bba      	ldrb	r2, [r7, #14]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800829c:	7bba      	ldrb	r2, [r7, #14]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	32ae      	adds	r2, #174	@ 0xae
 80082a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
 80082ae:	4603      	mov	r3, r0
 80082b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082b2:	e004      	b.n	80082be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80082b4:	2303      	movs	r3, #3
 80082b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082b8:	e001      	b.n	80082be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80082ba:	2303      	movs	r3, #3
 80082bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	88db      	ldrh	r3, [r3, #6]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d110      	bne.n	80082e8 <USBD_StdItfReq+0xc0>
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10d      	bne.n	80082e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fde0 	bl	8008e92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082d2:	e009      	b.n	80082e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fd21 	bl	8008d1e <USBD_CtlError>
          break;
 80082dc:	e004      	b.n	80082e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fd1c 	bl	8008d1e <USBD_CtlError>
          break;
 80082e6:	e000      	b.n	80082ea <USBD_StdItfReq+0xc2>
          break;
 80082e8:	bf00      	nop
      }
      break;
 80082ea:	e004      	b.n	80082f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fd15 	bl	8008d1e <USBD_CtlError>
      break;
 80082f4:	bf00      	nop
  }

  return ret;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	889b      	ldrh	r3, [r3, #4]
 8008312:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800831c:	2b40      	cmp	r3, #64	@ 0x40
 800831e:	d007      	beq.n	8008330 <USBD_StdEPReq+0x30>
 8008320:	2b40      	cmp	r3, #64	@ 0x40
 8008322:	f200 817f 	bhi.w	8008624 <USBD_StdEPReq+0x324>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d02a      	beq.n	8008380 <USBD_StdEPReq+0x80>
 800832a:	2b20      	cmp	r3, #32
 800832c:	f040 817a 	bne.w	8008624 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff fe86 	bl	8008046 <USBD_CoreFindEP>
 800833a:	4603      	mov	r3, r0
 800833c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800833e:	7b7b      	ldrb	r3, [r7, #13]
 8008340:	2bff      	cmp	r3, #255	@ 0xff
 8008342:	f000 8174 	beq.w	800862e <USBD_StdEPReq+0x32e>
 8008346:	7b7b      	ldrb	r3, [r7, #13]
 8008348:	2b00      	cmp	r3, #0
 800834a:	f040 8170 	bne.w	800862e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800834e:	7b7a      	ldrb	r2, [r7, #13]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008356:	7b7a      	ldrb	r2, [r7, #13]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	32ae      	adds	r2, #174	@ 0xae
 800835c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 8163 	beq.w	800862e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008368:	7b7a      	ldrb	r2, [r7, #13]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	32ae      	adds	r2, #174	@ 0xae
 800836e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
 800837a:	4603      	mov	r3, r0
 800837c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800837e:	e156      	b.n	800862e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	785b      	ldrb	r3, [r3, #1]
 8008384:	2b03      	cmp	r3, #3
 8008386:	d008      	beq.n	800839a <USBD_StdEPReq+0x9a>
 8008388:	2b03      	cmp	r3, #3
 800838a:	f300 8145 	bgt.w	8008618 <USBD_StdEPReq+0x318>
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 809b 	beq.w	80084ca <USBD_StdEPReq+0x1ca>
 8008394:	2b01      	cmp	r3, #1
 8008396:	d03c      	beq.n	8008412 <USBD_StdEPReq+0x112>
 8008398:	e13e      	b.n	8008618 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d002      	beq.n	80083ac <USBD_StdEPReq+0xac>
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d016      	beq.n	80083d8 <USBD_StdEPReq+0xd8>
 80083aa:	e02c      	b.n	8008406 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00d      	beq.n	80083ce <USBD_StdEPReq+0xce>
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	2b80      	cmp	r3, #128	@ 0x80
 80083b6:	d00a      	beq.n	80083ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 f988 	bl	80096d2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083c2:	2180      	movs	r1, #128	@ 0x80
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 f984 	bl	80096d2 <USBD_LL_StallEP>
 80083ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083cc:	e020      	b.n	8008410 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fca4 	bl	8008d1e <USBD_CtlError>
              break;
 80083d6:	e01b      	b.n	8008410 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	885b      	ldrh	r3, [r3, #2]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10e      	bne.n	80083fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00b      	beq.n	80083fe <USBD_StdEPReq+0xfe>
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	2b80      	cmp	r3, #128	@ 0x80
 80083ea:	d008      	beq.n	80083fe <USBD_StdEPReq+0xfe>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	88db      	ldrh	r3, [r3, #6]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d104      	bne.n	80083fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 f96a 	bl	80096d2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fd47 	bl	8008e92 <USBD_CtlSendStatus>

              break;
 8008404:	e004      	b.n	8008410 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fc88 	bl	8008d1e <USBD_CtlError>
              break;
 800840e:	bf00      	nop
          }
          break;
 8008410:	e107      	b.n	8008622 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b02      	cmp	r3, #2
 800841c:	d002      	beq.n	8008424 <USBD_StdEPReq+0x124>
 800841e:	2b03      	cmp	r3, #3
 8008420:	d016      	beq.n	8008450 <USBD_StdEPReq+0x150>
 8008422:	e04b      	b.n	80084bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00d      	beq.n	8008446 <USBD_StdEPReq+0x146>
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b80      	cmp	r3, #128	@ 0x80
 800842e:	d00a      	beq.n	8008446 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f94c 	bl	80096d2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800843a:	2180      	movs	r1, #128	@ 0x80
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 f948 	bl	80096d2 <USBD_LL_StallEP>
 8008442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008444:	e040      	b.n	80084c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fc68 	bl	8008d1e <USBD_CtlError>
              break;
 800844e:	e03b      	b.n	80084c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	885b      	ldrh	r3, [r3, #2]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d136      	bne.n	80084c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800845e:	2b00      	cmp	r3, #0
 8008460:	d004      	beq.n	800846c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 f952 	bl	8009710 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fd10 	bl	8008e92 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff fde5 	bl	8008046 <USBD_CoreFindEP>
 800847c:	4603      	mov	r3, r0
 800847e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008480:	7b7b      	ldrb	r3, [r7, #13]
 8008482:	2bff      	cmp	r3, #255	@ 0xff
 8008484:	d01f      	beq.n	80084c6 <USBD_StdEPReq+0x1c6>
 8008486:	7b7b      	ldrb	r3, [r7, #13]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d11c      	bne.n	80084c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800848c:	7b7a      	ldrb	r2, [r7, #13]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008494:	7b7a      	ldrb	r2, [r7, #13]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	32ae      	adds	r2, #174	@ 0xae
 800849a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d010      	beq.n	80084c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084a4:	7b7a      	ldrb	r2, [r7, #13]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	32ae      	adds	r2, #174	@ 0xae
 80084aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	4798      	blx	r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80084ba:	e004      	b.n	80084c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fc2d 	bl	8008d1e <USBD_CtlError>
              break;
 80084c4:	e000      	b.n	80084c8 <USBD_StdEPReq+0x1c8>
              break;
 80084c6:	bf00      	nop
          }
          break;
 80084c8:	e0ab      	b.n	8008622 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d002      	beq.n	80084dc <USBD_StdEPReq+0x1dc>
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d032      	beq.n	8008540 <USBD_StdEPReq+0x240>
 80084da:	e097      	b.n	800860c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d007      	beq.n	80084f2 <USBD_StdEPReq+0x1f2>
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b80      	cmp	r3, #128	@ 0x80
 80084e6:	d004      	beq.n	80084f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fc17 	bl	8008d1e <USBD_CtlError>
                break;
 80084f0:	e091      	b.n	8008616 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	da0b      	bge.n	8008512 <USBD_StdEPReq+0x212>
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	3310      	adds	r3, #16
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	3304      	adds	r3, #4
 8008510:	e00b      	b.n	800852a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	4413      	add	r3, r2
 8008528:	3304      	adds	r3, #4
 800852a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2200      	movs	r2, #0
 8008530:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2202      	movs	r2, #2
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fc6d 	bl	8008e18 <USBD_CtlSendData>
              break;
 800853e:	e06a      	b.n	8008616 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008544:	2b00      	cmp	r3, #0
 8008546:	da11      	bge.n	800856c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	f003 020f 	and.w	r2, r3, #15
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	3324      	adds	r3, #36	@ 0x24
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d117      	bne.n	8008592 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fbda 	bl	8008d1e <USBD_CtlError>
                  break;
 800856a:	e054      	b.n	8008616 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	f003 020f 	and.w	r2, r3, #15
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	4613      	mov	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	440b      	add	r3, r1
 800857e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fbc7 	bl	8008d1e <USBD_CtlError>
                  break;
 8008590:	e041      	b.n	8008616 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008592:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008596:	2b00      	cmp	r3, #0
 8008598:	da0b      	bge.n	80085b2 <USBD_StdEPReq+0x2b2>
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	3310      	adds	r3, #16
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	3304      	adds	r3, #4
 80085b0:	e00b      	b.n	80085ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	4413      	add	r3, r2
 80085c8:	3304      	adds	r3, #4
 80085ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <USBD_StdEPReq+0x2d8>
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	2b80      	cmp	r3, #128	@ 0x80
 80085d6:	d103      	bne.n	80085e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e00e      	b.n	80085fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f8b2 	bl	800974e <USBD_LL_IsStallEP>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2201      	movs	r2, #1
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	e002      	b.n	80085fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2202      	movs	r2, #2
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fc07 	bl	8008e18 <USBD_CtlSendData>
              break;
 800860a:	e004      	b.n	8008616 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fb85 	bl	8008d1e <USBD_CtlError>
              break;
 8008614:	bf00      	nop
          }
          break;
 8008616:	e004      	b.n	8008622 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fb7f 	bl	8008d1e <USBD_CtlError>
          break;
 8008620:	bf00      	nop
      }
      break;
 8008622:	e005      	b.n	8008630 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fb79 	bl	8008d1e <USBD_CtlError>
      break;
 800862c:	e000      	b.n	8008630 <USBD_StdEPReq+0x330>
      break;
 800862e:	bf00      	nop
  }

  return ret;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	885b      	ldrh	r3, [r3, #2]
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	2b0e      	cmp	r3, #14
 800865e:	f200 8152 	bhi.w	8008906 <USBD_GetDescriptor+0x2ca>
 8008662:	a201      	add	r2, pc, #4	@ (adr r2, 8008668 <USBD_GetDescriptor+0x2c>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	080086d9 	.word	0x080086d9
 800866c:	080086f1 	.word	0x080086f1
 8008670:	08008731 	.word	0x08008731
 8008674:	08008907 	.word	0x08008907
 8008678:	08008907 	.word	0x08008907
 800867c:	080088a7 	.word	0x080088a7
 8008680:	080088d3 	.word	0x080088d3
 8008684:	08008907 	.word	0x08008907
 8008688:	08008907 	.word	0x08008907
 800868c:	08008907 	.word	0x08008907
 8008690:	08008907 	.word	0x08008907
 8008694:	08008907 	.word	0x08008907
 8008698:	08008907 	.word	0x08008907
 800869c:	08008907 	.word	0x08008907
 80086a0:	080086a5 	.word	0x080086a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00b      	beq.n	80086c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	7c12      	ldrb	r2, [r2, #16]
 80086bc:	f107 0108 	add.w	r1, r7, #8
 80086c0:	4610      	mov	r0, r2
 80086c2:	4798      	blx	r3
 80086c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086c6:	e126      	b.n	8008916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fb27 	bl	8008d1e <USBD_CtlError>
        err++;
 80086d0:	7afb      	ldrb	r3, [r7, #11]
 80086d2:	3301      	adds	r3, #1
 80086d4:	72fb      	strb	r3, [r7, #11]
      break;
 80086d6:	e11e      	b.n	8008916 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	7c12      	ldrb	r2, [r2, #16]
 80086e4:	f107 0108 	add.w	r1, r7, #8
 80086e8:	4610      	mov	r0, r2
 80086ea:	4798      	blx	r3
 80086ec:	60f8      	str	r0, [r7, #12]
      break;
 80086ee:	e112      	b.n	8008916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7c1b      	ldrb	r3, [r3, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10d      	bne.n	8008714 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008700:	f107 0208 	add.w	r2, r7, #8
 8008704:	4610      	mov	r0, r2
 8008706:	4798      	blx	r3
 8008708:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3301      	adds	r3, #1
 800870e:	2202      	movs	r2, #2
 8008710:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008712:	e100      	b.n	8008916 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800871a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871c:	f107 0208 	add.w	r2, r7, #8
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
 8008724:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3301      	adds	r3, #1
 800872a:	2202      	movs	r2, #2
 800872c:	701a      	strb	r2, [r3, #0]
      break;
 800872e:	e0f2      	b.n	8008916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	885b      	ldrh	r3, [r3, #2]
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b05      	cmp	r3, #5
 8008738:	f200 80ac 	bhi.w	8008894 <USBD_GetDescriptor+0x258>
 800873c:	a201      	add	r2, pc, #4	@ (adr r2, 8008744 <USBD_GetDescriptor+0x108>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	0800875d 	.word	0x0800875d
 8008748:	08008791 	.word	0x08008791
 800874c:	080087c5 	.word	0x080087c5
 8008750:	080087f9 	.word	0x080087f9
 8008754:	0800882d 	.word	0x0800882d
 8008758:	08008861 	.word	0x08008861
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	7c12      	ldrb	r2, [r2, #16]
 8008774:	f107 0108 	add.w	r1, r7, #8
 8008778:	4610      	mov	r0, r2
 800877a:	4798      	blx	r3
 800877c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800877e:	e091      	b.n	80088a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 facb 	bl	8008d1e <USBD_CtlError>
            err++;
 8008788:	7afb      	ldrb	r3, [r7, #11]
 800878a:	3301      	adds	r3, #1
 800878c:	72fb      	strb	r3, [r7, #11]
          break;
 800878e:	e089      	b.n	80088a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	7c12      	ldrb	r2, [r2, #16]
 80087a8:	f107 0108 	add.w	r1, r7, #8
 80087ac:	4610      	mov	r0, r2
 80087ae:	4798      	blx	r3
 80087b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087b2:	e077      	b.n	80088a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fab1 	bl	8008d1e <USBD_CtlError>
            err++;
 80087bc:	7afb      	ldrb	r3, [r7, #11]
 80087be:	3301      	adds	r3, #1
 80087c0:	72fb      	strb	r3, [r7, #11]
          break;
 80087c2:	e06f      	b.n	80088a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00b      	beq.n	80087e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	7c12      	ldrb	r2, [r2, #16]
 80087dc:	f107 0108 	add.w	r1, r7, #8
 80087e0:	4610      	mov	r0, r2
 80087e2:	4798      	blx	r3
 80087e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087e6:	e05d      	b.n	80088a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fa97 	bl	8008d1e <USBD_CtlError>
            err++;
 80087f0:	7afb      	ldrb	r3, [r7, #11]
 80087f2:	3301      	adds	r3, #1
 80087f4:	72fb      	strb	r3, [r7, #11]
          break;
 80087f6:	e055      	b.n	80088a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00b      	beq.n	800881c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	7c12      	ldrb	r2, [r2, #16]
 8008810:	f107 0108 	add.w	r1, r7, #8
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
 8008818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800881a:	e043      	b.n	80088a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa7d 	bl	8008d1e <USBD_CtlError>
            err++;
 8008824:	7afb      	ldrb	r3, [r7, #11]
 8008826:	3301      	adds	r3, #1
 8008828:	72fb      	strb	r3, [r7, #11]
          break;
 800882a:	e03b      	b.n	80088a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00b      	beq.n	8008850 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	7c12      	ldrb	r2, [r2, #16]
 8008844:	f107 0108 	add.w	r1, r7, #8
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
 800884c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800884e:	e029      	b.n	80088a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa63 	bl	8008d1e <USBD_CtlError>
            err++;
 8008858:	7afb      	ldrb	r3, [r7, #11]
 800885a:	3301      	adds	r3, #1
 800885c:	72fb      	strb	r3, [r7, #11]
          break;
 800885e:	e021      	b.n	80088a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00b      	beq.n	8008884 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	7c12      	ldrb	r2, [r2, #16]
 8008878:	f107 0108 	add.w	r1, r7, #8
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
 8008880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008882:	e00f      	b.n	80088a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fa49 	bl	8008d1e <USBD_CtlError>
            err++;
 800888c:	7afb      	ldrb	r3, [r7, #11]
 800888e:	3301      	adds	r3, #1
 8008890:	72fb      	strb	r3, [r7, #11]
          break;
 8008892:	e007      	b.n	80088a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fa41 	bl	8008d1e <USBD_CtlError>
          err++;
 800889c:	7afb      	ldrb	r3, [r7, #11]
 800889e:	3301      	adds	r3, #1
 80088a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088a2:	bf00      	nop
      }
      break;
 80088a4:	e037      	b.n	8008916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	7c1b      	ldrb	r3, [r3, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d109      	bne.n	80088c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b6:	f107 0208 	add.w	r2, r7, #8
 80088ba:	4610      	mov	r0, r2
 80088bc:	4798      	blx	r3
 80088be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088c0:	e029      	b.n	8008916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fa2a 	bl	8008d1e <USBD_CtlError>
        err++;
 80088ca:	7afb      	ldrb	r3, [r7, #11]
 80088cc:	3301      	adds	r3, #1
 80088ce:	72fb      	strb	r3, [r7, #11]
      break;
 80088d0:	e021      	b.n	8008916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	7c1b      	ldrb	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10d      	bne.n	80088f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e2:	f107 0208 	add.w	r2, r7, #8
 80088e6:	4610      	mov	r0, r2
 80088e8:	4798      	blx	r3
 80088ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3301      	adds	r3, #1
 80088f0:	2207      	movs	r2, #7
 80088f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088f4:	e00f      	b.n	8008916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fa10 	bl	8008d1e <USBD_CtlError>
        err++;
 80088fe:	7afb      	ldrb	r3, [r7, #11]
 8008900:	3301      	adds	r3, #1
 8008902:	72fb      	strb	r3, [r7, #11]
      break;
 8008904:	e007      	b.n	8008916 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fa08 	bl	8008d1e <USBD_CtlError>
      err++;
 800890e:	7afb      	ldrb	r3, [r7, #11]
 8008910:	3301      	adds	r3, #1
 8008912:	72fb      	strb	r3, [r7, #11]
      break;
 8008914:	bf00      	nop
  }

  if (err != 0U)
 8008916:	7afb      	ldrb	r3, [r7, #11]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d11e      	bne.n	800895a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	88db      	ldrh	r3, [r3, #6]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d016      	beq.n	8008952 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008924:	893b      	ldrh	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00e      	beq.n	8008948 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	88da      	ldrh	r2, [r3, #6]
 800892e:	893b      	ldrh	r3, [r7, #8]
 8008930:	4293      	cmp	r3, r2
 8008932:	bf28      	it	cs
 8008934:	4613      	movcs	r3, r2
 8008936:	b29b      	uxth	r3, r3
 8008938:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800893a:	893b      	ldrh	r3, [r7, #8]
 800893c:	461a      	mov	r2, r3
 800893e:	68f9      	ldr	r1, [r7, #12]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fa69 	bl	8008e18 <USBD_CtlSendData>
 8008946:	e009      	b.n	800895c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f9e7 	bl	8008d1e <USBD_CtlError>
 8008950:	e004      	b.n	800895c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fa9d 	bl	8008e92 <USBD_CtlSendStatus>
 8008958:	e000      	b.n	800895c <USBD_GetDescriptor+0x320>
    return;
 800895a:	bf00      	nop
  }
}
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop

08008964 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	889b      	ldrh	r3, [r3, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d131      	bne.n	80089da <USBD_SetAddress+0x76>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	88db      	ldrh	r3, [r3, #6]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d12d      	bne.n	80089da <USBD_SetAddress+0x76>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	885b      	ldrh	r3, [r3, #2]
 8008982:	2b7f      	cmp	r3, #127	@ 0x7f
 8008984:	d829      	bhi.n	80089da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	885b      	ldrh	r3, [r3, #2]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008990:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b03      	cmp	r3, #3
 800899c:	d104      	bne.n	80089a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f9bc 	bl	8008d1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a6:	e01d      	b.n	80089e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	7bfa      	ldrb	r2, [r7, #15]
 80089ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fef6 	bl	80097a6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fa69 	bl	8008e92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d004      	beq.n	80089d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2202      	movs	r2, #2
 80089ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ce:	e009      	b.n	80089e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d8:	e004      	b.n	80089e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f99e 	bl	8008d1e <USBD_CtlError>
  }
}
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	885b      	ldrh	r3, [r3, #2]
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	4b4e      	ldr	r3, [pc, #312]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008a02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a04:	4b4d      	ldr	r3, [pc, #308]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d905      	bls.n	8008a18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f985 	bl	8008d1e <USBD_CtlError>
    return USBD_FAIL;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e08c      	b.n	8008b32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d002      	beq.n	8008a2a <USBD_SetConfig+0x3e>
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d029      	beq.n	8008a7c <USBD_SetConfig+0x90>
 8008a28:	e075      	b.n	8008b16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a2a:	4b44      	ldr	r3, [pc, #272]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d020      	beq.n	8008a74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a32:	4b42      	ldr	r3, [pc, #264]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7fe ffba 	bl	80079bc <USBD_SetClassConfig>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d008      	beq.n	8008a64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f962 	bl	8008d1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a62:	e065      	b.n	8008b30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fa14 	bl	8008e92 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2203      	movs	r2, #3
 8008a6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a72:	e05d      	b.n	8008b30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fa0c 	bl	8008e92 <USBD_CtlSendStatus>
      break;
 8008a7a:	e059      	b.n	8008b30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d112      	bne.n	8008aaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a96:	4b29      	ldr	r3, [pc, #164]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7fe ffa9 	bl	80079f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f9f5 	bl	8008e92 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008aa8:	e042      	b.n	8008b30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008aaa:	4b24      	ldr	r3, [pc, #144]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d02a      	beq.n	8008b0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7fe ff97 	bl	80079f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7fe ff70 	bl	80079bc <USBD_SetClassConfig>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00f      	beq.n	8008b06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f918 	bl	8008d1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7fe ff7c 	bl	80079f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b04:	e014      	b.n	8008b30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f9c3 	bl	8008e92 <USBD_CtlSendStatus>
      break;
 8008b0c:	e010      	b.n	8008b30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f9bf 	bl	8008e92 <USBD_CtlSendStatus>
      break;
 8008b14:	e00c      	b.n	8008b30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f900 	bl	8008d1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b1e:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <USBD_SetConfig+0x150>)
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7fe ff65 	bl	80079f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b2e:	bf00      	nop
  }

  return ret;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200002f8 	.word	0x200002f8

08008b40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	88db      	ldrh	r3, [r3, #6]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d004      	beq.n	8008b5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f8e2 	bl	8008d1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b5a:	e023      	b.n	8008ba4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	dc02      	bgt.n	8008b6e <USBD_GetConfig+0x2e>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dc03      	bgt.n	8008b74 <USBD_GetConfig+0x34>
 8008b6c:	e015      	b.n	8008b9a <USBD_GetConfig+0x5a>
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d00b      	beq.n	8008b8a <USBD_GetConfig+0x4a>
 8008b72:	e012      	b.n	8008b9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3308      	adds	r3, #8
 8008b7e:	2201      	movs	r2, #1
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f948 	bl	8008e18 <USBD_CtlSendData>
        break;
 8008b88:	e00c      	b.n	8008ba4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	2201      	movs	r2, #1
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f940 	bl	8008e18 <USBD_CtlSendData>
        break;
 8008b98:	e004      	b.n	8008ba4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f8be 	bl	8008d1e <USBD_CtlError>
        break;
 8008ba2:	bf00      	nop
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d81e      	bhi.n	8008c02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	88db      	ldrh	r3, [r3, #6]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d004      	beq.n	8008bd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f8a5 	bl	8008d1e <USBD_CtlError>
        break;
 8008bd4:	e01a      	b.n	8008c0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f043 0202 	orr.w	r2, r3, #2
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	330c      	adds	r3, #12
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f90c 	bl	8008e18 <USBD_CtlSendData>
      break;
 8008c00:	e004      	b.n	8008c0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f88a 	bl	8008d1e <USBD_CtlError>
      break;
 8008c0a:	bf00      	nop
  }
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	885b      	ldrh	r3, [r3, #2]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d107      	bne.n	8008c36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f92f 	bl	8008e92 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c34:	e013      	b.n	8008c5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	885b      	ldrh	r3, [r3, #2]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d10b      	bne.n	8008c56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	889b      	ldrh	r3, [r3, #4]
 8008c42:	0a1b      	lsrs	r3, r3, #8
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f91f 	bl	8008e92 <USBD_CtlSendStatus>
}
 8008c54:	e003      	b.n	8008c5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f860 	bl	8008d1e <USBD_CtlError>
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d80b      	bhi.n	8008c96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	885b      	ldrh	r3, [r3, #2]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d10c      	bne.n	8008ca0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f8ff 	bl	8008e92 <USBD_CtlSendStatus>
      }
      break;
 8008c94:	e004      	b.n	8008ca0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f840 	bl	8008d1e <USBD_CtlError>
      break;
 8008c9e:	e000      	b.n	8008ca2 <USBD_ClrFeature+0x3c>
      break;
 8008ca0:	bf00      	nop
  }
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f7ff fa17 	bl	8008108 <SWAPBYTE>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	461a      	mov	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3301      	adds	r3, #1
 8008cec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f7ff fa0a 	bl	8008108 <SWAPBYTE>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3301      	adds	r3, #1
 8008d06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7ff f9fd 	bl	8008108 <SWAPBYTE>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	461a      	mov	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	80da      	strh	r2, [r3, #6]
}
 8008d16:	bf00      	nop
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d28:	2180      	movs	r1, #128	@ 0x80
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fcd1 	bl	80096d2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d30:	2100      	movs	r1, #0
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fccd 	bl	80096d2 <USBD_LL_StallEP>
}
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d042      	beq.n	8008ddc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008d5a:	6938      	ldr	r0, [r7, #16]
 8008d5c:	f000 f842 	bl	8008de4 <USBD_GetLen>
 8008d60:	4603      	mov	r3, r0
 8008d62:	3301      	adds	r3, #1
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d6a:	d808      	bhi.n	8008d7e <USBD_GetString+0x3e>
 8008d6c:	6938      	ldr	r0, [r7, #16]
 8008d6e:	f000 f839 	bl	8008de4 <USBD_GetLen>
 8008d72:	4603      	mov	r3, r0
 8008d74:	3301      	adds	r3, #1
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	e001      	b.n	8008d82 <USBD_GetString+0x42>
 8008d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7812      	ldrb	r2, [r2, #0]
 8008d90:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	3301      	adds	r3, #1
 8008d96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	2203      	movs	r2, #3
 8008da0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
 8008da4:	3301      	adds	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008da8:	e013      	b.n	8008dd2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	4413      	add	r3, r2
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	7812      	ldrb	r2, [r2, #0]
 8008db4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	3301      	adds	r3, #1
 8008dba:	613b      	str	r3, [r7, #16]
    idx++;
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	2200      	movs	r2, #0
 8008dca:	701a      	strb	r2, [r3, #0]
    idx++;
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e7      	bne.n	8008daa <USBD_GetString+0x6a>
 8008dda:	e000      	b.n	8008dde <USBD_GetString+0x9e>
    return;
 8008ddc:	bf00      	nop
  }
}
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008df4:	e005      	b.n	8008e02 <USBD_GetLen+0x1e>
  {
    len++;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1f5      	bne.n	8008df6 <USBD_GetLen+0x12>
  }

  return len;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 fcd0 	bl	80097e4 <USBD_LL_Transmit>

  return USBD_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	2100      	movs	r1, #0
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 fcbf 	bl	80097e4 <USBD_LL_Transmit>

  return USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	2100      	movs	r1, #0
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fccf 	bl	8009826 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fc9b 	bl	80097e4 <USBD_LL_Transmit>

  return USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2205      	movs	r2, #5
 8008ec4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ec8:	2300      	movs	r3, #0
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2100      	movs	r1, #0
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fca9 	bl	8009826 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4912      	ldr	r1, [pc, #72]	@ (8008f30 <MX_USB_DEVICE_Init+0x50>)
 8008ee8:	4812      	ldr	r0, [pc, #72]	@ (8008f34 <MX_USB_DEVICE_Init+0x54>)
 8008eea:	f7fe fcea 	bl	80078c2 <USBD_Init>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ef4:	f7f8 f980 	bl	80011f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008ef8:	490f      	ldr	r1, [pc, #60]	@ (8008f38 <MX_USB_DEVICE_Init+0x58>)
 8008efa:	480e      	ldr	r0, [pc, #56]	@ (8008f34 <MX_USB_DEVICE_Init+0x54>)
 8008efc:	f7fe fd11 	bl	8007922 <USBD_RegisterClass>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f06:	f7f8 f977 	bl	80011f8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008f0a:	490c      	ldr	r1, [pc, #48]	@ (8008f3c <MX_USB_DEVICE_Init+0x5c>)
 8008f0c:	4809      	ldr	r0, [pc, #36]	@ (8008f34 <MX_USB_DEVICE_Init+0x54>)
 8008f0e:	f7fc ff8f 	bl	8005e30 <USBD_MSC_RegisterStorage>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f18:	f7f8 f96e 	bl	80011f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f1c:	4805      	ldr	r0, [pc, #20]	@ (8008f34 <MX_USB_DEVICE_Init+0x54>)
 8008f1e:	f7fe fd36 	bl	800798e <USBD_Start>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f28:	f7f8 f966 	bl	80011f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f2c:	bf00      	nop
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	2000008c 	.word	0x2000008c
 8008f34:	200002fc 	.word	0x200002fc
 8008f38:	2000000c 	.word	0x2000000c
 8008f3c:	200000ec 	.word	0x200000ec

08008f40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2212      	movs	r2, #18
 8008f50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f52:	4b03      	ldr	r3, [pc, #12]	@ (8008f60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	200000ac 	.word	0x200000ac

08008f64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2204      	movs	r2, #4
 8008f74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f76:	4b03      	ldr	r3, [pc, #12]	@ (8008f84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	200000cc 	.word	0x200000cc

08008f88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	6039      	str	r1, [r7, #0]
 8008f92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	4907      	ldr	r1, [pc, #28]	@ (8008fbc <USBD_FS_ProductStrDescriptor+0x34>)
 8008f9e:	4808      	ldr	r0, [pc, #32]	@ (8008fc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fa0:	f7ff fece 	bl	8008d40 <USBD_GetString>
 8008fa4:	e004      	b.n	8008fb0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	4904      	ldr	r1, [pc, #16]	@ (8008fbc <USBD_FS_ProductStrDescriptor+0x34>)
 8008faa:	4805      	ldr	r0, [pc, #20]	@ (8008fc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fac:	f7ff fec8 	bl	8008d40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fb0:	4b02      	ldr	r3, [pc, #8]	@ (8008fbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	200005d8 	.word	0x200005d8
 8008fc0:	0800e090 	.word	0x0800e090

08008fc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6039      	str	r1, [r7, #0]
 8008fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	4904      	ldr	r1, [pc, #16]	@ (8008fe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fd4:	4804      	ldr	r0, [pc, #16]	@ (8008fe8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fd6:	f7ff feb3 	bl	8008d40 <USBD_GetString>
  return USBD_StrDesc;
 8008fda:	4b02      	ldr	r3, [pc, #8]	@ (8008fe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	200005d8 	.word	0x200005d8
 8008fe8:	0800e0a4 	.word	0x0800e0a4

08008fec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	221a      	movs	r2, #26
 8008ffc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ffe:	f000 f855 	bl	80090ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009002:	4b02      	ldr	r3, [pc, #8]	@ (800900c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	200000d0 	.word	0x200000d0

08009010 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d105      	bne.n	800902e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	4907      	ldr	r1, [pc, #28]	@ (8009044 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009026:	4808      	ldr	r0, [pc, #32]	@ (8009048 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009028:	f7ff fe8a 	bl	8008d40 <USBD_GetString>
 800902c:	e004      	b.n	8009038 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4904      	ldr	r1, [pc, #16]	@ (8009044 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009032:	4805      	ldr	r0, [pc, #20]	@ (8009048 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009034:	f7ff fe84 	bl	8008d40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009038:	4b02      	ldr	r3, [pc, #8]	@ (8009044 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	200005d8 	.word	0x200005d8
 8009048:	0800e0b8 	.word	0x0800e0b8

0800904c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	6039      	str	r1, [r7, #0]
 8009056:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d105      	bne.n	800906a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	4907      	ldr	r1, [pc, #28]	@ (8009080 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009062:	4808      	ldr	r0, [pc, #32]	@ (8009084 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009064:	f7ff fe6c 	bl	8008d40 <USBD_GetString>
 8009068:	e004      	b.n	8009074 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	4904      	ldr	r1, [pc, #16]	@ (8009080 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800906e:	4805      	ldr	r0, [pc, #20]	@ (8009084 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009070:	f7ff fe66 	bl	8008d40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009074:	4b02      	ldr	r3, [pc, #8]	@ (8009080 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	200005d8 	.word	0x200005d8
 8009084:	0800e0c4 	.word	0x0800e0c4

08009088 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	6039      	str	r1, [r7, #0]
 8009092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	220c      	movs	r2, #12
 8009098:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800909a:	4b03      	ldr	r3, [pc, #12]	@ (80090a8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	200000c0 	.word	0x200000c0

080090ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090b2:	4b0f      	ldr	r3, [pc, #60]	@ (80090f0 <Get_SerialNum+0x44>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090b8:	4b0e      	ldr	r3, [pc, #56]	@ (80090f4 <Get_SerialNum+0x48>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090be:	4b0e      	ldr	r3, [pc, #56]	@ (80090f8 <Get_SerialNum+0x4c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4413      	add	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090d2:	2208      	movs	r2, #8
 80090d4:	4909      	ldr	r1, [pc, #36]	@ (80090fc <Get_SerialNum+0x50>)
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 f814 	bl	8009104 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090dc:	2204      	movs	r2, #4
 80090de:	4908      	ldr	r1, [pc, #32]	@ (8009100 <Get_SerialNum+0x54>)
 80090e0:	68b8      	ldr	r0, [r7, #8]
 80090e2:	f000 f80f 	bl	8009104 <IntToUnicode>
  }
}
 80090e6:	bf00      	nop
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	1ff0f420 	.word	0x1ff0f420
 80090f4:	1ff0f424 	.word	0x1ff0f424
 80090f8:	1ff0f428 	.word	0x1ff0f428
 80090fc:	200000d2 	.word	0x200000d2
 8009100:	200000e2 	.word	0x200000e2

08009104 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	4613      	mov	r3, r2
 8009110:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]
 800911a:	e027      	b.n	800916c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	0f1b      	lsrs	r3, r3, #28
 8009120:	2b09      	cmp	r3, #9
 8009122:	d80b      	bhi.n	800913c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	0f1b      	lsrs	r3, r3, #28
 8009128:	b2da      	uxtb	r2, r3
 800912a:	7dfb      	ldrb	r3, [r7, #23]
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	4619      	mov	r1, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	440b      	add	r3, r1
 8009134:	3230      	adds	r2, #48	@ 0x30
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]
 800913a:	e00a      	b.n	8009152 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	0f1b      	lsrs	r3, r3, #28
 8009140:	b2da      	uxtb	r2, r3
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	4619      	mov	r1, r3
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	440b      	add	r3, r1
 800914c:	3237      	adds	r2, #55	@ 0x37
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	3301      	adds	r3, #1
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	4413      	add	r3, r2
 8009162:	2200      	movs	r2, #0
 8009164:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	3301      	adds	r3, #1
 800916a:	75fb      	strb	r3, [r7, #23]
 800916c:	7dfa      	ldrb	r2, [r7, #23]
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	429a      	cmp	r2, r3
 8009172:	d3d3      	bcc.n	800911c <IntToUnicode+0x18>
  }
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	371c      	adds	r7, #28
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8009182:	b480      	push	{r7}
 8009184:	b083      	sub	sp, #12
 8009186:	af00      	add	r7, sp, #0
 8009188:	4603      	mov	r3, r0
 800918a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800918c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800919a:	b480      	push	{r7}
 800919c:	b085      	sub	sp, #20
 800919e:	af00      	add	r7, sp, #0
 80091a0:	4603      	mov	r3, r0
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	607a      	str	r2, [r7, #4]
 80091a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	22c8      	movs	r2, #200	@ 0xc8
 80091ac:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091b4:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80091b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80091ce:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 80091e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60b9      	str	r1, [r7, #8]
 80091fc:	607a      	str	r2, [r7, #4]
 80091fe:	461a      	mov	r2, r3
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]
 8009204:	4613      	mov	r3, r2
 8009206:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	025b      	lsls	r3, r3, #9
 800920c:	4a06      	ldr	r2, [pc, #24]	@ (8009228 <STORAGE_Read_FS+0x34>)
 800920e:	1899      	adds	r1, r3, r2
 8009210:	89bb      	ldrh	r3, [r7, #12]
 8009212:	025b      	lsls	r3, r3, #9
 8009214:	461a      	mov	r2, r3
 8009216:	68b8      	ldr	r0, [r7, #8]
 8009218:	f001 fc99 	bl	800ab4e <memcpy>

  return (USBD_OK);
 800921c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200007d8 	.word	0x200007d8

0800922c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	607a      	str	r2, [r7, #4]
 8009236:	461a      	mov	r2, r3
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]
 800923c:	4613      	mov	r3, r2
 800923e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	025b      	lsls	r3, r3, #9
 8009244:	4a06      	ldr	r2, [pc, #24]	@ (8009260 <STORAGE_Write_FS+0x34>)
 8009246:	1898      	adds	r0, r3, r2
 8009248:	89bb      	ldrh	r3, [r7, #12]
 800924a:	025b      	lsls	r3, r3, #9
 800924c:	461a      	mov	r2, r3
 800924e:	68b9      	ldr	r1, [r7, #8]
 8009250:	f001 fc7d 	bl	800ab4e <memcpy>
  return (USBD_OK);
 8009254:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	200007d8 	.word	0x200007d8

08009264 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8009268:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800926a:	4618      	mov	r0, r3
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b0ac      	sub	sp, #176	@ 0xb0
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800927c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	605a      	str	r2, [r3, #4]
 8009286:	609a      	str	r2, [r3, #8]
 8009288:	60da      	str	r2, [r3, #12]
 800928a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800928c:	f107 0318 	add.w	r3, r7, #24
 8009290:	2284      	movs	r2, #132	@ 0x84
 8009292:	2100      	movs	r1, #0
 8009294:	4618      	mov	r0, r3
 8009296:	f001 fbca 	bl	800aa2e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092a2:	d151      	bne.n	8009348 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80092a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80092a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80092b0:	f107 0318 	add.w	r3, r7, #24
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fa fbf7 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80092c0:	f7f7 ff9a 	bl	80011f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092c4:	4b22      	ldr	r3, [pc, #136]	@ (8009350 <HAL_PCD_MspInit+0xdc>)
 80092c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c8:	4a21      	ldr	r2, [pc, #132]	@ (8009350 <HAL_PCD_MspInit+0xdc>)
 80092ca:	f043 0301 	orr.w	r3, r3, #1
 80092ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80092d0:	4b1f      	ldr	r3, [pc, #124]	@ (8009350 <HAL_PCD_MspInit+0xdc>)
 80092d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80092dc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80092e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092e4:	2302      	movs	r3, #2
 80092e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ea:	2300      	movs	r3, #0
 80092ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092f0:	2303      	movs	r3, #3
 80092f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092f6:	230a      	movs	r3, #10
 80092f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8009300:	4619      	mov	r1, r3
 8009302:	4814      	ldr	r0, [pc, #80]	@ (8009354 <HAL_PCD_MspInit+0xe0>)
 8009304:	f7f8 faf2 	bl	80018ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009308:	4b11      	ldr	r3, [pc, #68]	@ (8009350 <HAL_PCD_MspInit+0xdc>)
 800930a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800930c:	4a10      	ldr	r2, [pc, #64]	@ (8009350 <HAL_PCD_MspInit+0xdc>)
 800930e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009312:	6353      	str	r3, [r2, #52]	@ 0x34
 8009314:	4b0e      	ldr	r3, [pc, #56]	@ (8009350 <HAL_PCD_MspInit+0xdc>)
 8009316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	4b0b      	ldr	r3, [pc, #44]	@ (8009350 <HAL_PCD_MspInit+0xdc>)
 8009322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009324:	4a0a      	ldr	r2, [pc, #40]	@ (8009350 <HAL_PCD_MspInit+0xdc>)
 8009326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800932a:	6453      	str	r3, [r2, #68]	@ 0x44
 800932c:	4b08      	ldr	r3, [pc, #32]	@ (8009350 <HAL_PCD_MspInit+0xdc>)
 800932e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009338:	2200      	movs	r2, #0
 800933a:	2100      	movs	r1, #0
 800933c:	2043      	movs	r0, #67	@ 0x43
 800933e:	f7f8 fa26 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009342:	2043      	movs	r0, #67	@ 0x43
 8009344:	f7f8 fa3f 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009348:	bf00      	nop
 800934a:	37b0      	adds	r7, #176	@ 0xb0
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	40023800 	.word	0x40023800
 8009354:	40020000 	.word	0x40020000

08009358 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800936c:	4619      	mov	r1, r3
 800936e:	4610      	mov	r0, r2
 8009370:	f7fe fb5a 	bl	8007a28 <USBD_LL_SetupStage>
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800938e:	78fa      	ldrb	r2, [r7, #3]
 8009390:	6879      	ldr	r1, [r7, #4]
 8009392:	4613      	mov	r3, r2
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	4619      	mov	r1, r3
 80093a6:	f7fe fb94 	bl	8007ad2 <USBD_LL_DataOutStage>
}
 80093aa:	bf00      	nop
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b082      	sub	sp, #8
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	4613      	mov	r3, r2
 80093ca:	00db      	lsls	r3, r3, #3
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	440b      	add	r3, r1
 80093d2:	3320      	adds	r3, #32
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	78fb      	ldrb	r3, [r7, #3]
 80093d8:	4619      	mov	r1, r3
 80093da:	f7fe fc2d 	bl	8007c38 <USBD_LL_DataInStage>
}
 80093de:	bf00      	nop
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b082      	sub	sp, #8
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fe fd67 	bl	8007ec8 <USBD_LL_SOF>
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800940a:	2301      	movs	r3, #1
 800940c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	79db      	ldrb	r3, [r3, #7]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d102      	bne.n	800941c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
 800941a:	e008      	b.n	800942e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	79db      	ldrb	r3, [r3, #7]
 8009420:	2b02      	cmp	r3, #2
 8009422:	d102      	bne.n	800942a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
 8009428:	e001      	b.n	800942e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800942a:	f7f7 fee5 	bl	80011f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8009434:	7bfa      	ldrb	r2, [r7, #15]
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f7fe fd01 	bl	8007e40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8009444:	4618      	mov	r0, r3
 8009446:	f7fe fca9 	bl	8007d9c <USBD_LL_Reset>
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fcfc 	bl	8007e60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6812      	ldr	r2, [r2, #0]
 8009476:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7adb      	ldrb	r3, [r3, #11]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009488:	4b04      	ldr	r3, [pc, #16]	@ (800949c <HAL_PCD_SuspendCallback+0x48>)
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	4a03      	ldr	r2, [pc, #12]	@ (800949c <HAL_PCD_SuspendCallback+0x48>)
 800948e:	f043 0306 	orr.w	r3, r3, #6
 8009492:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	e000ed00 	.word	0xe000ed00

080094a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe fcf2 	bl	8007e98 <USBD_LL_Resume>
}
 80094b4:	bf00      	nop
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80094ce:	78fa      	ldrb	r2, [r7, #3]
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe fd4a 	bl	8007f6c <USBD_LL_IsoOUTIncomplete>
}
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80094f2:	78fa      	ldrb	r2, [r7, #3]
 80094f4:	4611      	mov	r1, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fd06 	bl	8007f08 <USBD_LL_IsoINIncomplete>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fd5c 	bl	8007fd0 <USBD_LL_DevConnected>
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fd59 	bl	8007fe6 <USBD_LL_DevDisconnected>
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d13c      	bne.n	80095c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800954c:	4a20      	ldr	r2, [pc, #128]	@ (80095d0 <USBD_LL_Init+0x94>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a1e      	ldr	r2, [pc, #120]	@ (80095d0 <USBD_LL_Init+0x94>)
 8009558:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800955c:	4b1c      	ldr	r3, [pc, #112]	@ (80095d0 <USBD_LL_Init+0x94>)
 800955e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009562:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009564:	4b1a      	ldr	r3, [pc, #104]	@ (80095d0 <USBD_LL_Init+0x94>)
 8009566:	2206      	movs	r2, #6
 8009568:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800956a:	4b19      	ldr	r3, [pc, #100]	@ (80095d0 <USBD_LL_Init+0x94>)
 800956c:	2202      	movs	r2, #2
 800956e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009570:	4b17      	ldr	r3, [pc, #92]	@ (80095d0 <USBD_LL_Init+0x94>)
 8009572:	2200      	movs	r2, #0
 8009574:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009576:	4b16      	ldr	r3, [pc, #88]	@ (80095d0 <USBD_LL_Init+0x94>)
 8009578:	2202      	movs	r2, #2
 800957a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800957c:	4b14      	ldr	r3, [pc, #80]	@ (80095d0 <USBD_LL_Init+0x94>)
 800957e:	2200      	movs	r2, #0
 8009580:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009582:	4b13      	ldr	r3, [pc, #76]	@ (80095d0 <USBD_LL_Init+0x94>)
 8009584:	2200      	movs	r2, #0
 8009586:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009588:	4b11      	ldr	r3, [pc, #68]	@ (80095d0 <USBD_LL_Init+0x94>)
 800958a:	2200      	movs	r2, #0
 800958c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800958e:	4b10      	ldr	r3, [pc, #64]	@ (80095d0 <USBD_LL_Init+0x94>)
 8009590:	2200      	movs	r2, #0
 8009592:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009594:	4b0e      	ldr	r3, [pc, #56]	@ (80095d0 <USBD_LL_Init+0x94>)
 8009596:	2200      	movs	r2, #0
 8009598:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800959a:	480d      	ldr	r0, [pc, #52]	@ (80095d0 <USBD_LL_Init+0x94>)
 800959c:	f7f8 fb6b 	bl	8001c76 <HAL_PCD_Init>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80095a6:	f7f7 fe27 	bl	80011f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80095aa:	2180      	movs	r1, #128	@ 0x80
 80095ac:	4808      	ldr	r0, [pc, #32]	@ (80095d0 <USBD_LL_Init+0x94>)
 80095ae:	f7f9 fde4 	bl	800317a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80095b2:	2240      	movs	r2, #64	@ 0x40
 80095b4:	2100      	movs	r1, #0
 80095b6:	4806      	ldr	r0, [pc, #24]	@ (80095d0 <USBD_LL_Init+0x94>)
 80095b8:	f7f9 fd98 	bl	80030ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80095bc:	2280      	movs	r2, #128	@ 0x80
 80095be:	2101      	movs	r1, #1
 80095c0:	4803      	ldr	r0, [pc, #12]	@ (80095d0 <USBD_LL_Init+0x94>)
 80095c2:	f7f9 fd93 	bl	80030ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	200197d8 	.word	0x200197d8

080095d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7f8 fc59 	bl	8001ea2 <HAL_PCD_Start>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 f99e 	bl	8009938 <USBD_Get_USB_Status>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009600:	7bbb      	ldrb	r3, [r7, #14]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	4608      	mov	r0, r1
 8009614:	4611      	mov	r1, r2
 8009616:	461a      	mov	r2, r3
 8009618:	4603      	mov	r3, r0
 800961a:	70fb      	strb	r3, [r7, #3]
 800961c:	460b      	mov	r3, r1
 800961e:	70bb      	strb	r3, [r7, #2]
 8009620:	4613      	mov	r3, r2
 8009622:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009632:	78bb      	ldrb	r3, [r7, #2]
 8009634:	883a      	ldrh	r2, [r7, #0]
 8009636:	78f9      	ldrb	r1, [r7, #3]
 8009638:	f7f9 f947 	bl	80028ca <HAL_PCD_EP_Open>
 800963c:	4603      	mov	r3, r0
 800963e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f978 	bl	8009938 <USBD_Get_USB_Status>
 8009648:	4603      	mov	r3, r0
 800964a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964c:	7bbb      	ldrb	r3, [r7, #14]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009670:	78fa      	ldrb	r2, [r7, #3]
 8009672:	4611      	mov	r1, r2
 8009674:	4618      	mov	r0, r3
 8009676:	f7f9 f990 	bl	800299a <HAL_PCD_EP_Close>
 800967a:	4603      	mov	r3, r0
 800967c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	4618      	mov	r0, r3
 8009682:	f000 f959 	bl	8009938 <USBD_Get_USB_Status>
 8009686:	4603      	mov	r3, r0
 8009688:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800968a:	7bbb      	ldrb	r3, [r7, #14]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096ae:	78fa      	ldrb	r2, [r7, #3]
 80096b0:	4611      	mov	r1, r2
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7f9 fb32 	bl	8002d1c <HAL_PCD_EP_Flush>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 f93a 	bl	8009938 <USBD_Get_USB_Status>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	460b      	mov	r3, r1
 80096dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096ec:	78fa      	ldrb	r2, [r7, #3]
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7f9 fa29 	bl	8002b48 <HAL_PCD_EP_SetStall>
 80096f6:	4603      	mov	r3, r0
 80096f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 f91b 	bl	8009938 <USBD_Get_USB_Status>
 8009702:	4603      	mov	r3, r0
 8009704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009706:	7bbb      	ldrb	r3, [r7, #14]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7f9 fa6d 	bl	8002c0e <HAL_PCD_EP_ClrStall>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f8fc 	bl	8009938 <USBD_Get_USB_Status>
 8009740:	4603      	mov	r3, r0
 8009742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009744:	7bbb      	ldrb	r3, [r7, #14]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800974e:	b480      	push	{r7}
 8009750:	b085      	sub	sp, #20
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009760:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009766:	2b00      	cmp	r3, #0
 8009768:	da0b      	bge.n	8009782 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800976a:	78fb      	ldrb	r3, [r7, #3]
 800976c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009770:	68f9      	ldr	r1, [r7, #12]
 8009772:	4613      	mov	r3, r2
 8009774:	00db      	lsls	r3, r3, #3
 8009776:	4413      	add	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	440b      	add	r3, r1
 800977c:	3316      	adds	r3, #22
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	e00b      	b.n	800979a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009788:	68f9      	ldr	r1, [r7, #12]
 800978a:	4613      	mov	r3, r2
 800978c:	00db      	lsls	r3, r3, #3
 800978e:	4413      	add	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	440b      	add	r3, r1
 8009794:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009798:	781b      	ldrb	r3, [r3, #0]
  }
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097c0:	78fa      	ldrb	r2, [r7, #3]
 80097c2:	4611      	mov	r1, r2
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7f9 f85c 	bl	8002882 <HAL_PCD_SetAddress>
 80097ca:	4603      	mov	r3, r0
 80097cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 f8b1 	bl	8009938 <USBD_Get_USB_Status>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097da:	7bbb      	ldrb	r3, [r7, #14]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	603b      	str	r3, [r7, #0]
 80097f0:	460b      	mov	r3, r1
 80097f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009802:	7af9      	ldrb	r1, [r7, #11]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	f7f9 f964 	bl	8002ad4 <HAL_PCD_EP_Transmit>
 800980c:	4603      	mov	r3, r0
 800980e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	4618      	mov	r0, r3
 8009814:	f000 f890 	bl	8009938 <USBD_Get_USB_Status>
 8009818:	4603      	mov	r3, r0
 800981a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800981c:	7dbb      	ldrb	r3, [r7, #22]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b086      	sub	sp, #24
 800982a:	af00      	add	r7, sp, #0
 800982c:	60f8      	str	r0, [r7, #12]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
 8009832:	460b      	mov	r3, r1
 8009834:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009844:	7af9      	ldrb	r1, [r7, #11]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	f7f9 f8f0 	bl	8002a2e <HAL_PCD_EP_Receive>
 800984e:	4603      	mov	r3, r0
 8009850:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f86f 	bl	8009938 <USBD_Get_USB_Status>
 800985a:	4603      	mov	r3, r0
 800985c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800985e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800987a:	78fa      	ldrb	r2, [r7, #3]
 800987c:	4611      	mov	r1, r2
 800987e:	4618      	mov	r0, r3
 8009880:	f7f9 f910 	bl	8002aa4 <HAL_PCD_EP_GetRxCount>
 8009884:	4603      	mov	r3, r0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d002      	beq.n	80098a8 <HAL_PCDEx_LPM_Callback+0x18>
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d01f      	beq.n	80098e6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80098a6:	e03b      	b.n	8009920 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7adb      	ldrb	r3, [r3, #11]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d007      	beq.n	80098c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80098b0:	f000 f83c 	bl	800992c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009928 <HAL_PCDEx_LPM_Callback+0x98>)
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009928 <HAL_PCDEx_LPM_Callback+0x98>)
 80098ba:	f023 0306 	bic.w	r3, r3, #6
 80098be:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80098d2:	f023 0301 	bic.w	r3, r3, #1
 80098d6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fada 	bl	8007e98 <USBD_LL_Resume>
    break;
 80098e4:	e01c      	b.n	8009920 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6812      	ldr	r2, [r2, #0]
 80098f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80098f8:	f043 0301 	orr.w	r3, r3, #1
 80098fc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8009904:	4618      	mov	r0, r3
 8009906:	f7fe faab 	bl	8007e60 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	7adb      	ldrb	r3, [r3, #11]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009912:	4b05      	ldr	r3, [pc, #20]	@ (8009928 <HAL_PCDEx_LPM_Callback+0x98>)
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	4a04      	ldr	r2, [pc, #16]	@ (8009928 <HAL_PCDEx_LPM_Callback+0x98>)
 8009918:	f043 0306 	orr.w	r3, r3, #6
 800991c:	6113      	str	r3, [r2, #16]
    break;
 800991e:	bf00      	nop
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	e000ed00 	.word	0xe000ed00

0800992c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009930:	f7f7 fb86 	bl	8001040 <SystemClock_Config>
}
 8009934:	bf00      	nop
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	2b03      	cmp	r3, #3
 800994a:	d817      	bhi.n	800997c <USBD_Get_USB_Status+0x44>
 800994c:	a201      	add	r2, pc, #4	@ (adr r2, 8009954 <USBD_Get_USB_Status+0x1c>)
 800994e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009952:	bf00      	nop
 8009954:	08009965 	.word	0x08009965
 8009958:	0800996b 	.word	0x0800996b
 800995c:	08009971 	.word	0x08009971
 8009960:	08009977 	.word	0x08009977
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	73fb      	strb	r3, [r7, #15]
    break;
 8009968:	e00b      	b.n	8009982 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800996a:	2303      	movs	r3, #3
 800996c:	73fb      	strb	r3, [r7, #15]
    break;
 800996e:	e008      	b.n	8009982 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009970:	2301      	movs	r3, #1
 8009972:	73fb      	strb	r3, [r7, #15]
    break;
 8009974:	e005      	b.n	8009982 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009976:	2303      	movs	r3, #3
 8009978:	73fb      	strb	r3, [r7, #15]
    break;
 800997a:	e002      	b.n	8009982 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800997c:	2303      	movs	r3, #3
 800997e:	73fb      	strb	r3, [r7, #15]
    break;
 8009980:	bf00      	nop
  }
  return usb_status;
 8009982:	7bfb      	ldrb	r3, [r7, #15]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <malloc>:
 8009990:	4b02      	ldr	r3, [pc, #8]	@ (800999c <malloc+0xc>)
 8009992:	4601      	mov	r1, r0
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	f000 b82d 	b.w	80099f4 <_malloc_r>
 800999a:	bf00      	nop
 800999c:	20000118 	.word	0x20000118

080099a0 <free>:
 80099a0:	4b02      	ldr	r3, [pc, #8]	@ (80099ac <free+0xc>)
 80099a2:	4601      	mov	r1, r0
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	f001 bf33 	b.w	800b810 <_free_r>
 80099aa:	bf00      	nop
 80099ac:	20000118 	.word	0x20000118

080099b0 <sbrk_aligned>:
 80099b0:	b570      	push	{r4, r5, r6, lr}
 80099b2:	4e0f      	ldr	r6, [pc, #60]	@ (80099f0 <sbrk_aligned+0x40>)
 80099b4:	460c      	mov	r4, r1
 80099b6:	6831      	ldr	r1, [r6, #0]
 80099b8:	4605      	mov	r5, r0
 80099ba:	b911      	cbnz	r1, 80099c2 <sbrk_aligned+0x12>
 80099bc:	f001 f878 	bl	800aab0 <_sbrk_r>
 80099c0:	6030      	str	r0, [r6, #0]
 80099c2:	4621      	mov	r1, r4
 80099c4:	4628      	mov	r0, r5
 80099c6:	f001 f873 	bl	800aab0 <_sbrk_r>
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	d103      	bne.n	80099d6 <sbrk_aligned+0x26>
 80099ce:	f04f 34ff 	mov.w	r4, #4294967295
 80099d2:	4620      	mov	r0, r4
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
 80099d6:	1cc4      	adds	r4, r0, #3
 80099d8:	f024 0403 	bic.w	r4, r4, #3
 80099dc:	42a0      	cmp	r0, r4
 80099de:	d0f8      	beq.n	80099d2 <sbrk_aligned+0x22>
 80099e0:	1a21      	subs	r1, r4, r0
 80099e2:	4628      	mov	r0, r5
 80099e4:	f001 f864 	bl	800aab0 <_sbrk_r>
 80099e8:	3001      	adds	r0, #1
 80099ea:	d1f2      	bne.n	80099d2 <sbrk_aligned+0x22>
 80099ec:	e7ef      	b.n	80099ce <sbrk_aligned+0x1e>
 80099ee:	bf00      	nop
 80099f0:	20019cb8 	.word	0x20019cb8

080099f4 <_malloc_r>:
 80099f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f8:	1ccd      	adds	r5, r1, #3
 80099fa:	f025 0503 	bic.w	r5, r5, #3
 80099fe:	3508      	adds	r5, #8
 8009a00:	2d0c      	cmp	r5, #12
 8009a02:	bf38      	it	cc
 8009a04:	250c      	movcc	r5, #12
 8009a06:	2d00      	cmp	r5, #0
 8009a08:	4606      	mov	r6, r0
 8009a0a:	db01      	blt.n	8009a10 <_malloc_r+0x1c>
 8009a0c:	42a9      	cmp	r1, r5
 8009a0e:	d904      	bls.n	8009a1a <_malloc_r+0x26>
 8009a10:	230c      	movs	r3, #12
 8009a12:	6033      	str	r3, [r6, #0]
 8009a14:	2000      	movs	r0, #0
 8009a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009af0 <_malloc_r+0xfc>
 8009a1e:	f000 f869 	bl	8009af4 <__malloc_lock>
 8009a22:	f8d8 3000 	ldr.w	r3, [r8]
 8009a26:	461c      	mov	r4, r3
 8009a28:	bb44      	cbnz	r4, 8009a7c <_malloc_r+0x88>
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff ffbf 	bl	80099b0 <sbrk_aligned>
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	4604      	mov	r4, r0
 8009a36:	d158      	bne.n	8009aea <_malloc_r+0xf6>
 8009a38:	f8d8 4000 	ldr.w	r4, [r8]
 8009a3c:	4627      	mov	r7, r4
 8009a3e:	2f00      	cmp	r7, #0
 8009a40:	d143      	bne.n	8009aca <_malloc_r+0xd6>
 8009a42:	2c00      	cmp	r4, #0
 8009a44:	d04b      	beq.n	8009ade <_malloc_r+0xea>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	4639      	mov	r1, r7
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	eb04 0903 	add.w	r9, r4, r3
 8009a50:	f001 f82e 	bl	800aab0 <_sbrk_r>
 8009a54:	4581      	cmp	r9, r0
 8009a56:	d142      	bne.n	8009ade <_malloc_r+0xea>
 8009a58:	6821      	ldr	r1, [r4, #0]
 8009a5a:	1a6d      	subs	r5, r5, r1
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f7ff ffa6 	bl	80099b0 <sbrk_aligned>
 8009a64:	3001      	adds	r0, #1
 8009a66:	d03a      	beq.n	8009ade <_malloc_r+0xea>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	442b      	add	r3, r5
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	bb62      	cbnz	r2, 8009ad0 <_malloc_r+0xdc>
 8009a76:	f8c8 7000 	str.w	r7, [r8]
 8009a7a:	e00f      	b.n	8009a9c <_malloc_r+0xa8>
 8009a7c:	6822      	ldr	r2, [r4, #0]
 8009a7e:	1b52      	subs	r2, r2, r5
 8009a80:	d420      	bmi.n	8009ac4 <_malloc_r+0xd0>
 8009a82:	2a0b      	cmp	r2, #11
 8009a84:	d917      	bls.n	8009ab6 <_malloc_r+0xc2>
 8009a86:	1961      	adds	r1, r4, r5
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	6025      	str	r5, [r4, #0]
 8009a8c:	bf18      	it	ne
 8009a8e:	6059      	strne	r1, [r3, #4]
 8009a90:	6863      	ldr	r3, [r4, #4]
 8009a92:	bf08      	it	eq
 8009a94:	f8c8 1000 	streq.w	r1, [r8]
 8009a98:	5162      	str	r2, [r4, r5]
 8009a9a:	604b      	str	r3, [r1, #4]
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f000 f82f 	bl	8009b00 <__malloc_unlock>
 8009aa2:	f104 000b 	add.w	r0, r4, #11
 8009aa6:	1d23      	adds	r3, r4, #4
 8009aa8:	f020 0007 	bic.w	r0, r0, #7
 8009aac:	1ac2      	subs	r2, r0, r3
 8009aae:	bf1c      	itt	ne
 8009ab0:	1a1b      	subne	r3, r3, r0
 8009ab2:	50a3      	strne	r3, [r4, r2]
 8009ab4:	e7af      	b.n	8009a16 <_malloc_r+0x22>
 8009ab6:	6862      	ldr	r2, [r4, #4]
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	bf0c      	ite	eq
 8009abc:	f8c8 2000 	streq.w	r2, [r8]
 8009ac0:	605a      	strne	r2, [r3, #4]
 8009ac2:	e7eb      	b.n	8009a9c <_malloc_r+0xa8>
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	6864      	ldr	r4, [r4, #4]
 8009ac8:	e7ae      	b.n	8009a28 <_malloc_r+0x34>
 8009aca:	463c      	mov	r4, r7
 8009acc:	687f      	ldr	r7, [r7, #4]
 8009ace:	e7b6      	b.n	8009a3e <_malloc_r+0x4a>
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	d1fb      	bne.n	8009ad0 <_malloc_r+0xdc>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	6053      	str	r3, [r2, #4]
 8009adc:	e7de      	b.n	8009a9c <_malloc_r+0xa8>
 8009ade:	230c      	movs	r3, #12
 8009ae0:	6033      	str	r3, [r6, #0]
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f000 f80c 	bl	8009b00 <__malloc_unlock>
 8009ae8:	e794      	b.n	8009a14 <_malloc_r+0x20>
 8009aea:	6005      	str	r5, [r0, #0]
 8009aec:	e7d6      	b.n	8009a9c <_malloc_r+0xa8>
 8009aee:	bf00      	nop
 8009af0:	20019cbc 	.word	0x20019cbc

08009af4 <__malloc_lock>:
 8009af4:	4801      	ldr	r0, [pc, #4]	@ (8009afc <__malloc_lock+0x8>)
 8009af6:	f001 b828 	b.w	800ab4a <__retarget_lock_acquire_recursive>
 8009afa:	bf00      	nop
 8009afc:	20019e00 	.word	0x20019e00

08009b00 <__malloc_unlock>:
 8009b00:	4801      	ldr	r0, [pc, #4]	@ (8009b08 <__malloc_unlock+0x8>)
 8009b02:	f001 b823 	b.w	800ab4c <__retarget_lock_release_recursive>
 8009b06:	bf00      	nop
 8009b08:	20019e00 	.word	0x20019e00

08009b0c <__cvt>:
 8009b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	ec57 6b10 	vmov	r6, r7, d0
 8009b14:	2f00      	cmp	r7, #0
 8009b16:	460c      	mov	r4, r1
 8009b18:	4619      	mov	r1, r3
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	bfbb      	ittet	lt
 8009b1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009b22:	461f      	movlt	r7, r3
 8009b24:	2300      	movge	r3, #0
 8009b26:	232d      	movlt	r3, #45	@ 0x2d
 8009b28:	700b      	strb	r3, [r1, #0]
 8009b2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009b30:	4691      	mov	r9, r2
 8009b32:	f023 0820 	bic.w	r8, r3, #32
 8009b36:	bfbc      	itt	lt
 8009b38:	4632      	movlt	r2, r6
 8009b3a:	4616      	movlt	r6, r2
 8009b3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b40:	d005      	beq.n	8009b4e <__cvt+0x42>
 8009b42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009b46:	d100      	bne.n	8009b4a <__cvt+0x3e>
 8009b48:	3401      	adds	r4, #1
 8009b4a:	2102      	movs	r1, #2
 8009b4c:	e000      	b.n	8009b50 <__cvt+0x44>
 8009b4e:	2103      	movs	r1, #3
 8009b50:	ab03      	add	r3, sp, #12
 8009b52:	9301      	str	r3, [sp, #4]
 8009b54:	ab02      	add	r3, sp, #8
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	ec47 6b10 	vmov	d0, r6, r7
 8009b5c:	4653      	mov	r3, sl
 8009b5e:	4622      	mov	r2, r4
 8009b60:	f001 f892 	bl	800ac88 <_dtoa_r>
 8009b64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009b68:	4605      	mov	r5, r0
 8009b6a:	d119      	bne.n	8009ba0 <__cvt+0x94>
 8009b6c:	f019 0f01 	tst.w	r9, #1
 8009b70:	d00e      	beq.n	8009b90 <__cvt+0x84>
 8009b72:	eb00 0904 	add.w	r9, r0, r4
 8009b76:	2200      	movs	r2, #0
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 ffc3 	bl	8000b08 <__aeabi_dcmpeq>
 8009b82:	b108      	cbz	r0, 8009b88 <__cvt+0x7c>
 8009b84:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b88:	2230      	movs	r2, #48	@ 0x30
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	454b      	cmp	r3, r9
 8009b8e:	d31e      	bcc.n	8009bce <__cvt+0xc2>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b94:	1b5b      	subs	r3, r3, r5
 8009b96:	4628      	mov	r0, r5
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	b004      	add	sp, #16
 8009b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ba4:	eb00 0904 	add.w	r9, r0, r4
 8009ba8:	d1e5      	bne.n	8009b76 <__cvt+0x6a>
 8009baa:	7803      	ldrb	r3, [r0, #0]
 8009bac:	2b30      	cmp	r3, #48	@ 0x30
 8009bae:	d10a      	bne.n	8009bc6 <__cvt+0xba>
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	f7f6 ffa6 	bl	8000b08 <__aeabi_dcmpeq>
 8009bbc:	b918      	cbnz	r0, 8009bc6 <__cvt+0xba>
 8009bbe:	f1c4 0401 	rsb	r4, r4, #1
 8009bc2:	f8ca 4000 	str.w	r4, [sl]
 8009bc6:	f8da 3000 	ldr.w	r3, [sl]
 8009bca:	4499      	add	r9, r3
 8009bcc:	e7d3      	b.n	8009b76 <__cvt+0x6a>
 8009bce:	1c59      	adds	r1, r3, #1
 8009bd0:	9103      	str	r1, [sp, #12]
 8009bd2:	701a      	strb	r2, [r3, #0]
 8009bd4:	e7d9      	b.n	8009b8a <__cvt+0x7e>

08009bd6 <__exponent>:
 8009bd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd8:	2900      	cmp	r1, #0
 8009bda:	bfba      	itte	lt
 8009bdc:	4249      	neglt	r1, r1
 8009bde:	232d      	movlt	r3, #45	@ 0x2d
 8009be0:	232b      	movge	r3, #43	@ 0x2b
 8009be2:	2909      	cmp	r1, #9
 8009be4:	7002      	strb	r2, [r0, #0]
 8009be6:	7043      	strb	r3, [r0, #1]
 8009be8:	dd29      	ble.n	8009c3e <__exponent+0x68>
 8009bea:	f10d 0307 	add.w	r3, sp, #7
 8009bee:	461d      	mov	r5, r3
 8009bf0:	270a      	movs	r7, #10
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	fbb1 f6f7 	udiv	r6, r1, r7
 8009bf8:	fb07 1416 	mls	r4, r7, r6, r1
 8009bfc:	3430      	adds	r4, #48	@ 0x30
 8009bfe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009c02:	460c      	mov	r4, r1
 8009c04:	2c63      	cmp	r4, #99	@ 0x63
 8009c06:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	dcf1      	bgt.n	8009bf2 <__exponent+0x1c>
 8009c0e:	3130      	adds	r1, #48	@ 0x30
 8009c10:	1e94      	subs	r4, r2, #2
 8009c12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c16:	1c41      	adds	r1, r0, #1
 8009c18:	4623      	mov	r3, r4
 8009c1a:	42ab      	cmp	r3, r5
 8009c1c:	d30a      	bcc.n	8009c34 <__exponent+0x5e>
 8009c1e:	f10d 0309 	add.w	r3, sp, #9
 8009c22:	1a9b      	subs	r3, r3, r2
 8009c24:	42ac      	cmp	r4, r5
 8009c26:	bf88      	it	hi
 8009c28:	2300      	movhi	r3, #0
 8009c2a:	3302      	adds	r3, #2
 8009c2c:	4403      	add	r3, r0
 8009c2e:	1a18      	subs	r0, r3, r0
 8009c30:	b003      	add	sp, #12
 8009c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c34:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009c38:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009c3c:	e7ed      	b.n	8009c1a <__exponent+0x44>
 8009c3e:	2330      	movs	r3, #48	@ 0x30
 8009c40:	3130      	adds	r1, #48	@ 0x30
 8009c42:	7083      	strb	r3, [r0, #2]
 8009c44:	70c1      	strb	r1, [r0, #3]
 8009c46:	1d03      	adds	r3, r0, #4
 8009c48:	e7f1      	b.n	8009c2e <__exponent+0x58>
	...

08009c4c <_printf_float>:
 8009c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	b08d      	sub	sp, #52	@ 0x34
 8009c52:	460c      	mov	r4, r1
 8009c54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009c58:	4616      	mov	r6, r2
 8009c5a:	461f      	mov	r7, r3
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	f000 feef 	bl	800aa40 <_localeconv_r>
 8009c62:	6803      	ldr	r3, [r0, #0]
 8009c64:	9304      	str	r3, [sp, #16]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f6 fb22 	bl	80002b0 <strlen>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c70:	f8d8 3000 	ldr.w	r3, [r8]
 8009c74:	9005      	str	r0, [sp, #20]
 8009c76:	3307      	adds	r3, #7
 8009c78:	f023 0307 	bic.w	r3, r3, #7
 8009c7c:	f103 0208 	add.w	r2, r3, #8
 8009c80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009c84:	f8d4 b000 	ldr.w	fp, [r4]
 8009c88:	f8c8 2000 	str.w	r2, [r8]
 8009c8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009c94:	9307      	str	r3, [sp, #28]
 8009c96:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009c9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ca2:	4b9c      	ldr	r3, [pc, #624]	@ (8009f14 <_printf_float+0x2c8>)
 8009ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca8:	f7f6 ff60 	bl	8000b6c <__aeabi_dcmpun>
 8009cac:	bb70      	cbnz	r0, 8009d0c <_printf_float+0xc0>
 8009cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cb2:	4b98      	ldr	r3, [pc, #608]	@ (8009f14 <_printf_float+0x2c8>)
 8009cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb8:	f7f6 ff3a 	bl	8000b30 <__aeabi_dcmple>
 8009cbc:	bb30      	cbnz	r0, 8009d0c <_printf_float+0xc0>
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	f7f6 ff29 	bl	8000b1c <__aeabi_dcmplt>
 8009cca:	b110      	cbz	r0, 8009cd2 <_printf_float+0x86>
 8009ccc:	232d      	movs	r3, #45	@ 0x2d
 8009cce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cd2:	4a91      	ldr	r2, [pc, #580]	@ (8009f18 <_printf_float+0x2cc>)
 8009cd4:	4b91      	ldr	r3, [pc, #580]	@ (8009f1c <_printf_float+0x2d0>)
 8009cd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009cda:	bf94      	ite	ls
 8009cdc:	4690      	movls	r8, r2
 8009cde:	4698      	movhi	r8, r3
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	6123      	str	r3, [r4, #16]
 8009ce4:	f02b 0304 	bic.w	r3, fp, #4
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	f04f 0900 	mov.w	r9, #0
 8009cee:	9700      	str	r7, [sp, #0]
 8009cf0:	4633      	mov	r3, r6
 8009cf2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f000 f9d2 	bl	800a0a0 <_printf_common>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	f040 808d 	bne.w	8009e1c <_printf_float+0x1d0>
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	b00d      	add	sp, #52	@ 0x34
 8009d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	4640      	mov	r0, r8
 8009d12:	4649      	mov	r1, r9
 8009d14:	f7f6 ff2a 	bl	8000b6c <__aeabi_dcmpun>
 8009d18:	b140      	cbz	r0, 8009d2c <_printf_float+0xe0>
 8009d1a:	464b      	mov	r3, r9
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	bfbc      	itt	lt
 8009d20:	232d      	movlt	r3, #45	@ 0x2d
 8009d22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d26:	4a7e      	ldr	r2, [pc, #504]	@ (8009f20 <_printf_float+0x2d4>)
 8009d28:	4b7e      	ldr	r3, [pc, #504]	@ (8009f24 <_printf_float+0x2d8>)
 8009d2a:	e7d4      	b.n	8009cd6 <_printf_float+0x8a>
 8009d2c:	6863      	ldr	r3, [r4, #4]
 8009d2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009d32:	9206      	str	r2, [sp, #24]
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	d13b      	bne.n	8009db0 <_printf_float+0x164>
 8009d38:	2306      	movs	r3, #6
 8009d3a:	6063      	str	r3, [r4, #4]
 8009d3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009d40:	2300      	movs	r3, #0
 8009d42:	6022      	str	r2, [r4, #0]
 8009d44:	9303      	str	r3, [sp, #12]
 8009d46:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d48:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009d4c:	ab09      	add	r3, sp, #36	@ 0x24
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	6861      	ldr	r1, [r4, #4]
 8009d52:	ec49 8b10 	vmov	d0, r8, r9
 8009d56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f7ff fed6 	bl	8009b0c <__cvt>
 8009d60:	9b06      	ldr	r3, [sp, #24]
 8009d62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d64:	2b47      	cmp	r3, #71	@ 0x47
 8009d66:	4680      	mov	r8, r0
 8009d68:	d129      	bne.n	8009dbe <_printf_float+0x172>
 8009d6a:	1cc8      	adds	r0, r1, #3
 8009d6c:	db02      	blt.n	8009d74 <_printf_float+0x128>
 8009d6e:	6863      	ldr	r3, [r4, #4]
 8009d70:	4299      	cmp	r1, r3
 8009d72:	dd41      	ble.n	8009df8 <_printf_float+0x1ac>
 8009d74:	f1aa 0a02 	sub.w	sl, sl, #2
 8009d78:	fa5f fa8a 	uxtb.w	sl, sl
 8009d7c:	3901      	subs	r1, #1
 8009d7e:	4652      	mov	r2, sl
 8009d80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009d84:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d86:	f7ff ff26 	bl	8009bd6 <__exponent>
 8009d8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d8c:	1813      	adds	r3, r2, r0
 8009d8e:	2a01      	cmp	r2, #1
 8009d90:	4681      	mov	r9, r0
 8009d92:	6123      	str	r3, [r4, #16]
 8009d94:	dc02      	bgt.n	8009d9c <_printf_float+0x150>
 8009d96:	6822      	ldr	r2, [r4, #0]
 8009d98:	07d2      	lsls	r2, r2, #31
 8009d9a:	d501      	bpl.n	8009da0 <_printf_float+0x154>
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	6123      	str	r3, [r4, #16]
 8009da0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0a2      	beq.n	8009cee <_printf_float+0xa2>
 8009da8:	232d      	movs	r3, #45	@ 0x2d
 8009daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dae:	e79e      	b.n	8009cee <_printf_float+0xa2>
 8009db0:	9a06      	ldr	r2, [sp, #24]
 8009db2:	2a47      	cmp	r2, #71	@ 0x47
 8009db4:	d1c2      	bne.n	8009d3c <_printf_float+0xf0>
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1c0      	bne.n	8009d3c <_printf_float+0xf0>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e7bd      	b.n	8009d3a <_printf_float+0xee>
 8009dbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009dc2:	d9db      	bls.n	8009d7c <_printf_float+0x130>
 8009dc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009dc8:	d118      	bne.n	8009dfc <_printf_float+0x1b0>
 8009dca:	2900      	cmp	r1, #0
 8009dcc:	6863      	ldr	r3, [r4, #4]
 8009dce:	dd0b      	ble.n	8009de8 <_printf_float+0x19c>
 8009dd0:	6121      	str	r1, [r4, #16]
 8009dd2:	b913      	cbnz	r3, 8009dda <_printf_float+0x18e>
 8009dd4:	6822      	ldr	r2, [r4, #0]
 8009dd6:	07d0      	lsls	r0, r2, #31
 8009dd8:	d502      	bpl.n	8009de0 <_printf_float+0x194>
 8009dda:	3301      	adds	r3, #1
 8009ddc:	440b      	add	r3, r1
 8009dde:	6123      	str	r3, [r4, #16]
 8009de0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009de2:	f04f 0900 	mov.w	r9, #0
 8009de6:	e7db      	b.n	8009da0 <_printf_float+0x154>
 8009de8:	b913      	cbnz	r3, 8009df0 <_printf_float+0x1a4>
 8009dea:	6822      	ldr	r2, [r4, #0]
 8009dec:	07d2      	lsls	r2, r2, #31
 8009dee:	d501      	bpl.n	8009df4 <_printf_float+0x1a8>
 8009df0:	3302      	adds	r3, #2
 8009df2:	e7f4      	b.n	8009dde <_printf_float+0x192>
 8009df4:	2301      	movs	r3, #1
 8009df6:	e7f2      	b.n	8009dde <_printf_float+0x192>
 8009df8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009dfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dfe:	4299      	cmp	r1, r3
 8009e00:	db05      	blt.n	8009e0e <_printf_float+0x1c2>
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	6121      	str	r1, [r4, #16]
 8009e06:	07d8      	lsls	r0, r3, #31
 8009e08:	d5ea      	bpl.n	8009de0 <_printf_float+0x194>
 8009e0a:	1c4b      	adds	r3, r1, #1
 8009e0c:	e7e7      	b.n	8009dde <_printf_float+0x192>
 8009e0e:	2900      	cmp	r1, #0
 8009e10:	bfd4      	ite	le
 8009e12:	f1c1 0202 	rsble	r2, r1, #2
 8009e16:	2201      	movgt	r2, #1
 8009e18:	4413      	add	r3, r2
 8009e1a:	e7e0      	b.n	8009dde <_printf_float+0x192>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	055a      	lsls	r2, r3, #21
 8009e20:	d407      	bmi.n	8009e32 <_printf_float+0x1e6>
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	4642      	mov	r2, r8
 8009e26:	4631      	mov	r1, r6
 8009e28:	4628      	mov	r0, r5
 8009e2a:	47b8      	blx	r7
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d12b      	bne.n	8009e88 <_printf_float+0x23c>
 8009e30:	e767      	b.n	8009d02 <_printf_float+0xb6>
 8009e32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e36:	f240 80dd 	bls.w	8009ff4 <_printf_float+0x3a8>
 8009e3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2300      	movs	r3, #0
 8009e42:	f7f6 fe61 	bl	8000b08 <__aeabi_dcmpeq>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d033      	beq.n	8009eb2 <_printf_float+0x266>
 8009e4a:	4a37      	ldr	r2, [pc, #220]	@ (8009f28 <_printf_float+0x2dc>)
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4628      	mov	r0, r5
 8009e52:	47b8      	blx	r7
 8009e54:	3001      	adds	r0, #1
 8009e56:	f43f af54 	beq.w	8009d02 <_printf_float+0xb6>
 8009e5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009e5e:	4543      	cmp	r3, r8
 8009e60:	db02      	blt.n	8009e68 <_printf_float+0x21c>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	07d8      	lsls	r0, r3, #31
 8009e66:	d50f      	bpl.n	8009e88 <_printf_float+0x23c>
 8009e68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b8      	blx	r7
 8009e72:	3001      	adds	r0, #1
 8009e74:	f43f af45 	beq.w	8009d02 <_printf_float+0xb6>
 8009e78:	f04f 0900 	mov.w	r9, #0
 8009e7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e80:	f104 0a1a 	add.w	sl, r4, #26
 8009e84:	45c8      	cmp	r8, r9
 8009e86:	dc09      	bgt.n	8009e9c <_printf_float+0x250>
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	079b      	lsls	r3, r3, #30
 8009e8c:	f100 8103 	bmi.w	800a096 <_printf_float+0x44a>
 8009e90:	68e0      	ldr	r0, [r4, #12]
 8009e92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e94:	4298      	cmp	r0, r3
 8009e96:	bfb8      	it	lt
 8009e98:	4618      	movlt	r0, r3
 8009e9a:	e734      	b.n	8009d06 <_printf_float+0xba>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	4652      	mov	r2, sl
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	47b8      	blx	r7
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	f43f af2b 	beq.w	8009d02 <_printf_float+0xb6>
 8009eac:	f109 0901 	add.w	r9, r9, #1
 8009eb0:	e7e8      	b.n	8009e84 <_printf_float+0x238>
 8009eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	dc39      	bgt.n	8009f2c <_printf_float+0x2e0>
 8009eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8009f28 <_printf_float+0x2dc>)
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f af1d 	beq.w	8009d02 <_printf_float+0xb6>
 8009ec8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009ecc:	ea59 0303 	orrs.w	r3, r9, r3
 8009ed0:	d102      	bne.n	8009ed8 <_printf_float+0x28c>
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	07d9      	lsls	r1, r3, #31
 8009ed6:	d5d7      	bpl.n	8009e88 <_printf_float+0x23c>
 8009ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009edc:	4631      	mov	r1, r6
 8009ede:	4628      	mov	r0, r5
 8009ee0:	47b8      	blx	r7
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	f43f af0d 	beq.w	8009d02 <_printf_float+0xb6>
 8009ee8:	f04f 0a00 	mov.w	sl, #0
 8009eec:	f104 0b1a 	add.w	fp, r4, #26
 8009ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef2:	425b      	negs	r3, r3
 8009ef4:	4553      	cmp	r3, sl
 8009ef6:	dc01      	bgt.n	8009efc <_printf_float+0x2b0>
 8009ef8:	464b      	mov	r3, r9
 8009efa:	e793      	b.n	8009e24 <_printf_float+0x1d8>
 8009efc:	2301      	movs	r3, #1
 8009efe:	465a      	mov	r2, fp
 8009f00:	4631      	mov	r1, r6
 8009f02:	4628      	mov	r0, r5
 8009f04:	47b8      	blx	r7
 8009f06:	3001      	adds	r0, #1
 8009f08:	f43f aefb 	beq.w	8009d02 <_printf_float+0xb6>
 8009f0c:	f10a 0a01 	add.w	sl, sl, #1
 8009f10:	e7ee      	b.n	8009ef0 <_printf_float+0x2a4>
 8009f12:	bf00      	nop
 8009f14:	7fefffff 	.word	0x7fefffff
 8009f18:	0800e108 	.word	0x0800e108
 8009f1c:	0800e10c 	.word	0x0800e10c
 8009f20:	0800e110 	.word	0x0800e110
 8009f24:	0800e114 	.word	0x0800e114
 8009f28:	0800e118 	.word	0x0800e118
 8009f2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f32:	4553      	cmp	r3, sl
 8009f34:	bfa8      	it	ge
 8009f36:	4653      	movge	r3, sl
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	4699      	mov	r9, r3
 8009f3c:	dc36      	bgt.n	8009fac <_printf_float+0x360>
 8009f3e:	f04f 0b00 	mov.w	fp, #0
 8009f42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f46:	f104 021a 	add.w	r2, r4, #26
 8009f4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f4c:	9306      	str	r3, [sp, #24]
 8009f4e:	eba3 0309 	sub.w	r3, r3, r9
 8009f52:	455b      	cmp	r3, fp
 8009f54:	dc31      	bgt.n	8009fba <_printf_float+0x36e>
 8009f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f58:	459a      	cmp	sl, r3
 8009f5a:	dc3a      	bgt.n	8009fd2 <_printf_float+0x386>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	07da      	lsls	r2, r3, #31
 8009f60:	d437      	bmi.n	8009fd2 <_printf_float+0x386>
 8009f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f64:	ebaa 0903 	sub.w	r9, sl, r3
 8009f68:	9b06      	ldr	r3, [sp, #24]
 8009f6a:	ebaa 0303 	sub.w	r3, sl, r3
 8009f6e:	4599      	cmp	r9, r3
 8009f70:	bfa8      	it	ge
 8009f72:	4699      	movge	r9, r3
 8009f74:	f1b9 0f00 	cmp.w	r9, #0
 8009f78:	dc33      	bgt.n	8009fe2 <_printf_float+0x396>
 8009f7a:	f04f 0800 	mov.w	r8, #0
 8009f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f82:	f104 0b1a 	add.w	fp, r4, #26
 8009f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f88:	ebaa 0303 	sub.w	r3, sl, r3
 8009f8c:	eba3 0309 	sub.w	r3, r3, r9
 8009f90:	4543      	cmp	r3, r8
 8009f92:	f77f af79 	ble.w	8009e88 <_printf_float+0x23c>
 8009f96:	2301      	movs	r3, #1
 8009f98:	465a      	mov	r2, fp
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	47b8      	blx	r7
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	f43f aeae 	beq.w	8009d02 <_printf_float+0xb6>
 8009fa6:	f108 0801 	add.w	r8, r8, #1
 8009faa:	e7ec      	b.n	8009f86 <_printf_float+0x33a>
 8009fac:	4642      	mov	r2, r8
 8009fae:	4631      	mov	r1, r6
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	47b8      	blx	r7
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	d1c2      	bne.n	8009f3e <_printf_float+0x2f2>
 8009fb8:	e6a3      	b.n	8009d02 <_printf_float+0xb6>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	9206      	str	r2, [sp, #24]
 8009fc2:	47b8      	blx	r7
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	f43f ae9c 	beq.w	8009d02 <_printf_float+0xb6>
 8009fca:	9a06      	ldr	r2, [sp, #24]
 8009fcc:	f10b 0b01 	add.w	fp, fp, #1
 8009fd0:	e7bb      	b.n	8009f4a <_printf_float+0x2fe>
 8009fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b8      	blx	r7
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d1c0      	bne.n	8009f62 <_printf_float+0x316>
 8009fe0:	e68f      	b.n	8009d02 <_printf_float+0xb6>
 8009fe2:	9a06      	ldr	r2, [sp, #24]
 8009fe4:	464b      	mov	r3, r9
 8009fe6:	4442      	add	r2, r8
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b8      	blx	r7
 8009fee:	3001      	adds	r0, #1
 8009ff0:	d1c3      	bne.n	8009f7a <_printf_float+0x32e>
 8009ff2:	e686      	b.n	8009d02 <_printf_float+0xb6>
 8009ff4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ff8:	f1ba 0f01 	cmp.w	sl, #1
 8009ffc:	dc01      	bgt.n	800a002 <_printf_float+0x3b6>
 8009ffe:	07db      	lsls	r3, r3, #31
 800a000:	d536      	bpl.n	800a070 <_printf_float+0x424>
 800a002:	2301      	movs	r3, #1
 800a004:	4642      	mov	r2, r8
 800a006:	4631      	mov	r1, r6
 800a008:	4628      	mov	r0, r5
 800a00a:	47b8      	blx	r7
 800a00c:	3001      	adds	r0, #1
 800a00e:	f43f ae78 	beq.w	8009d02 <_printf_float+0xb6>
 800a012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a016:	4631      	mov	r1, r6
 800a018:	4628      	mov	r0, r5
 800a01a:	47b8      	blx	r7
 800a01c:	3001      	adds	r0, #1
 800a01e:	f43f ae70 	beq.w	8009d02 <_printf_float+0xb6>
 800a022:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a026:	2200      	movs	r2, #0
 800a028:	2300      	movs	r3, #0
 800a02a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a02e:	f7f6 fd6b 	bl	8000b08 <__aeabi_dcmpeq>
 800a032:	b9c0      	cbnz	r0, 800a066 <_printf_float+0x41a>
 800a034:	4653      	mov	r3, sl
 800a036:	f108 0201 	add.w	r2, r8, #1
 800a03a:	4631      	mov	r1, r6
 800a03c:	4628      	mov	r0, r5
 800a03e:	47b8      	blx	r7
 800a040:	3001      	adds	r0, #1
 800a042:	d10c      	bne.n	800a05e <_printf_float+0x412>
 800a044:	e65d      	b.n	8009d02 <_printf_float+0xb6>
 800a046:	2301      	movs	r3, #1
 800a048:	465a      	mov	r2, fp
 800a04a:	4631      	mov	r1, r6
 800a04c:	4628      	mov	r0, r5
 800a04e:	47b8      	blx	r7
 800a050:	3001      	adds	r0, #1
 800a052:	f43f ae56 	beq.w	8009d02 <_printf_float+0xb6>
 800a056:	f108 0801 	add.w	r8, r8, #1
 800a05a:	45d0      	cmp	r8, sl
 800a05c:	dbf3      	blt.n	800a046 <_printf_float+0x3fa>
 800a05e:	464b      	mov	r3, r9
 800a060:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a064:	e6df      	b.n	8009e26 <_printf_float+0x1da>
 800a066:	f04f 0800 	mov.w	r8, #0
 800a06a:	f104 0b1a 	add.w	fp, r4, #26
 800a06e:	e7f4      	b.n	800a05a <_printf_float+0x40e>
 800a070:	2301      	movs	r3, #1
 800a072:	4642      	mov	r2, r8
 800a074:	e7e1      	b.n	800a03a <_printf_float+0x3ee>
 800a076:	2301      	movs	r3, #1
 800a078:	464a      	mov	r2, r9
 800a07a:	4631      	mov	r1, r6
 800a07c:	4628      	mov	r0, r5
 800a07e:	47b8      	blx	r7
 800a080:	3001      	adds	r0, #1
 800a082:	f43f ae3e 	beq.w	8009d02 <_printf_float+0xb6>
 800a086:	f108 0801 	add.w	r8, r8, #1
 800a08a:	68e3      	ldr	r3, [r4, #12]
 800a08c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a08e:	1a5b      	subs	r3, r3, r1
 800a090:	4543      	cmp	r3, r8
 800a092:	dcf0      	bgt.n	800a076 <_printf_float+0x42a>
 800a094:	e6fc      	b.n	8009e90 <_printf_float+0x244>
 800a096:	f04f 0800 	mov.w	r8, #0
 800a09a:	f104 0919 	add.w	r9, r4, #25
 800a09e:	e7f4      	b.n	800a08a <_printf_float+0x43e>

0800a0a0 <_printf_common>:
 800a0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a4:	4616      	mov	r6, r2
 800a0a6:	4698      	mov	r8, r3
 800a0a8:	688a      	ldr	r2, [r1, #8]
 800a0aa:	690b      	ldr	r3, [r1, #16]
 800a0ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	bfb8      	it	lt
 800a0b4:	4613      	movlt	r3, r2
 800a0b6:	6033      	str	r3, [r6, #0]
 800a0b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a0bc:	4607      	mov	r7, r0
 800a0be:	460c      	mov	r4, r1
 800a0c0:	b10a      	cbz	r2, 800a0c6 <_printf_common+0x26>
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	6033      	str	r3, [r6, #0]
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	0699      	lsls	r1, r3, #26
 800a0ca:	bf42      	ittt	mi
 800a0cc:	6833      	ldrmi	r3, [r6, #0]
 800a0ce:	3302      	addmi	r3, #2
 800a0d0:	6033      	strmi	r3, [r6, #0]
 800a0d2:	6825      	ldr	r5, [r4, #0]
 800a0d4:	f015 0506 	ands.w	r5, r5, #6
 800a0d8:	d106      	bne.n	800a0e8 <_printf_common+0x48>
 800a0da:	f104 0a19 	add.w	sl, r4, #25
 800a0de:	68e3      	ldr	r3, [r4, #12]
 800a0e0:	6832      	ldr	r2, [r6, #0]
 800a0e2:	1a9b      	subs	r3, r3, r2
 800a0e4:	42ab      	cmp	r3, r5
 800a0e6:	dc26      	bgt.n	800a136 <_printf_common+0x96>
 800a0e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a0ec:	6822      	ldr	r2, [r4, #0]
 800a0ee:	3b00      	subs	r3, #0
 800a0f0:	bf18      	it	ne
 800a0f2:	2301      	movne	r3, #1
 800a0f4:	0692      	lsls	r2, r2, #26
 800a0f6:	d42b      	bmi.n	800a150 <_printf_common+0xb0>
 800a0f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a0fc:	4641      	mov	r1, r8
 800a0fe:	4638      	mov	r0, r7
 800a100:	47c8      	blx	r9
 800a102:	3001      	adds	r0, #1
 800a104:	d01e      	beq.n	800a144 <_printf_common+0xa4>
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	6922      	ldr	r2, [r4, #16]
 800a10a:	f003 0306 	and.w	r3, r3, #6
 800a10e:	2b04      	cmp	r3, #4
 800a110:	bf02      	ittt	eq
 800a112:	68e5      	ldreq	r5, [r4, #12]
 800a114:	6833      	ldreq	r3, [r6, #0]
 800a116:	1aed      	subeq	r5, r5, r3
 800a118:	68a3      	ldr	r3, [r4, #8]
 800a11a:	bf0c      	ite	eq
 800a11c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a120:	2500      	movne	r5, #0
 800a122:	4293      	cmp	r3, r2
 800a124:	bfc4      	itt	gt
 800a126:	1a9b      	subgt	r3, r3, r2
 800a128:	18ed      	addgt	r5, r5, r3
 800a12a:	2600      	movs	r6, #0
 800a12c:	341a      	adds	r4, #26
 800a12e:	42b5      	cmp	r5, r6
 800a130:	d11a      	bne.n	800a168 <_printf_common+0xc8>
 800a132:	2000      	movs	r0, #0
 800a134:	e008      	b.n	800a148 <_printf_common+0xa8>
 800a136:	2301      	movs	r3, #1
 800a138:	4652      	mov	r2, sl
 800a13a:	4641      	mov	r1, r8
 800a13c:	4638      	mov	r0, r7
 800a13e:	47c8      	blx	r9
 800a140:	3001      	adds	r0, #1
 800a142:	d103      	bne.n	800a14c <_printf_common+0xac>
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14c:	3501      	adds	r5, #1
 800a14e:	e7c6      	b.n	800a0de <_printf_common+0x3e>
 800a150:	18e1      	adds	r1, r4, r3
 800a152:	1c5a      	adds	r2, r3, #1
 800a154:	2030      	movs	r0, #48	@ 0x30
 800a156:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a15a:	4422      	add	r2, r4
 800a15c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a160:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a164:	3302      	adds	r3, #2
 800a166:	e7c7      	b.n	800a0f8 <_printf_common+0x58>
 800a168:	2301      	movs	r3, #1
 800a16a:	4622      	mov	r2, r4
 800a16c:	4641      	mov	r1, r8
 800a16e:	4638      	mov	r0, r7
 800a170:	47c8      	blx	r9
 800a172:	3001      	adds	r0, #1
 800a174:	d0e6      	beq.n	800a144 <_printf_common+0xa4>
 800a176:	3601      	adds	r6, #1
 800a178:	e7d9      	b.n	800a12e <_printf_common+0x8e>
	...

0800a17c <_printf_i>:
 800a17c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a180:	7e0f      	ldrb	r7, [r1, #24]
 800a182:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a184:	2f78      	cmp	r7, #120	@ 0x78
 800a186:	4691      	mov	r9, r2
 800a188:	4680      	mov	r8, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	469a      	mov	sl, r3
 800a18e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a192:	d807      	bhi.n	800a1a4 <_printf_i+0x28>
 800a194:	2f62      	cmp	r7, #98	@ 0x62
 800a196:	d80a      	bhi.n	800a1ae <_printf_i+0x32>
 800a198:	2f00      	cmp	r7, #0
 800a19a:	f000 80d2 	beq.w	800a342 <_printf_i+0x1c6>
 800a19e:	2f58      	cmp	r7, #88	@ 0x58
 800a1a0:	f000 80b9 	beq.w	800a316 <_printf_i+0x19a>
 800a1a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a1ac:	e03a      	b.n	800a224 <_printf_i+0xa8>
 800a1ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a1b2:	2b15      	cmp	r3, #21
 800a1b4:	d8f6      	bhi.n	800a1a4 <_printf_i+0x28>
 800a1b6:	a101      	add	r1, pc, #4	@ (adr r1, 800a1bc <_printf_i+0x40>)
 800a1b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1bc:	0800a215 	.word	0x0800a215
 800a1c0:	0800a229 	.word	0x0800a229
 800a1c4:	0800a1a5 	.word	0x0800a1a5
 800a1c8:	0800a1a5 	.word	0x0800a1a5
 800a1cc:	0800a1a5 	.word	0x0800a1a5
 800a1d0:	0800a1a5 	.word	0x0800a1a5
 800a1d4:	0800a229 	.word	0x0800a229
 800a1d8:	0800a1a5 	.word	0x0800a1a5
 800a1dc:	0800a1a5 	.word	0x0800a1a5
 800a1e0:	0800a1a5 	.word	0x0800a1a5
 800a1e4:	0800a1a5 	.word	0x0800a1a5
 800a1e8:	0800a329 	.word	0x0800a329
 800a1ec:	0800a253 	.word	0x0800a253
 800a1f0:	0800a2e3 	.word	0x0800a2e3
 800a1f4:	0800a1a5 	.word	0x0800a1a5
 800a1f8:	0800a1a5 	.word	0x0800a1a5
 800a1fc:	0800a34b 	.word	0x0800a34b
 800a200:	0800a1a5 	.word	0x0800a1a5
 800a204:	0800a253 	.word	0x0800a253
 800a208:	0800a1a5 	.word	0x0800a1a5
 800a20c:	0800a1a5 	.word	0x0800a1a5
 800a210:	0800a2eb 	.word	0x0800a2eb
 800a214:	6833      	ldr	r3, [r6, #0]
 800a216:	1d1a      	adds	r2, r3, #4
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6032      	str	r2, [r6, #0]
 800a21c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a220:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a224:	2301      	movs	r3, #1
 800a226:	e09d      	b.n	800a364 <_printf_i+0x1e8>
 800a228:	6833      	ldr	r3, [r6, #0]
 800a22a:	6820      	ldr	r0, [r4, #0]
 800a22c:	1d19      	adds	r1, r3, #4
 800a22e:	6031      	str	r1, [r6, #0]
 800a230:	0606      	lsls	r6, r0, #24
 800a232:	d501      	bpl.n	800a238 <_printf_i+0xbc>
 800a234:	681d      	ldr	r5, [r3, #0]
 800a236:	e003      	b.n	800a240 <_printf_i+0xc4>
 800a238:	0645      	lsls	r5, r0, #25
 800a23a:	d5fb      	bpl.n	800a234 <_printf_i+0xb8>
 800a23c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a240:	2d00      	cmp	r5, #0
 800a242:	da03      	bge.n	800a24c <_printf_i+0xd0>
 800a244:	232d      	movs	r3, #45	@ 0x2d
 800a246:	426d      	negs	r5, r5
 800a248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a24c:	4859      	ldr	r0, [pc, #356]	@ (800a3b4 <_printf_i+0x238>)
 800a24e:	230a      	movs	r3, #10
 800a250:	e011      	b.n	800a276 <_printf_i+0xfa>
 800a252:	6821      	ldr	r1, [r4, #0]
 800a254:	6833      	ldr	r3, [r6, #0]
 800a256:	0608      	lsls	r0, r1, #24
 800a258:	f853 5b04 	ldr.w	r5, [r3], #4
 800a25c:	d402      	bmi.n	800a264 <_printf_i+0xe8>
 800a25e:	0649      	lsls	r1, r1, #25
 800a260:	bf48      	it	mi
 800a262:	b2ad      	uxthmi	r5, r5
 800a264:	2f6f      	cmp	r7, #111	@ 0x6f
 800a266:	4853      	ldr	r0, [pc, #332]	@ (800a3b4 <_printf_i+0x238>)
 800a268:	6033      	str	r3, [r6, #0]
 800a26a:	bf14      	ite	ne
 800a26c:	230a      	movne	r3, #10
 800a26e:	2308      	moveq	r3, #8
 800a270:	2100      	movs	r1, #0
 800a272:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a276:	6866      	ldr	r6, [r4, #4]
 800a278:	60a6      	str	r6, [r4, #8]
 800a27a:	2e00      	cmp	r6, #0
 800a27c:	bfa2      	ittt	ge
 800a27e:	6821      	ldrge	r1, [r4, #0]
 800a280:	f021 0104 	bicge.w	r1, r1, #4
 800a284:	6021      	strge	r1, [r4, #0]
 800a286:	b90d      	cbnz	r5, 800a28c <_printf_i+0x110>
 800a288:	2e00      	cmp	r6, #0
 800a28a:	d04b      	beq.n	800a324 <_printf_i+0x1a8>
 800a28c:	4616      	mov	r6, r2
 800a28e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a292:	fb03 5711 	mls	r7, r3, r1, r5
 800a296:	5dc7      	ldrb	r7, [r0, r7]
 800a298:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a29c:	462f      	mov	r7, r5
 800a29e:	42bb      	cmp	r3, r7
 800a2a0:	460d      	mov	r5, r1
 800a2a2:	d9f4      	bls.n	800a28e <_printf_i+0x112>
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	d10b      	bne.n	800a2c0 <_printf_i+0x144>
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	07df      	lsls	r7, r3, #31
 800a2ac:	d508      	bpl.n	800a2c0 <_printf_i+0x144>
 800a2ae:	6923      	ldr	r3, [r4, #16]
 800a2b0:	6861      	ldr	r1, [r4, #4]
 800a2b2:	4299      	cmp	r1, r3
 800a2b4:	bfde      	ittt	le
 800a2b6:	2330      	movle	r3, #48	@ 0x30
 800a2b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2c0:	1b92      	subs	r2, r2, r6
 800a2c2:	6122      	str	r2, [r4, #16]
 800a2c4:	f8cd a000 	str.w	sl, [sp]
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	aa03      	add	r2, sp, #12
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4640      	mov	r0, r8
 800a2d0:	f7ff fee6 	bl	800a0a0 <_printf_common>
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d14a      	bne.n	800a36e <_printf_i+0x1f2>
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2dc:	b004      	add	sp, #16
 800a2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	f043 0320 	orr.w	r3, r3, #32
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	4833      	ldr	r0, [pc, #204]	@ (800a3b8 <_printf_i+0x23c>)
 800a2ec:	2778      	movs	r7, #120	@ 0x78
 800a2ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	6831      	ldr	r1, [r6, #0]
 800a2f6:	061f      	lsls	r7, r3, #24
 800a2f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a2fc:	d402      	bmi.n	800a304 <_printf_i+0x188>
 800a2fe:	065f      	lsls	r7, r3, #25
 800a300:	bf48      	it	mi
 800a302:	b2ad      	uxthmi	r5, r5
 800a304:	6031      	str	r1, [r6, #0]
 800a306:	07d9      	lsls	r1, r3, #31
 800a308:	bf44      	itt	mi
 800a30a:	f043 0320 	orrmi.w	r3, r3, #32
 800a30e:	6023      	strmi	r3, [r4, #0]
 800a310:	b11d      	cbz	r5, 800a31a <_printf_i+0x19e>
 800a312:	2310      	movs	r3, #16
 800a314:	e7ac      	b.n	800a270 <_printf_i+0xf4>
 800a316:	4827      	ldr	r0, [pc, #156]	@ (800a3b4 <_printf_i+0x238>)
 800a318:	e7e9      	b.n	800a2ee <_printf_i+0x172>
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	f023 0320 	bic.w	r3, r3, #32
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	e7f6      	b.n	800a312 <_printf_i+0x196>
 800a324:	4616      	mov	r6, r2
 800a326:	e7bd      	b.n	800a2a4 <_printf_i+0x128>
 800a328:	6833      	ldr	r3, [r6, #0]
 800a32a:	6825      	ldr	r5, [r4, #0]
 800a32c:	6961      	ldr	r1, [r4, #20]
 800a32e:	1d18      	adds	r0, r3, #4
 800a330:	6030      	str	r0, [r6, #0]
 800a332:	062e      	lsls	r6, r5, #24
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	d501      	bpl.n	800a33c <_printf_i+0x1c0>
 800a338:	6019      	str	r1, [r3, #0]
 800a33a:	e002      	b.n	800a342 <_printf_i+0x1c6>
 800a33c:	0668      	lsls	r0, r5, #25
 800a33e:	d5fb      	bpl.n	800a338 <_printf_i+0x1bc>
 800a340:	8019      	strh	r1, [r3, #0]
 800a342:	2300      	movs	r3, #0
 800a344:	6123      	str	r3, [r4, #16]
 800a346:	4616      	mov	r6, r2
 800a348:	e7bc      	b.n	800a2c4 <_printf_i+0x148>
 800a34a:	6833      	ldr	r3, [r6, #0]
 800a34c:	1d1a      	adds	r2, r3, #4
 800a34e:	6032      	str	r2, [r6, #0]
 800a350:	681e      	ldr	r6, [r3, #0]
 800a352:	6862      	ldr	r2, [r4, #4]
 800a354:	2100      	movs	r1, #0
 800a356:	4630      	mov	r0, r6
 800a358:	f7f5 ff5a 	bl	8000210 <memchr>
 800a35c:	b108      	cbz	r0, 800a362 <_printf_i+0x1e6>
 800a35e:	1b80      	subs	r0, r0, r6
 800a360:	6060      	str	r0, [r4, #4]
 800a362:	6863      	ldr	r3, [r4, #4]
 800a364:	6123      	str	r3, [r4, #16]
 800a366:	2300      	movs	r3, #0
 800a368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a36c:	e7aa      	b.n	800a2c4 <_printf_i+0x148>
 800a36e:	6923      	ldr	r3, [r4, #16]
 800a370:	4632      	mov	r2, r6
 800a372:	4649      	mov	r1, r9
 800a374:	4640      	mov	r0, r8
 800a376:	47d0      	blx	sl
 800a378:	3001      	adds	r0, #1
 800a37a:	d0ad      	beq.n	800a2d8 <_printf_i+0x15c>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	079b      	lsls	r3, r3, #30
 800a380:	d413      	bmi.n	800a3aa <_printf_i+0x22e>
 800a382:	68e0      	ldr	r0, [r4, #12]
 800a384:	9b03      	ldr	r3, [sp, #12]
 800a386:	4298      	cmp	r0, r3
 800a388:	bfb8      	it	lt
 800a38a:	4618      	movlt	r0, r3
 800a38c:	e7a6      	b.n	800a2dc <_printf_i+0x160>
 800a38e:	2301      	movs	r3, #1
 800a390:	4632      	mov	r2, r6
 800a392:	4649      	mov	r1, r9
 800a394:	4640      	mov	r0, r8
 800a396:	47d0      	blx	sl
 800a398:	3001      	adds	r0, #1
 800a39a:	d09d      	beq.n	800a2d8 <_printf_i+0x15c>
 800a39c:	3501      	adds	r5, #1
 800a39e:	68e3      	ldr	r3, [r4, #12]
 800a3a0:	9903      	ldr	r1, [sp, #12]
 800a3a2:	1a5b      	subs	r3, r3, r1
 800a3a4:	42ab      	cmp	r3, r5
 800a3a6:	dcf2      	bgt.n	800a38e <_printf_i+0x212>
 800a3a8:	e7eb      	b.n	800a382 <_printf_i+0x206>
 800a3aa:	2500      	movs	r5, #0
 800a3ac:	f104 0619 	add.w	r6, r4, #25
 800a3b0:	e7f5      	b.n	800a39e <_printf_i+0x222>
 800a3b2:	bf00      	nop
 800a3b4:	0800e11a 	.word	0x0800e11a
 800a3b8:	0800e12b 	.word	0x0800e12b

0800a3bc <_scanf_float>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	b087      	sub	sp, #28
 800a3c2:	4617      	mov	r7, r2
 800a3c4:	9303      	str	r3, [sp, #12]
 800a3c6:	688b      	ldr	r3, [r1, #8]
 800a3c8:	1e5a      	subs	r2, r3, #1
 800a3ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a3ce:	bf81      	itttt	hi
 800a3d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a3d4:	eb03 0b05 	addhi.w	fp, r3, r5
 800a3d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a3dc:	608b      	strhi	r3, [r1, #8]
 800a3de:	680b      	ldr	r3, [r1, #0]
 800a3e0:	460a      	mov	r2, r1
 800a3e2:	f04f 0500 	mov.w	r5, #0
 800a3e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a3ea:	f842 3b1c 	str.w	r3, [r2], #28
 800a3ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	bf98      	it	ls
 800a3f8:	f04f 0b00 	movls.w	fp, #0
 800a3fc:	9201      	str	r2, [sp, #4]
 800a3fe:	4616      	mov	r6, r2
 800a400:	46aa      	mov	sl, r5
 800a402:	46a9      	mov	r9, r5
 800a404:	9502      	str	r5, [sp, #8]
 800a406:	68a2      	ldr	r2, [r4, #8]
 800a408:	b152      	cbz	r2, 800a420 <_scanf_float+0x64>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a410:	d864      	bhi.n	800a4dc <_scanf_float+0x120>
 800a412:	2b40      	cmp	r3, #64	@ 0x40
 800a414:	d83c      	bhi.n	800a490 <_scanf_float+0xd4>
 800a416:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a41a:	b2c8      	uxtb	r0, r1
 800a41c:	280e      	cmp	r0, #14
 800a41e:	d93a      	bls.n	800a496 <_scanf_float+0xda>
 800a420:	f1b9 0f00 	cmp.w	r9, #0
 800a424:	d003      	beq.n	800a42e <_scanf_float+0x72>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a432:	f1ba 0f01 	cmp.w	sl, #1
 800a436:	f200 8117 	bhi.w	800a668 <_scanf_float+0x2ac>
 800a43a:	9b01      	ldr	r3, [sp, #4]
 800a43c:	429e      	cmp	r6, r3
 800a43e:	f200 8108 	bhi.w	800a652 <_scanf_float+0x296>
 800a442:	2001      	movs	r0, #1
 800a444:	b007      	add	sp, #28
 800a446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a44e:	2a0d      	cmp	r2, #13
 800a450:	d8e6      	bhi.n	800a420 <_scanf_float+0x64>
 800a452:	a101      	add	r1, pc, #4	@ (adr r1, 800a458 <_scanf_float+0x9c>)
 800a454:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a458:	0800a59f 	.word	0x0800a59f
 800a45c:	0800a421 	.word	0x0800a421
 800a460:	0800a421 	.word	0x0800a421
 800a464:	0800a421 	.word	0x0800a421
 800a468:	0800a5ff 	.word	0x0800a5ff
 800a46c:	0800a5d7 	.word	0x0800a5d7
 800a470:	0800a421 	.word	0x0800a421
 800a474:	0800a421 	.word	0x0800a421
 800a478:	0800a5ad 	.word	0x0800a5ad
 800a47c:	0800a421 	.word	0x0800a421
 800a480:	0800a421 	.word	0x0800a421
 800a484:	0800a421 	.word	0x0800a421
 800a488:	0800a421 	.word	0x0800a421
 800a48c:	0800a565 	.word	0x0800a565
 800a490:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a494:	e7db      	b.n	800a44e <_scanf_float+0x92>
 800a496:	290e      	cmp	r1, #14
 800a498:	d8c2      	bhi.n	800a420 <_scanf_float+0x64>
 800a49a:	a001      	add	r0, pc, #4	@ (adr r0, 800a4a0 <_scanf_float+0xe4>)
 800a49c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a4a0:	0800a555 	.word	0x0800a555
 800a4a4:	0800a421 	.word	0x0800a421
 800a4a8:	0800a555 	.word	0x0800a555
 800a4ac:	0800a5eb 	.word	0x0800a5eb
 800a4b0:	0800a421 	.word	0x0800a421
 800a4b4:	0800a4fd 	.word	0x0800a4fd
 800a4b8:	0800a53b 	.word	0x0800a53b
 800a4bc:	0800a53b 	.word	0x0800a53b
 800a4c0:	0800a53b 	.word	0x0800a53b
 800a4c4:	0800a53b 	.word	0x0800a53b
 800a4c8:	0800a53b 	.word	0x0800a53b
 800a4cc:	0800a53b 	.word	0x0800a53b
 800a4d0:	0800a53b 	.word	0x0800a53b
 800a4d4:	0800a53b 	.word	0x0800a53b
 800a4d8:	0800a53b 	.word	0x0800a53b
 800a4dc:	2b6e      	cmp	r3, #110	@ 0x6e
 800a4de:	d809      	bhi.n	800a4f4 <_scanf_float+0x138>
 800a4e0:	2b60      	cmp	r3, #96	@ 0x60
 800a4e2:	d8b2      	bhi.n	800a44a <_scanf_float+0x8e>
 800a4e4:	2b54      	cmp	r3, #84	@ 0x54
 800a4e6:	d07b      	beq.n	800a5e0 <_scanf_float+0x224>
 800a4e8:	2b59      	cmp	r3, #89	@ 0x59
 800a4ea:	d199      	bne.n	800a420 <_scanf_float+0x64>
 800a4ec:	2d07      	cmp	r5, #7
 800a4ee:	d197      	bne.n	800a420 <_scanf_float+0x64>
 800a4f0:	2508      	movs	r5, #8
 800a4f2:	e02c      	b.n	800a54e <_scanf_float+0x192>
 800a4f4:	2b74      	cmp	r3, #116	@ 0x74
 800a4f6:	d073      	beq.n	800a5e0 <_scanf_float+0x224>
 800a4f8:	2b79      	cmp	r3, #121	@ 0x79
 800a4fa:	e7f6      	b.n	800a4ea <_scanf_float+0x12e>
 800a4fc:	6821      	ldr	r1, [r4, #0]
 800a4fe:	05c8      	lsls	r0, r1, #23
 800a500:	d51b      	bpl.n	800a53a <_scanf_float+0x17e>
 800a502:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a506:	6021      	str	r1, [r4, #0]
 800a508:	f109 0901 	add.w	r9, r9, #1
 800a50c:	f1bb 0f00 	cmp.w	fp, #0
 800a510:	d003      	beq.n	800a51a <_scanf_float+0x15e>
 800a512:	3201      	adds	r2, #1
 800a514:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a518:	60a2      	str	r2, [r4, #8]
 800a51a:	68a3      	ldr	r3, [r4, #8]
 800a51c:	3b01      	subs	r3, #1
 800a51e:	60a3      	str	r3, [r4, #8]
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	3301      	adds	r3, #1
 800a524:	6123      	str	r3, [r4, #16]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	3b01      	subs	r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	607b      	str	r3, [r7, #4]
 800a52e:	f340 8087 	ble.w	800a640 <_scanf_float+0x284>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	3301      	adds	r3, #1
 800a536:	603b      	str	r3, [r7, #0]
 800a538:	e765      	b.n	800a406 <_scanf_float+0x4a>
 800a53a:	eb1a 0105 	adds.w	r1, sl, r5
 800a53e:	f47f af6f 	bne.w	800a420 <_scanf_float+0x64>
 800a542:	6822      	ldr	r2, [r4, #0]
 800a544:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a548:	6022      	str	r2, [r4, #0]
 800a54a:	460d      	mov	r5, r1
 800a54c:	468a      	mov	sl, r1
 800a54e:	f806 3b01 	strb.w	r3, [r6], #1
 800a552:	e7e2      	b.n	800a51a <_scanf_float+0x15e>
 800a554:	6822      	ldr	r2, [r4, #0]
 800a556:	0610      	lsls	r0, r2, #24
 800a558:	f57f af62 	bpl.w	800a420 <_scanf_float+0x64>
 800a55c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a560:	6022      	str	r2, [r4, #0]
 800a562:	e7f4      	b.n	800a54e <_scanf_float+0x192>
 800a564:	f1ba 0f00 	cmp.w	sl, #0
 800a568:	d10e      	bne.n	800a588 <_scanf_float+0x1cc>
 800a56a:	f1b9 0f00 	cmp.w	r9, #0
 800a56e:	d10e      	bne.n	800a58e <_scanf_float+0x1d2>
 800a570:	6822      	ldr	r2, [r4, #0]
 800a572:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a576:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a57a:	d108      	bne.n	800a58e <_scanf_float+0x1d2>
 800a57c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a580:	6022      	str	r2, [r4, #0]
 800a582:	f04f 0a01 	mov.w	sl, #1
 800a586:	e7e2      	b.n	800a54e <_scanf_float+0x192>
 800a588:	f1ba 0f02 	cmp.w	sl, #2
 800a58c:	d055      	beq.n	800a63a <_scanf_float+0x27e>
 800a58e:	2d01      	cmp	r5, #1
 800a590:	d002      	beq.n	800a598 <_scanf_float+0x1dc>
 800a592:	2d04      	cmp	r5, #4
 800a594:	f47f af44 	bne.w	800a420 <_scanf_float+0x64>
 800a598:	3501      	adds	r5, #1
 800a59a:	b2ed      	uxtb	r5, r5
 800a59c:	e7d7      	b.n	800a54e <_scanf_float+0x192>
 800a59e:	f1ba 0f01 	cmp.w	sl, #1
 800a5a2:	f47f af3d 	bne.w	800a420 <_scanf_float+0x64>
 800a5a6:	f04f 0a02 	mov.w	sl, #2
 800a5aa:	e7d0      	b.n	800a54e <_scanf_float+0x192>
 800a5ac:	b97d      	cbnz	r5, 800a5ce <_scanf_float+0x212>
 800a5ae:	f1b9 0f00 	cmp.w	r9, #0
 800a5b2:	f47f af38 	bne.w	800a426 <_scanf_float+0x6a>
 800a5b6:	6822      	ldr	r2, [r4, #0]
 800a5b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a5bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a5c0:	f040 8108 	bne.w	800a7d4 <_scanf_float+0x418>
 800a5c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a5c8:	6022      	str	r2, [r4, #0]
 800a5ca:	2501      	movs	r5, #1
 800a5cc:	e7bf      	b.n	800a54e <_scanf_float+0x192>
 800a5ce:	2d03      	cmp	r5, #3
 800a5d0:	d0e2      	beq.n	800a598 <_scanf_float+0x1dc>
 800a5d2:	2d05      	cmp	r5, #5
 800a5d4:	e7de      	b.n	800a594 <_scanf_float+0x1d8>
 800a5d6:	2d02      	cmp	r5, #2
 800a5d8:	f47f af22 	bne.w	800a420 <_scanf_float+0x64>
 800a5dc:	2503      	movs	r5, #3
 800a5de:	e7b6      	b.n	800a54e <_scanf_float+0x192>
 800a5e0:	2d06      	cmp	r5, #6
 800a5e2:	f47f af1d 	bne.w	800a420 <_scanf_float+0x64>
 800a5e6:	2507      	movs	r5, #7
 800a5e8:	e7b1      	b.n	800a54e <_scanf_float+0x192>
 800a5ea:	6822      	ldr	r2, [r4, #0]
 800a5ec:	0591      	lsls	r1, r2, #22
 800a5ee:	f57f af17 	bpl.w	800a420 <_scanf_float+0x64>
 800a5f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a5f6:	6022      	str	r2, [r4, #0]
 800a5f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a5fc:	e7a7      	b.n	800a54e <_scanf_float+0x192>
 800a5fe:	6822      	ldr	r2, [r4, #0]
 800a600:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a604:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a608:	d006      	beq.n	800a618 <_scanf_float+0x25c>
 800a60a:	0550      	lsls	r0, r2, #21
 800a60c:	f57f af08 	bpl.w	800a420 <_scanf_float+0x64>
 800a610:	f1b9 0f00 	cmp.w	r9, #0
 800a614:	f000 80de 	beq.w	800a7d4 <_scanf_float+0x418>
 800a618:	0591      	lsls	r1, r2, #22
 800a61a:	bf58      	it	pl
 800a61c:	9902      	ldrpl	r1, [sp, #8]
 800a61e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a622:	bf58      	it	pl
 800a624:	eba9 0101 	subpl.w	r1, r9, r1
 800a628:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a62c:	bf58      	it	pl
 800a62e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a632:	6022      	str	r2, [r4, #0]
 800a634:	f04f 0900 	mov.w	r9, #0
 800a638:	e789      	b.n	800a54e <_scanf_float+0x192>
 800a63a:	f04f 0a03 	mov.w	sl, #3
 800a63e:	e786      	b.n	800a54e <_scanf_float+0x192>
 800a640:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a644:	4639      	mov	r1, r7
 800a646:	4640      	mov	r0, r8
 800a648:	4798      	blx	r3
 800a64a:	2800      	cmp	r0, #0
 800a64c:	f43f aedb 	beq.w	800a406 <_scanf_float+0x4a>
 800a650:	e6e6      	b.n	800a420 <_scanf_float+0x64>
 800a652:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a656:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a65a:	463a      	mov	r2, r7
 800a65c:	4640      	mov	r0, r8
 800a65e:	4798      	blx	r3
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	3b01      	subs	r3, #1
 800a664:	6123      	str	r3, [r4, #16]
 800a666:	e6e8      	b.n	800a43a <_scanf_float+0x7e>
 800a668:	1e6b      	subs	r3, r5, #1
 800a66a:	2b06      	cmp	r3, #6
 800a66c:	d824      	bhi.n	800a6b8 <_scanf_float+0x2fc>
 800a66e:	2d02      	cmp	r5, #2
 800a670:	d836      	bhi.n	800a6e0 <_scanf_float+0x324>
 800a672:	9b01      	ldr	r3, [sp, #4]
 800a674:	429e      	cmp	r6, r3
 800a676:	f67f aee4 	bls.w	800a442 <_scanf_float+0x86>
 800a67a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a67e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a682:	463a      	mov	r2, r7
 800a684:	4640      	mov	r0, r8
 800a686:	4798      	blx	r3
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	6123      	str	r3, [r4, #16]
 800a68e:	e7f0      	b.n	800a672 <_scanf_float+0x2b6>
 800a690:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a694:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a698:	463a      	mov	r2, r7
 800a69a:	4640      	mov	r0, r8
 800a69c:	4798      	blx	r3
 800a69e:	6923      	ldr	r3, [r4, #16]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	6123      	str	r3, [r4, #16]
 800a6a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6a8:	fa5f fa8a 	uxtb.w	sl, sl
 800a6ac:	f1ba 0f02 	cmp.w	sl, #2
 800a6b0:	d1ee      	bne.n	800a690 <_scanf_float+0x2d4>
 800a6b2:	3d03      	subs	r5, #3
 800a6b4:	b2ed      	uxtb	r5, r5
 800a6b6:	1b76      	subs	r6, r6, r5
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	05da      	lsls	r2, r3, #23
 800a6bc:	d530      	bpl.n	800a720 <_scanf_float+0x364>
 800a6be:	055b      	lsls	r3, r3, #21
 800a6c0:	d511      	bpl.n	800a6e6 <_scanf_float+0x32a>
 800a6c2:	9b01      	ldr	r3, [sp, #4]
 800a6c4:	429e      	cmp	r6, r3
 800a6c6:	f67f aebc 	bls.w	800a442 <_scanf_float+0x86>
 800a6ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6d2:	463a      	mov	r2, r7
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	4798      	blx	r3
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	6123      	str	r3, [r4, #16]
 800a6de:	e7f0      	b.n	800a6c2 <_scanf_float+0x306>
 800a6e0:	46aa      	mov	sl, r5
 800a6e2:	46b3      	mov	fp, r6
 800a6e4:	e7de      	b.n	800a6a4 <_scanf_float+0x2e8>
 800a6e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a6ea:	6923      	ldr	r3, [r4, #16]
 800a6ec:	2965      	cmp	r1, #101	@ 0x65
 800a6ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800a6f2:	f106 35ff 	add.w	r5, r6, #4294967295
 800a6f6:	6123      	str	r3, [r4, #16]
 800a6f8:	d00c      	beq.n	800a714 <_scanf_float+0x358>
 800a6fa:	2945      	cmp	r1, #69	@ 0x45
 800a6fc:	d00a      	beq.n	800a714 <_scanf_float+0x358>
 800a6fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a702:	463a      	mov	r2, r7
 800a704:	4640      	mov	r0, r8
 800a706:	4798      	blx	r3
 800a708:	6923      	ldr	r3, [r4, #16]
 800a70a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a70e:	3b01      	subs	r3, #1
 800a710:	1eb5      	subs	r5, r6, #2
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a718:	463a      	mov	r2, r7
 800a71a:	4640      	mov	r0, r8
 800a71c:	4798      	blx	r3
 800a71e:	462e      	mov	r6, r5
 800a720:	6822      	ldr	r2, [r4, #0]
 800a722:	f012 0210 	ands.w	r2, r2, #16
 800a726:	d001      	beq.n	800a72c <_scanf_float+0x370>
 800a728:	2000      	movs	r0, #0
 800a72a:	e68b      	b.n	800a444 <_scanf_float+0x88>
 800a72c:	7032      	strb	r2, [r6, #0]
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a738:	d11c      	bne.n	800a774 <_scanf_float+0x3b8>
 800a73a:	9b02      	ldr	r3, [sp, #8]
 800a73c:	454b      	cmp	r3, r9
 800a73e:	eba3 0209 	sub.w	r2, r3, r9
 800a742:	d123      	bne.n	800a78c <_scanf_float+0x3d0>
 800a744:	9901      	ldr	r1, [sp, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	4640      	mov	r0, r8
 800a74a:	f002 fb61 	bl	800ce10 <_strtod_r>
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	6821      	ldr	r1, [r4, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f011 0f02 	tst.w	r1, #2
 800a758:	ec57 6b10 	vmov	r6, r7, d0
 800a75c:	f103 0204 	add.w	r2, r3, #4
 800a760:	d01f      	beq.n	800a7a2 <_scanf_float+0x3e6>
 800a762:	9903      	ldr	r1, [sp, #12]
 800a764:	600a      	str	r2, [r1, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	e9c3 6700 	strd	r6, r7, [r3]
 800a76c:	68e3      	ldr	r3, [r4, #12]
 800a76e:	3301      	adds	r3, #1
 800a770:	60e3      	str	r3, [r4, #12]
 800a772:	e7d9      	b.n	800a728 <_scanf_float+0x36c>
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d0e4      	beq.n	800a744 <_scanf_float+0x388>
 800a77a:	9905      	ldr	r1, [sp, #20]
 800a77c:	230a      	movs	r3, #10
 800a77e:	3101      	adds	r1, #1
 800a780:	4640      	mov	r0, r8
 800a782:	f002 fbc5 	bl	800cf10 <_strtol_r>
 800a786:	9b04      	ldr	r3, [sp, #16]
 800a788:	9e05      	ldr	r6, [sp, #20]
 800a78a:	1ac2      	subs	r2, r0, r3
 800a78c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a790:	429e      	cmp	r6, r3
 800a792:	bf28      	it	cs
 800a794:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a798:	4910      	ldr	r1, [pc, #64]	@ (800a7dc <_scanf_float+0x420>)
 800a79a:	4630      	mov	r0, r6
 800a79c:	f000 f8e4 	bl	800a968 <siprintf>
 800a7a0:	e7d0      	b.n	800a744 <_scanf_float+0x388>
 800a7a2:	f011 0f04 	tst.w	r1, #4
 800a7a6:	9903      	ldr	r1, [sp, #12]
 800a7a8:	600a      	str	r2, [r1, #0]
 800a7aa:	d1dc      	bne.n	800a766 <_scanf_float+0x3aa>
 800a7ac:	681d      	ldr	r5, [r3, #0]
 800a7ae:	4632      	mov	r2, r6
 800a7b0:	463b      	mov	r3, r7
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	f7f6 f9d9 	bl	8000b6c <__aeabi_dcmpun>
 800a7ba:	b128      	cbz	r0, 800a7c8 <_scanf_float+0x40c>
 800a7bc:	4808      	ldr	r0, [pc, #32]	@ (800a7e0 <_scanf_float+0x424>)
 800a7be:	f000 f9d5 	bl	800ab6c <nanf>
 800a7c2:	ed85 0a00 	vstr	s0, [r5]
 800a7c6:	e7d1      	b.n	800a76c <_scanf_float+0x3b0>
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	f7f6 fa2c 	bl	8000c28 <__aeabi_d2f>
 800a7d0:	6028      	str	r0, [r5, #0]
 800a7d2:	e7cb      	b.n	800a76c <_scanf_float+0x3b0>
 800a7d4:	f04f 0900 	mov.w	r9, #0
 800a7d8:	e629      	b.n	800a42e <_scanf_float+0x72>
 800a7da:	bf00      	nop
 800a7dc:	0800e13c 	.word	0x0800e13c
 800a7e0:	0800e4d5 	.word	0x0800e4d5

0800a7e4 <std>:
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	e9c0 3300 	strd	r3, r3, [r0]
 800a7ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7f2:	6083      	str	r3, [r0, #8]
 800a7f4:	8181      	strh	r1, [r0, #12]
 800a7f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7f8:	81c2      	strh	r2, [r0, #14]
 800a7fa:	6183      	str	r3, [r0, #24]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	2208      	movs	r2, #8
 800a800:	305c      	adds	r0, #92	@ 0x5c
 800a802:	f000 f914 	bl	800aa2e <memset>
 800a806:	4b0d      	ldr	r3, [pc, #52]	@ (800a83c <std+0x58>)
 800a808:	6263      	str	r3, [r4, #36]	@ 0x24
 800a80a:	4b0d      	ldr	r3, [pc, #52]	@ (800a840 <std+0x5c>)
 800a80c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a80e:	4b0d      	ldr	r3, [pc, #52]	@ (800a844 <std+0x60>)
 800a810:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a812:	4b0d      	ldr	r3, [pc, #52]	@ (800a848 <std+0x64>)
 800a814:	6323      	str	r3, [r4, #48]	@ 0x30
 800a816:	4b0d      	ldr	r3, [pc, #52]	@ (800a84c <std+0x68>)
 800a818:	6224      	str	r4, [r4, #32]
 800a81a:	429c      	cmp	r4, r3
 800a81c:	d006      	beq.n	800a82c <std+0x48>
 800a81e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a822:	4294      	cmp	r4, r2
 800a824:	d002      	beq.n	800a82c <std+0x48>
 800a826:	33d0      	adds	r3, #208	@ 0xd0
 800a828:	429c      	cmp	r4, r3
 800a82a:	d105      	bne.n	800a838 <std+0x54>
 800a82c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a834:	f000 b988 	b.w	800ab48 <__retarget_lock_init_recursive>
 800a838:	bd10      	pop	{r4, pc}
 800a83a:	bf00      	nop
 800a83c:	0800a9a9 	.word	0x0800a9a9
 800a840:	0800a9cb 	.word	0x0800a9cb
 800a844:	0800aa03 	.word	0x0800aa03
 800a848:	0800aa27 	.word	0x0800aa27
 800a84c:	20019cc0 	.word	0x20019cc0

0800a850 <stdio_exit_handler>:
 800a850:	4a02      	ldr	r2, [pc, #8]	@ (800a85c <stdio_exit_handler+0xc>)
 800a852:	4903      	ldr	r1, [pc, #12]	@ (800a860 <stdio_exit_handler+0x10>)
 800a854:	4803      	ldr	r0, [pc, #12]	@ (800a864 <stdio_exit_handler+0x14>)
 800a856:	f000 b869 	b.w	800a92c <_fwalk_sglue>
 800a85a:	bf00      	nop
 800a85c:	2000010c 	.word	0x2000010c
 800a860:	0800d2cd 	.word	0x0800d2cd
 800a864:	2000011c 	.word	0x2000011c

0800a868 <cleanup_stdio>:
 800a868:	6841      	ldr	r1, [r0, #4]
 800a86a:	4b0c      	ldr	r3, [pc, #48]	@ (800a89c <cleanup_stdio+0x34>)
 800a86c:	4299      	cmp	r1, r3
 800a86e:	b510      	push	{r4, lr}
 800a870:	4604      	mov	r4, r0
 800a872:	d001      	beq.n	800a878 <cleanup_stdio+0x10>
 800a874:	f002 fd2a 	bl	800d2cc <_fflush_r>
 800a878:	68a1      	ldr	r1, [r4, #8]
 800a87a:	4b09      	ldr	r3, [pc, #36]	@ (800a8a0 <cleanup_stdio+0x38>)
 800a87c:	4299      	cmp	r1, r3
 800a87e:	d002      	beq.n	800a886 <cleanup_stdio+0x1e>
 800a880:	4620      	mov	r0, r4
 800a882:	f002 fd23 	bl	800d2cc <_fflush_r>
 800a886:	68e1      	ldr	r1, [r4, #12]
 800a888:	4b06      	ldr	r3, [pc, #24]	@ (800a8a4 <cleanup_stdio+0x3c>)
 800a88a:	4299      	cmp	r1, r3
 800a88c:	d004      	beq.n	800a898 <cleanup_stdio+0x30>
 800a88e:	4620      	mov	r0, r4
 800a890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a894:	f002 bd1a 	b.w	800d2cc <_fflush_r>
 800a898:	bd10      	pop	{r4, pc}
 800a89a:	bf00      	nop
 800a89c:	20019cc0 	.word	0x20019cc0
 800a8a0:	20019d28 	.word	0x20019d28
 800a8a4:	20019d90 	.word	0x20019d90

0800a8a8 <global_stdio_init.part.0>:
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a8d8 <global_stdio_init.part.0+0x30>)
 800a8ac:	4c0b      	ldr	r4, [pc, #44]	@ (800a8dc <global_stdio_init.part.0+0x34>)
 800a8ae:	4a0c      	ldr	r2, [pc, #48]	@ (800a8e0 <global_stdio_init.part.0+0x38>)
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2104      	movs	r1, #4
 800a8b8:	f7ff ff94 	bl	800a7e4 <std>
 800a8bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	2109      	movs	r1, #9
 800a8c4:	f7ff ff8e 	bl	800a7e4 <std>
 800a8c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d2:	2112      	movs	r1, #18
 800a8d4:	f7ff bf86 	b.w	800a7e4 <std>
 800a8d8:	20019df8 	.word	0x20019df8
 800a8dc:	20019cc0 	.word	0x20019cc0
 800a8e0:	0800a851 	.word	0x0800a851

0800a8e4 <__sfp_lock_acquire>:
 800a8e4:	4801      	ldr	r0, [pc, #4]	@ (800a8ec <__sfp_lock_acquire+0x8>)
 800a8e6:	f000 b930 	b.w	800ab4a <__retarget_lock_acquire_recursive>
 800a8ea:	bf00      	nop
 800a8ec:	20019e01 	.word	0x20019e01

0800a8f0 <__sfp_lock_release>:
 800a8f0:	4801      	ldr	r0, [pc, #4]	@ (800a8f8 <__sfp_lock_release+0x8>)
 800a8f2:	f000 b92b 	b.w	800ab4c <__retarget_lock_release_recursive>
 800a8f6:	bf00      	nop
 800a8f8:	20019e01 	.word	0x20019e01

0800a8fc <__sinit>:
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	4604      	mov	r4, r0
 800a900:	f7ff fff0 	bl	800a8e4 <__sfp_lock_acquire>
 800a904:	6a23      	ldr	r3, [r4, #32]
 800a906:	b11b      	cbz	r3, 800a910 <__sinit+0x14>
 800a908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a90c:	f7ff bff0 	b.w	800a8f0 <__sfp_lock_release>
 800a910:	4b04      	ldr	r3, [pc, #16]	@ (800a924 <__sinit+0x28>)
 800a912:	6223      	str	r3, [r4, #32]
 800a914:	4b04      	ldr	r3, [pc, #16]	@ (800a928 <__sinit+0x2c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1f5      	bne.n	800a908 <__sinit+0xc>
 800a91c:	f7ff ffc4 	bl	800a8a8 <global_stdio_init.part.0>
 800a920:	e7f2      	b.n	800a908 <__sinit+0xc>
 800a922:	bf00      	nop
 800a924:	0800a869 	.word	0x0800a869
 800a928:	20019df8 	.word	0x20019df8

0800a92c <_fwalk_sglue>:
 800a92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a930:	4607      	mov	r7, r0
 800a932:	4688      	mov	r8, r1
 800a934:	4614      	mov	r4, r2
 800a936:	2600      	movs	r6, #0
 800a938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a93c:	f1b9 0901 	subs.w	r9, r9, #1
 800a940:	d505      	bpl.n	800a94e <_fwalk_sglue+0x22>
 800a942:	6824      	ldr	r4, [r4, #0]
 800a944:	2c00      	cmp	r4, #0
 800a946:	d1f7      	bne.n	800a938 <_fwalk_sglue+0xc>
 800a948:	4630      	mov	r0, r6
 800a94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a94e:	89ab      	ldrh	r3, [r5, #12]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d907      	bls.n	800a964 <_fwalk_sglue+0x38>
 800a954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a958:	3301      	adds	r3, #1
 800a95a:	d003      	beq.n	800a964 <_fwalk_sglue+0x38>
 800a95c:	4629      	mov	r1, r5
 800a95e:	4638      	mov	r0, r7
 800a960:	47c0      	blx	r8
 800a962:	4306      	orrs	r6, r0
 800a964:	3568      	adds	r5, #104	@ 0x68
 800a966:	e7e9      	b.n	800a93c <_fwalk_sglue+0x10>

0800a968 <siprintf>:
 800a968:	b40e      	push	{r1, r2, r3}
 800a96a:	b500      	push	{lr}
 800a96c:	b09c      	sub	sp, #112	@ 0x70
 800a96e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a970:	9002      	str	r0, [sp, #8]
 800a972:	9006      	str	r0, [sp, #24]
 800a974:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a978:	4809      	ldr	r0, [pc, #36]	@ (800a9a0 <siprintf+0x38>)
 800a97a:	9107      	str	r1, [sp, #28]
 800a97c:	9104      	str	r1, [sp, #16]
 800a97e:	4909      	ldr	r1, [pc, #36]	@ (800a9a4 <siprintf+0x3c>)
 800a980:	f853 2b04 	ldr.w	r2, [r3], #4
 800a984:	9105      	str	r1, [sp, #20]
 800a986:	6800      	ldr	r0, [r0, #0]
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	a902      	add	r1, sp, #8
 800a98c:	f002 fb1e 	bl	800cfcc <_svfiprintf_r>
 800a990:	9b02      	ldr	r3, [sp, #8]
 800a992:	2200      	movs	r2, #0
 800a994:	701a      	strb	r2, [r3, #0]
 800a996:	b01c      	add	sp, #112	@ 0x70
 800a998:	f85d eb04 	ldr.w	lr, [sp], #4
 800a99c:	b003      	add	sp, #12
 800a99e:	4770      	bx	lr
 800a9a0:	20000118 	.word	0x20000118
 800a9a4:	ffff0208 	.word	0xffff0208

0800a9a8 <__sread>:
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b0:	f000 f86c 	bl	800aa8c <_read_r>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	bfab      	itete	ge
 800a9b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a9ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a9bc:	181b      	addge	r3, r3, r0
 800a9be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a9c2:	bfac      	ite	ge
 800a9c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a9c6:	81a3      	strhlt	r3, [r4, #12]
 800a9c8:	bd10      	pop	{r4, pc}

0800a9ca <__swrite>:
 800a9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ce:	461f      	mov	r7, r3
 800a9d0:	898b      	ldrh	r3, [r1, #12]
 800a9d2:	05db      	lsls	r3, r3, #23
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	4616      	mov	r6, r2
 800a9da:	d505      	bpl.n	800a9e8 <__swrite+0x1e>
 800a9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f000 f840 	bl	800aa68 <_lseek_r>
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9f2:	81a3      	strh	r3, [r4, #12]
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fe:	f000 b867 	b.w	800aad0 <_write_r>

0800aa02 <__sseek>:
 800aa02:	b510      	push	{r4, lr}
 800aa04:	460c      	mov	r4, r1
 800aa06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa0a:	f000 f82d 	bl	800aa68 <_lseek_r>
 800aa0e:	1c43      	adds	r3, r0, #1
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	bf15      	itete	ne
 800aa14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa1e:	81a3      	strheq	r3, [r4, #12]
 800aa20:	bf18      	it	ne
 800aa22:	81a3      	strhne	r3, [r4, #12]
 800aa24:	bd10      	pop	{r4, pc}

0800aa26 <__sclose>:
 800aa26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2a:	f000 b80d 	b.w	800aa48 <_close_r>

0800aa2e <memset>:
 800aa2e:	4402      	add	r2, r0
 800aa30:	4603      	mov	r3, r0
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d100      	bne.n	800aa38 <memset+0xa>
 800aa36:	4770      	bx	lr
 800aa38:	f803 1b01 	strb.w	r1, [r3], #1
 800aa3c:	e7f9      	b.n	800aa32 <memset+0x4>
	...

0800aa40 <_localeconv_r>:
 800aa40:	4800      	ldr	r0, [pc, #0]	@ (800aa44 <_localeconv_r+0x4>)
 800aa42:	4770      	bx	lr
 800aa44:	20000258 	.word	0x20000258

0800aa48 <_close_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4d06      	ldr	r5, [pc, #24]	@ (800aa64 <_close_r+0x1c>)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	602b      	str	r3, [r5, #0]
 800aa54:	f7f6 fc90 	bl	8001378 <_close>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d102      	bne.n	800aa62 <_close_r+0x1a>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	b103      	cbz	r3, 800aa62 <_close_r+0x1a>
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	20019dfc 	.word	0x20019dfc

0800aa68 <_lseek_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	4d07      	ldr	r5, [pc, #28]	@ (800aa88 <_lseek_r+0x20>)
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	4608      	mov	r0, r1
 800aa70:	4611      	mov	r1, r2
 800aa72:	2200      	movs	r2, #0
 800aa74:	602a      	str	r2, [r5, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	f7f6 fca5 	bl	80013c6 <_lseek>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d102      	bne.n	800aa86 <_lseek_r+0x1e>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	b103      	cbz	r3, 800aa86 <_lseek_r+0x1e>
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	20019dfc 	.word	0x20019dfc

0800aa8c <_read_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d07      	ldr	r5, [pc, #28]	@ (800aaac <_read_r+0x20>)
 800aa90:	4604      	mov	r4, r0
 800aa92:	4608      	mov	r0, r1
 800aa94:	4611      	mov	r1, r2
 800aa96:	2200      	movs	r2, #0
 800aa98:	602a      	str	r2, [r5, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f7f6 fc33 	bl	8001306 <_read>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	d102      	bne.n	800aaaa <_read_r+0x1e>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	b103      	cbz	r3, 800aaaa <_read_r+0x1e>
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
 800aaac:	20019dfc 	.word	0x20019dfc

0800aab0 <_sbrk_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d06      	ldr	r5, [pc, #24]	@ (800aacc <_sbrk_r+0x1c>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	f7f6 fc90 	bl	80013e0 <_sbrk>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_sbrk_r+0x1a>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_sbrk_r+0x1a>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	20019dfc 	.word	0x20019dfc

0800aad0 <_write_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4d07      	ldr	r5, [pc, #28]	@ (800aaf0 <_write_r+0x20>)
 800aad4:	4604      	mov	r4, r0
 800aad6:	4608      	mov	r0, r1
 800aad8:	4611      	mov	r1, r2
 800aada:	2200      	movs	r2, #0
 800aadc:	602a      	str	r2, [r5, #0]
 800aade:	461a      	mov	r2, r3
 800aae0:	f7f6 fc2e 	bl	8001340 <_write>
 800aae4:	1c43      	adds	r3, r0, #1
 800aae6:	d102      	bne.n	800aaee <_write_r+0x1e>
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	b103      	cbz	r3, 800aaee <_write_r+0x1e>
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	20019dfc 	.word	0x20019dfc

0800aaf4 <__errno>:
 800aaf4:	4b01      	ldr	r3, [pc, #4]	@ (800aafc <__errno+0x8>)
 800aaf6:	6818      	ldr	r0, [r3, #0]
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	20000118 	.word	0x20000118

0800ab00 <__libc_init_array>:
 800ab00:	b570      	push	{r4, r5, r6, lr}
 800ab02:	4d0d      	ldr	r5, [pc, #52]	@ (800ab38 <__libc_init_array+0x38>)
 800ab04:	4c0d      	ldr	r4, [pc, #52]	@ (800ab3c <__libc_init_array+0x3c>)
 800ab06:	1b64      	subs	r4, r4, r5
 800ab08:	10a4      	asrs	r4, r4, #2
 800ab0a:	2600      	movs	r6, #0
 800ab0c:	42a6      	cmp	r6, r4
 800ab0e:	d109      	bne.n	800ab24 <__libc_init_array+0x24>
 800ab10:	4d0b      	ldr	r5, [pc, #44]	@ (800ab40 <__libc_init_array+0x40>)
 800ab12:	4c0c      	ldr	r4, [pc, #48]	@ (800ab44 <__libc_init_array+0x44>)
 800ab14:	f003 faae 	bl	800e074 <_init>
 800ab18:	1b64      	subs	r4, r4, r5
 800ab1a:	10a4      	asrs	r4, r4, #2
 800ab1c:	2600      	movs	r6, #0
 800ab1e:	42a6      	cmp	r6, r4
 800ab20:	d105      	bne.n	800ab2e <__libc_init_array+0x2e>
 800ab22:	bd70      	pop	{r4, r5, r6, pc}
 800ab24:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab28:	4798      	blx	r3
 800ab2a:	3601      	adds	r6, #1
 800ab2c:	e7ee      	b.n	800ab0c <__libc_init_array+0xc>
 800ab2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab32:	4798      	blx	r3
 800ab34:	3601      	adds	r6, #1
 800ab36:	e7f2      	b.n	800ab1e <__libc_init_array+0x1e>
 800ab38:	0800e540 	.word	0x0800e540
 800ab3c:	0800e540 	.word	0x0800e540
 800ab40:	0800e540 	.word	0x0800e540
 800ab44:	0800e544 	.word	0x0800e544

0800ab48 <__retarget_lock_init_recursive>:
 800ab48:	4770      	bx	lr

0800ab4a <__retarget_lock_acquire_recursive>:
 800ab4a:	4770      	bx	lr

0800ab4c <__retarget_lock_release_recursive>:
 800ab4c:	4770      	bx	lr

0800ab4e <memcpy>:
 800ab4e:	440a      	add	r2, r1
 800ab50:	4291      	cmp	r1, r2
 800ab52:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab56:	d100      	bne.n	800ab5a <memcpy+0xc>
 800ab58:	4770      	bx	lr
 800ab5a:	b510      	push	{r4, lr}
 800ab5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab64:	4291      	cmp	r1, r2
 800ab66:	d1f9      	bne.n	800ab5c <memcpy+0xe>
 800ab68:	bd10      	pop	{r4, pc}
	...

0800ab6c <nanf>:
 800ab6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ab74 <nanf+0x8>
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	7fc00000 	.word	0x7fc00000

0800ab78 <quorem>:
 800ab78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	6903      	ldr	r3, [r0, #16]
 800ab7e:	690c      	ldr	r4, [r1, #16]
 800ab80:	42a3      	cmp	r3, r4
 800ab82:	4607      	mov	r7, r0
 800ab84:	db7e      	blt.n	800ac84 <quorem+0x10c>
 800ab86:	3c01      	subs	r4, #1
 800ab88:	f101 0814 	add.w	r8, r1, #20
 800ab8c:	00a3      	lsls	r3, r4, #2
 800ab8e:	f100 0514 	add.w	r5, r0, #20
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab98:	9301      	str	r3, [sp, #4]
 800ab9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aba2:	3301      	adds	r3, #1
 800aba4:	429a      	cmp	r2, r3
 800aba6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abaa:	fbb2 f6f3 	udiv	r6, r2, r3
 800abae:	d32e      	bcc.n	800ac0e <quorem+0x96>
 800abb0:	f04f 0a00 	mov.w	sl, #0
 800abb4:	46c4      	mov	ip, r8
 800abb6:	46ae      	mov	lr, r5
 800abb8:	46d3      	mov	fp, sl
 800abba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abbe:	b298      	uxth	r0, r3
 800abc0:	fb06 a000 	mla	r0, r6, r0, sl
 800abc4:	0c02      	lsrs	r2, r0, #16
 800abc6:	0c1b      	lsrs	r3, r3, #16
 800abc8:	fb06 2303 	mla	r3, r6, r3, r2
 800abcc:	f8de 2000 	ldr.w	r2, [lr]
 800abd0:	b280      	uxth	r0, r0
 800abd2:	b292      	uxth	r2, r2
 800abd4:	1a12      	subs	r2, r2, r0
 800abd6:	445a      	add	r2, fp
 800abd8:	f8de 0000 	ldr.w	r0, [lr]
 800abdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800abe6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800abea:	b292      	uxth	r2, r2
 800abec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800abf0:	45e1      	cmp	r9, ip
 800abf2:	f84e 2b04 	str.w	r2, [lr], #4
 800abf6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800abfa:	d2de      	bcs.n	800abba <quorem+0x42>
 800abfc:	9b00      	ldr	r3, [sp, #0]
 800abfe:	58eb      	ldr	r3, [r5, r3]
 800ac00:	b92b      	cbnz	r3, 800ac0e <quorem+0x96>
 800ac02:	9b01      	ldr	r3, [sp, #4]
 800ac04:	3b04      	subs	r3, #4
 800ac06:	429d      	cmp	r5, r3
 800ac08:	461a      	mov	r2, r3
 800ac0a:	d32f      	bcc.n	800ac6c <quorem+0xf4>
 800ac0c:	613c      	str	r4, [r7, #16]
 800ac0e:	4638      	mov	r0, r7
 800ac10:	f001 f90c 	bl	800be2c <__mcmp>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	db25      	blt.n	800ac64 <quorem+0xec>
 800ac18:	4629      	mov	r1, r5
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac20:	f8d1 c000 	ldr.w	ip, [r1]
 800ac24:	fa1f fe82 	uxth.w	lr, r2
 800ac28:	fa1f f38c 	uxth.w	r3, ip
 800ac2c:	eba3 030e 	sub.w	r3, r3, lr
 800ac30:	4403      	add	r3, r0
 800ac32:	0c12      	lsrs	r2, r2, #16
 800ac34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac42:	45c1      	cmp	r9, r8
 800ac44:	f841 3b04 	str.w	r3, [r1], #4
 800ac48:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac4c:	d2e6      	bcs.n	800ac1c <quorem+0xa4>
 800ac4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac56:	b922      	cbnz	r2, 800ac62 <quorem+0xea>
 800ac58:	3b04      	subs	r3, #4
 800ac5a:	429d      	cmp	r5, r3
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	d30b      	bcc.n	800ac78 <quorem+0x100>
 800ac60:	613c      	str	r4, [r7, #16]
 800ac62:	3601      	adds	r6, #1
 800ac64:	4630      	mov	r0, r6
 800ac66:	b003      	add	sp, #12
 800ac68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6c:	6812      	ldr	r2, [r2, #0]
 800ac6e:	3b04      	subs	r3, #4
 800ac70:	2a00      	cmp	r2, #0
 800ac72:	d1cb      	bne.n	800ac0c <quorem+0x94>
 800ac74:	3c01      	subs	r4, #1
 800ac76:	e7c6      	b.n	800ac06 <quorem+0x8e>
 800ac78:	6812      	ldr	r2, [r2, #0]
 800ac7a:	3b04      	subs	r3, #4
 800ac7c:	2a00      	cmp	r2, #0
 800ac7e:	d1ef      	bne.n	800ac60 <quorem+0xe8>
 800ac80:	3c01      	subs	r4, #1
 800ac82:	e7ea      	b.n	800ac5a <quorem+0xe2>
 800ac84:	2000      	movs	r0, #0
 800ac86:	e7ee      	b.n	800ac66 <quorem+0xee>

0800ac88 <_dtoa_r>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	69c7      	ldr	r7, [r0, #28]
 800ac8e:	b099      	sub	sp, #100	@ 0x64
 800ac90:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ac94:	ec55 4b10 	vmov	r4, r5, d0
 800ac98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ac9a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac9c:	4683      	mov	fp, r0
 800ac9e:	920e      	str	r2, [sp, #56]	@ 0x38
 800aca0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aca2:	b97f      	cbnz	r7, 800acc4 <_dtoa_r+0x3c>
 800aca4:	2010      	movs	r0, #16
 800aca6:	f7fe fe73 	bl	8009990 <malloc>
 800acaa:	4602      	mov	r2, r0
 800acac:	f8cb 001c 	str.w	r0, [fp, #28]
 800acb0:	b920      	cbnz	r0, 800acbc <_dtoa_r+0x34>
 800acb2:	4ba7      	ldr	r3, [pc, #668]	@ (800af50 <_dtoa_r+0x2c8>)
 800acb4:	21ef      	movs	r1, #239	@ 0xef
 800acb6:	48a7      	ldr	r0, [pc, #668]	@ (800af54 <_dtoa_r+0x2cc>)
 800acb8:	f002 fb66 	bl	800d388 <__assert_func>
 800acbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800acc0:	6007      	str	r7, [r0, #0]
 800acc2:	60c7      	str	r7, [r0, #12]
 800acc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acc8:	6819      	ldr	r1, [r3, #0]
 800acca:	b159      	cbz	r1, 800ace4 <_dtoa_r+0x5c>
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	604a      	str	r2, [r1, #4]
 800acd0:	2301      	movs	r3, #1
 800acd2:	4093      	lsls	r3, r2
 800acd4:	608b      	str	r3, [r1, #8]
 800acd6:	4658      	mov	r0, fp
 800acd8:	f000 fe24 	bl	800b924 <_Bfree>
 800acdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	1e2b      	subs	r3, r5, #0
 800ace6:	bfb9      	ittee	lt
 800ace8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800acec:	9303      	strlt	r3, [sp, #12]
 800acee:	2300      	movge	r3, #0
 800acf0:	6033      	strge	r3, [r6, #0]
 800acf2:	9f03      	ldr	r7, [sp, #12]
 800acf4:	4b98      	ldr	r3, [pc, #608]	@ (800af58 <_dtoa_r+0x2d0>)
 800acf6:	bfbc      	itt	lt
 800acf8:	2201      	movlt	r2, #1
 800acfa:	6032      	strlt	r2, [r6, #0]
 800acfc:	43bb      	bics	r3, r7
 800acfe:	d112      	bne.n	800ad26 <_dtoa_r+0x9e>
 800ad00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad0c:	4323      	orrs	r3, r4
 800ad0e:	f000 854d 	beq.w	800b7ac <_dtoa_r+0xb24>
 800ad12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800af6c <_dtoa_r+0x2e4>
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 854f 	beq.w	800b7bc <_dtoa_r+0xb34>
 800ad1e:	f10a 0303 	add.w	r3, sl, #3
 800ad22:	f000 bd49 	b.w	800b7b8 <_dtoa_r+0xb30>
 800ad26:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	ec51 0b17 	vmov	r0, r1, d7
 800ad30:	2300      	movs	r3, #0
 800ad32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ad36:	f7f5 fee7 	bl	8000b08 <__aeabi_dcmpeq>
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	b158      	cbz	r0, 800ad56 <_dtoa_r+0xce>
 800ad3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad40:	2301      	movs	r3, #1
 800ad42:	6013      	str	r3, [r2, #0]
 800ad44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad46:	b113      	cbz	r3, 800ad4e <_dtoa_r+0xc6>
 800ad48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad4a:	4b84      	ldr	r3, [pc, #528]	@ (800af5c <_dtoa_r+0x2d4>)
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800af70 <_dtoa_r+0x2e8>
 800ad52:	f000 bd33 	b.w	800b7bc <_dtoa_r+0xb34>
 800ad56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad5a:	aa16      	add	r2, sp, #88	@ 0x58
 800ad5c:	a917      	add	r1, sp, #92	@ 0x5c
 800ad5e:	4658      	mov	r0, fp
 800ad60:	f001 f984 	bl	800c06c <__d2b>
 800ad64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ad68:	4681      	mov	r9, r0
 800ad6a:	2e00      	cmp	r6, #0
 800ad6c:	d077      	beq.n	800ae5e <_dtoa_r+0x1d6>
 800ad6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ad74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ad80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ad84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ad88:	4619      	mov	r1, r3
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	4b74      	ldr	r3, [pc, #464]	@ (800af60 <_dtoa_r+0x2d8>)
 800ad8e:	f7f5 fa9b 	bl	80002c8 <__aeabi_dsub>
 800ad92:	a369      	add	r3, pc, #420	@ (adr r3, 800af38 <_dtoa_r+0x2b0>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f7f5 fc4e 	bl	8000638 <__aeabi_dmul>
 800ad9c:	a368      	add	r3, pc, #416	@ (adr r3, 800af40 <_dtoa_r+0x2b8>)
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	f7f5 fa93 	bl	80002cc <__adddf3>
 800ada6:	4604      	mov	r4, r0
 800ada8:	4630      	mov	r0, r6
 800adaa:	460d      	mov	r5, r1
 800adac:	f7f5 fbda 	bl	8000564 <__aeabi_i2d>
 800adb0:	a365      	add	r3, pc, #404	@ (adr r3, 800af48 <_dtoa_r+0x2c0>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	f7f5 fc3f 	bl	8000638 <__aeabi_dmul>
 800adba:	4602      	mov	r2, r0
 800adbc:	460b      	mov	r3, r1
 800adbe:	4620      	mov	r0, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	f7f5 fa83 	bl	80002cc <__adddf3>
 800adc6:	4604      	mov	r4, r0
 800adc8:	460d      	mov	r5, r1
 800adca:	f7f5 fee5 	bl	8000b98 <__aeabi_d2iz>
 800adce:	2200      	movs	r2, #0
 800add0:	4607      	mov	r7, r0
 800add2:	2300      	movs	r3, #0
 800add4:	4620      	mov	r0, r4
 800add6:	4629      	mov	r1, r5
 800add8:	f7f5 fea0 	bl	8000b1c <__aeabi_dcmplt>
 800addc:	b140      	cbz	r0, 800adf0 <_dtoa_r+0x168>
 800adde:	4638      	mov	r0, r7
 800ade0:	f7f5 fbc0 	bl	8000564 <__aeabi_i2d>
 800ade4:	4622      	mov	r2, r4
 800ade6:	462b      	mov	r3, r5
 800ade8:	f7f5 fe8e 	bl	8000b08 <__aeabi_dcmpeq>
 800adec:	b900      	cbnz	r0, 800adf0 <_dtoa_r+0x168>
 800adee:	3f01      	subs	r7, #1
 800adf0:	2f16      	cmp	r7, #22
 800adf2:	d851      	bhi.n	800ae98 <_dtoa_r+0x210>
 800adf4:	4b5b      	ldr	r3, [pc, #364]	@ (800af64 <_dtoa_r+0x2dc>)
 800adf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae02:	f7f5 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d048      	beq.n	800ae9c <_dtoa_r+0x214>
 800ae0a:	3f01      	subs	r7, #1
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae12:	1b9b      	subs	r3, r3, r6
 800ae14:	1e5a      	subs	r2, r3, #1
 800ae16:	bf44      	itt	mi
 800ae18:	f1c3 0801 	rsbmi	r8, r3, #1
 800ae1c:	2300      	movmi	r3, #0
 800ae1e:	9208      	str	r2, [sp, #32]
 800ae20:	bf54      	ite	pl
 800ae22:	f04f 0800 	movpl.w	r8, #0
 800ae26:	9308      	strmi	r3, [sp, #32]
 800ae28:	2f00      	cmp	r7, #0
 800ae2a:	db39      	blt.n	800aea0 <_dtoa_r+0x218>
 800ae2c:	9b08      	ldr	r3, [sp, #32]
 800ae2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ae30:	443b      	add	r3, r7
 800ae32:	9308      	str	r3, [sp, #32]
 800ae34:	2300      	movs	r3, #0
 800ae36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae3a:	2b09      	cmp	r3, #9
 800ae3c:	d864      	bhi.n	800af08 <_dtoa_r+0x280>
 800ae3e:	2b05      	cmp	r3, #5
 800ae40:	bfc4      	itt	gt
 800ae42:	3b04      	subgt	r3, #4
 800ae44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ae46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae48:	f1a3 0302 	sub.w	r3, r3, #2
 800ae4c:	bfcc      	ite	gt
 800ae4e:	2400      	movgt	r4, #0
 800ae50:	2401      	movle	r4, #1
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	d863      	bhi.n	800af1e <_dtoa_r+0x296>
 800ae56:	e8df f003 	tbb	[pc, r3]
 800ae5a:	372a      	.short	0x372a
 800ae5c:	5535      	.short	0x5535
 800ae5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ae62:	441e      	add	r6, r3
 800ae64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ae68:	2b20      	cmp	r3, #32
 800ae6a:	bfc1      	itttt	gt
 800ae6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ae70:	409f      	lslgt	r7, r3
 800ae72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ae76:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ae7a:	bfd6      	itet	le
 800ae7c:	f1c3 0320 	rsble	r3, r3, #32
 800ae80:	ea47 0003 	orrgt.w	r0, r7, r3
 800ae84:	fa04 f003 	lslle.w	r0, r4, r3
 800ae88:	f7f5 fb5c 	bl	8000544 <__aeabi_ui2d>
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ae92:	3e01      	subs	r6, #1
 800ae94:	9214      	str	r2, [sp, #80]	@ 0x50
 800ae96:	e777      	b.n	800ad88 <_dtoa_r+0x100>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e7b8      	b.n	800ae0e <_dtoa_r+0x186>
 800ae9c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ae9e:	e7b7      	b.n	800ae10 <_dtoa_r+0x188>
 800aea0:	427b      	negs	r3, r7
 800aea2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aea4:	2300      	movs	r3, #0
 800aea6:	eba8 0807 	sub.w	r8, r8, r7
 800aeaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aeac:	e7c4      	b.n	800ae38 <_dtoa_r+0x1b0>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aeb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	dc35      	bgt.n	800af24 <_dtoa_r+0x29c>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	9307      	str	r3, [sp, #28]
 800aebe:	461a      	mov	r2, r3
 800aec0:	920e      	str	r2, [sp, #56]	@ 0x38
 800aec2:	e00b      	b.n	800aedc <_dtoa_r+0x254>
 800aec4:	2301      	movs	r3, #1
 800aec6:	e7f3      	b.n	800aeb0 <_dtoa_r+0x228>
 800aec8:	2300      	movs	r3, #0
 800aeca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aece:	18fb      	adds	r3, r7, r3
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	9307      	str	r3, [sp, #28]
 800aed8:	bfb8      	it	lt
 800aeda:	2301      	movlt	r3, #1
 800aedc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aee0:	2100      	movs	r1, #0
 800aee2:	2204      	movs	r2, #4
 800aee4:	f102 0514 	add.w	r5, r2, #20
 800aee8:	429d      	cmp	r5, r3
 800aeea:	d91f      	bls.n	800af2c <_dtoa_r+0x2a4>
 800aeec:	6041      	str	r1, [r0, #4]
 800aeee:	4658      	mov	r0, fp
 800aef0:	f000 fcd8 	bl	800b8a4 <_Balloc>
 800aef4:	4682      	mov	sl, r0
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d13c      	bne.n	800af74 <_dtoa_r+0x2ec>
 800aefa:	4b1b      	ldr	r3, [pc, #108]	@ (800af68 <_dtoa_r+0x2e0>)
 800aefc:	4602      	mov	r2, r0
 800aefe:	f240 11af 	movw	r1, #431	@ 0x1af
 800af02:	e6d8      	b.n	800acb6 <_dtoa_r+0x2e>
 800af04:	2301      	movs	r3, #1
 800af06:	e7e0      	b.n	800aeca <_dtoa_r+0x242>
 800af08:	2401      	movs	r4, #1
 800af0a:	2300      	movs	r3, #0
 800af0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af10:	f04f 33ff 	mov.w	r3, #4294967295
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	9307      	str	r3, [sp, #28]
 800af18:	2200      	movs	r2, #0
 800af1a:	2312      	movs	r3, #18
 800af1c:	e7d0      	b.n	800aec0 <_dtoa_r+0x238>
 800af1e:	2301      	movs	r3, #1
 800af20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af22:	e7f5      	b.n	800af10 <_dtoa_r+0x288>
 800af24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	9307      	str	r3, [sp, #28]
 800af2a:	e7d7      	b.n	800aedc <_dtoa_r+0x254>
 800af2c:	3101      	adds	r1, #1
 800af2e:	0052      	lsls	r2, r2, #1
 800af30:	e7d8      	b.n	800aee4 <_dtoa_r+0x25c>
 800af32:	bf00      	nop
 800af34:	f3af 8000 	nop.w
 800af38:	636f4361 	.word	0x636f4361
 800af3c:	3fd287a7 	.word	0x3fd287a7
 800af40:	8b60c8b3 	.word	0x8b60c8b3
 800af44:	3fc68a28 	.word	0x3fc68a28
 800af48:	509f79fb 	.word	0x509f79fb
 800af4c:	3fd34413 	.word	0x3fd34413
 800af50:	0800e14e 	.word	0x0800e14e
 800af54:	0800e165 	.word	0x0800e165
 800af58:	7ff00000 	.word	0x7ff00000
 800af5c:	0800e119 	.word	0x0800e119
 800af60:	3ff80000 	.word	0x3ff80000
 800af64:	0800e260 	.word	0x0800e260
 800af68:	0800e1bd 	.word	0x0800e1bd
 800af6c:	0800e14a 	.word	0x0800e14a
 800af70:	0800e118 	.word	0x0800e118
 800af74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af78:	6018      	str	r0, [r3, #0]
 800af7a:	9b07      	ldr	r3, [sp, #28]
 800af7c:	2b0e      	cmp	r3, #14
 800af7e:	f200 80a4 	bhi.w	800b0ca <_dtoa_r+0x442>
 800af82:	2c00      	cmp	r4, #0
 800af84:	f000 80a1 	beq.w	800b0ca <_dtoa_r+0x442>
 800af88:	2f00      	cmp	r7, #0
 800af8a:	dd33      	ble.n	800aff4 <_dtoa_r+0x36c>
 800af8c:	4bad      	ldr	r3, [pc, #692]	@ (800b244 <_dtoa_r+0x5bc>)
 800af8e:	f007 020f 	and.w	r2, r7, #15
 800af92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af96:	ed93 7b00 	vldr	d7, [r3]
 800af9a:	05f8      	lsls	r0, r7, #23
 800af9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800afa0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800afa4:	d516      	bpl.n	800afd4 <_dtoa_r+0x34c>
 800afa6:	4ba8      	ldr	r3, [pc, #672]	@ (800b248 <_dtoa_r+0x5c0>)
 800afa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afb0:	f7f5 fc6c 	bl	800088c <__aeabi_ddiv>
 800afb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afb8:	f004 040f 	and.w	r4, r4, #15
 800afbc:	2603      	movs	r6, #3
 800afbe:	4da2      	ldr	r5, [pc, #648]	@ (800b248 <_dtoa_r+0x5c0>)
 800afc0:	b954      	cbnz	r4, 800afd8 <_dtoa_r+0x350>
 800afc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afca:	f7f5 fc5f 	bl	800088c <__aeabi_ddiv>
 800afce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afd2:	e028      	b.n	800b026 <_dtoa_r+0x39e>
 800afd4:	2602      	movs	r6, #2
 800afd6:	e7f2      	b.n	800afbe <_dtoa_r+0x336>
 800afd8:	07e1      	lsls	r1, r4, #31
 800afda:	d508      	bpl.n	800afee <_dtoa_r+0x366>
 800afdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afe4:	f7f5 fb28 	bl	8000638 <__aeabi_dmul>
 800afe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afec:	3601      	adds	r6, #1
 800afee:	1064      	asrs	r4, r4, #1
 800aff0:	3508      	adds	r5, #8
 800aff2:	e7e5      	b.n	800afc0 <_dtoa_r+0x338>
 800aff4:	f000 80d2 	beq.w	800b19c <_dtoa_r+0x514>
 800aff8:	427c      	negs	r4, r7
 800affa:	4b92      	ldr	r3, [pc, #584]	@ (800b244 <_dtoa_r+0x5bc>)
 800affc:	4d92      	ldr	r5, [pc, #584]	@ (800b248 <_dtoa_r+0x5c0>)
 800affe:	f004 020f 	and.w	r2, r4, #15
 800b002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b00e:	f7f5 fb13 	bl	8000638 <__aeabi_dmul>
 800b012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b016:	1124      	asrs	r4, r4, #4
 800b018:	2300      	movs	r3, #0
 800b01a:	2602      	movs	r6, #2
 800b01c:	2c00      	cmp	r4, #0
 800b01e:	f040 80b2 	bne.w	800b186 <_dtoa_r+0x4fe>
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1d3      	bne.n	800afce <_dtoa_r+0x346>
 800b026:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b028:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 80b7 	beq.w	800b1a0 <_dtoa_r+0x518>
 800b032:	4b86      	ldr	r3, [pc, #536]	@ (800b24c <_dtoa_r+0x5c4>)
 800b034:	2200      	movs	r2, #0
 800b036:	4620      	mov	r0, r4
 800b038:	4629      	mov	r1, r5
 800b03a:	f7f5 fd6f 	bl	8000b1c <__aeabi_dcmplt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	f000 80ae 	beq.w	800b1a0 <_dtoa_r+0x518>
 800b044:	9b07      	ldr	r3, [sp, #28]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f000 80aa 	beq.w	800b1a0 <_dtoa_r+0x518>
 800b04c:	9b00      	ldr	r3, [sp, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	dd37      	ble.n	800b0c2 <_dtoa_r+0x43a>
 800b052:	1e7b      	subs	r3, r7, #1
 800b054:	9304      	str	r3, [sp, #16]
 800b056:	4620      	mov	r0, r4
 800b058:	4b7d      	ldr	r3, [pc, #500]	@ (800b250 <_dtoa_r+0x5c8>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	4629      	mov	r1, r5
 800b05e:	f7f5 faeb 	bl	8000638 <__aeabi_dmul>
 800b062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b066:	9c00      	ldr	r4, [sp, #0]
 800b068:	3601      	adds	r6, #1
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7f5 fa7a 	bl	8000564 <__aeabi_i2d>
 800b070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b074:	f7f5 fae0 	bl	8000638 <__aeabi_dmul>
 800b078:	4b76      	ldr	r3, [pc, #472]	@ (800b254 <_dtoa_r+0x5cc>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	f7f5 f926 	bl	80002cc <__adddf3>
 800b080:	4605      	mov	r5, r0
 800b082:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b086:	2c00      	cmp	r4, #0
 800b088:	f040 808d 	bne.w	800b1a6 <_dtoa_r+0x51e>
 800b08c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b090:	4b71      	ldr	r3, [pc, #452]	@ (800b258 <_dtoa_r+0x5d0>)
 800b092:	2200      	movs	r2, #0
 800b094:	f7f5 f918 	bl	80002c8 <__aeabi_dsub>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0a0:	462a      	mov	r2, r5
 800b0a2:	4633      	mov	r3, r6
 800b0a4:	f7f5 fd58 	bl	8000b58 <__aeabi_dcmpgt>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	f040 828b 	bne.w	800b5c4 <_dtoa_r+0x93c>
 800b0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0b2:	462a      	mov	r2, r5
 800b0b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b0b8:	f7f5 fd30 	bl	8000b1c <__aeabi_dcmplt>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	f040 8128 	bne.w	800b312 <_dtoa_r+0x68a>
 800b0c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b0c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b0ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f2c0 815a 	blt.w	800b386 <_dtoa_r+0x6fe>
 800b0d2:	2f0e      	cmp	r7, #14
 800b0d4:	f300 8157 	bgt.w	800b386 <_dtoa_r+0x6fe>
 800b0d8:	4b5a      	ldr	r3, [pc, #360]	@ (800b244 <_dtoa_r+0x5bc>)
 800b0da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0de:	ed93 7b00 	vldr	d7, [r3]
 800b0e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	ed8d 7b00 	vstr	d7, [sp]
 800b0ea:	da03      	bge.n	800b0f4 <_dtoa_r+0x46c>
 800b0ec:	9b07      	ldr	r3, [sp, #28]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f340 8101 	ble.w	800b2f6 <_dtoa_r+0x66e>
 800b0f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b0f8:	4656      	mov	r6, sl
 800b0fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0fe:	4620      	mov	r0, r4
 800b100:	4629      	mov	r1, r5
 800b102:	f7f5 fbc3 	bl	800088c <__aeabi_ddiv>
 800b106:	f7f5 fd47 	bl	8000b98 <__aeabi_d2iz>
 800b10a:	4680      	mov	r8, r0
 800b10c:	f7f5 fa2a 	bl	8000564 <__aeabi_i2d>
 800b110:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b114:	f7f5 fa90 	bl	8000638 <__aeabi_dmul>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	4620      	mov	r0, r4
 800b11e:	4629      	mov	r1, r5
 800b120:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b124:	f7f5 f8d0 	bl	80002c8 <__aeabi_dsub>
 800b128:	f806 4b01 	strb.w	r4, [r6], #1
 800b12c:	9d07      	ldr	r5, [sp, #28]
 800b12e:	eba6 040a 	sub.w	r4, r6, sl
 800b132:	42a5      	cmp	r5, r4
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	f040 8117 	bne.w	800b36a <_dtoa_r+0x6e2>
 800b13c:	f7f5 f8c6 	bl	80002cc <__adddf3>
 800b140:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b144:	4604      	mov	r4, r0
 800b146:	460d      	mov	r5, r1
 800b148:	f7f5 fd06 	bl	8000b58 <__aeabi_dcmpgt>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	f040 80f9 	bne.w	800b344 <_dtoa_r+0x6bc>
 800b152:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b156:	4620      	mov	r0, r4
 800b158:	4629      	mov	r1, r5
 800b15a:	f7f5 fcd5 	bl	8000b08 <__aeabi_dcmpeq>
 800b15e:	b118      	cbz	r0, 800b168 <_dtoa_r+0x4e0>
 800b160:	f018 0f01 	tst.w	r8, #1
 800b164:	f040 80ee 	bne.w	800b344 <_dtoa_r+0x6bc>
 800b168:	4649      	mov	r1, r9
 800b16a:	4658      	mov	r0, fp
 800b16c:	f000 fbda 	bl	800b924 <_Bfree>
 800b170:	2300      	movs	r3, #0
 800b172:	7033      	strb	r3, [r6, #0]
 800b174:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b176:	3701      	adds	r7, #1
 800b178:	601f      	str	r7, [r3, #0]
 800b17a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 831d 	beq.w	800b7bc <_dtoa_r+0xb34>
 800b182:	601e      	str	r6, [r3, #0]
 800b184:	e31a      	b.n	800b7bc <_dtoa_r+0xb34>
 800b186:	07e2      	lsls	r2, r4, #31
 800b188:	d505      	bpl.n	800b196 <_dtoa_r+0x50e>
 800b18a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b18e:	f7f5 fa53 	bl	8000638 <__aeabi_dmul>
 800b192:	3601      	adds	r6, #1
 800b194:	2301      	movs	r3, #1
 800b196:	1064      	asrs	r4, r4, #1
 800b198:	3508      	adds	r5, #8
 800b19a:	e73f      	b.n	800b01c <_dtoa_r+0x394>
 800b19c:	2602      	movs	r6, #2
 800b19e:	e742      	b.n	800b026 <_dtoa_r+0x39e>
 800b1a0:	9c07      	ldr	r4, [sp, #28]
 800b1a2:	9704      	str	r7, [sp, #16]
 800b1a4:	e761      	b.n	800b06a <_dtoa_r+0x3e2>
 800b1a6:	4b27      	ldr	r3, [pc, #156]	@ (800b244 <_dtoa_r+0x5bc>)
 800b1a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1b2:	4454      	add	r4, sl
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	d053      	beq.n	800b260 <_dtoa_r+0x5d8>
 800b1b8:	4928      	ldr	r1, [pc, #160]	@ (800b25c <_dtoa_r+0x5d4>)
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	f7f5 fb66 	bl	800088c <__aeabi_ddiv>
 800b1c0:	4633      	mov	r3, r6
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	f7f5 f880 	bl	80002c8 <__aeabi_dsub>
 800b1c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b1cc:	4656      	mov	r6, sl
 800b1ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1d2:	f7f5 fce1 	bl	8000b98 <__aeabi_d2iz>
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	f7f5 f9c4 	bl	8000564 <__aeabi_i2d>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1e4:	f7f5 f870 	bl	80002c8 <__aeabi_dsub>
 800b1e8:	3530      	adds	r5, #48	@ 0x30
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1f2:	f806 5b01 	strb.w	r5, [r6], #1
 800b1f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b1fa:	f7f5 fc8f 	bl	8000b1c <__aeabi_dcmplt>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d171      	bne.n	800b2e6 <_dtoa_r+0x65e>
 800b202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b206:	4911      	ldr	r1, [pc, #68]	@ (800b24c <_dtoa_r+0x5c4>)
 800b208:	2000      	movs	r0, #0
 800b20a:	f7f5 f85d 	bl	80002c8 <__aeabi_dsub>
 800b20e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b212:	f7f5 fc83 	bl	8000b1c <__aeabi_dcmplt>
 800b216:	2800      	cmp	r0, #0
 800b218:	f040 8095 	bne.w	800b346 <_dtoa_r+0x6be>
 800b21c:	42a6      	cmp	r6, r4
 800b21e:	f43f af50 	beq.w	800b0c2 <_dtoa_r+0x43a>
 800b222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b226:	4b0a      	ldr	r3, [pc, #40]	@ (800b250 <_dtoa_r+0x5c8>)
 800b228:	2200      	movs	r2, #0
 800b22a:	f7f5 fa05 	bl	8000638 <__aeabi_dmul>
 800b22e:	4b08      	ldr	r3, [pc, #32]	@ (800b250 <_dtoa_r+0x5c8>)
 800b230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b234:	2200      	movs	r2, #0
 800b236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b23a:	f7f5 f9fd 	bl	8000638 <__aeabi_dmul>
 800b23e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b242:	e7c4      	b.n	800b1ce <_dtoa_r+0x546>
 800b244:	0800e260 	.word	0x0800e260
 800b248:	0800e238 	.word	0x0800e238
 800b24c:	3ff00000 	.word	0x3ff00000
 800b250:	40240000 	.word	0x40240000
 800b254:	401c0000 	.word	0x401c0000
 800b258:	40140000 	.word	0x40140000
 800b25c:	3fe00000 	.word	0x3fe00000
 800b260:	4631      	mov	r1, r6
 800b262:	4628      	mov	r0, r5
 800b264:	f7f5 f9e8 	bl	8000638 <__aeabi_dmul>
 800b268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b26c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b26e:	4656      	mov	r6, sl
 800b270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b274:	f7f5 fc90 	bl	8000b98 <__aeabi_d2iz>
 800b278:	4605      	mov	r5, r0
 800b27a:	f7f5 f973 	bl	8000564 <__aeabi_i2d>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b286:	f7f5 f81f 	bl	80002c8 <__aeabi_dsub>
 800b28a:	3530      	adds	r5, #48	@ 0x30
 800b28c:	f806 5b01 	strb.w	r5, [r6], #1
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	42a6      	cmp	r6, r4
 800b296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b29a:	f04f 0200 	mov.w	r2, #0
 800b29e:	d124      	bne.n	800b2ea <_dtoa_r+0x662>
 800b2a0:	4bac      	ldr	r3, [pc, #688]	@ (800b554 <_dtoa_r+0x8cc>)
 800b2a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b2a6:	f7f5 f811 	bl	80002cc <__adddf3>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2b2:	f7f5 fc51 	bl	8000b58 <__aeabi_dcmpgt>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d145      	bne.n	800b346 <_dtoa_r+0x6be>
 800b2ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2be:	49a5      	ldr	r1, [pc, #660]	@ (800b554 <_dtoa_r+0x8cc>)
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	f7f5 f801 	bl	80002c8 <__aeabi_dsub>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ce:	f7f5 fc25 	bl	8000b1c <__aeabi_dcmplt>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	f43f aef5 	beq.w	800b0c2 <_dtoa_r+0x43a>
 800b2d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b2da:	1e73      	subs	r3, r6, #1
 800b2dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b2de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2e2:	2b30      	cmp	r3, #48	@ 0x30
 800b2e4:	d0f8      	beq.n	800b2d8 <_dtoa_r+0x650>
 800b2e6:	9f04      	ldr	r7, [sp, #16]
 800b2e8:	e73e      	b.n	800b168 <_dtoa_r+0x4e0>
 800b2ea:	4b9b      	ldr	r3, [pc, #620]	@ (800b558 <_dtoa_r+0x8d0>)
 800b2ec:	f7f5 f9a4 	bl	8000638 <__aeabi_dmul>
 800b2f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f4:	e7bc      	b.n	800b270 <_dtoa_r+0x5e8>
 800b2f6:	d10c      	bne.n	800b312 <_dtoa_r+0x68a>
 800b2f8:	4b98      	ldr	r3, [pc, #608]	@ (800b55c <_dtoa_r+0x8d4>)
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b300:	f7f5 f99a 	bl	8000638 <__aeabi_dmul>
 800b304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b308:	f7f5 fc1c 	bl	8000b44 <__aeabi_dcmpge>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	f000 8157 	beq.w	800b5c0 <_dtoa_r+0x938>
 800b312:	2400      	movs	r4, #0
 800b314:	4625      	mov	r5, r4
 800b316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b318:	43db      	mvns	r3, r3
 800b31a:	9304      	str	r3, [sp, #16]
 800b31c:	4656      	mov	r6, sl
 800b31e:	2700      	movs	r7, #0
 800b320:	4621      	mov	r1, r4
 800b322:	4658      	mov	r0, fp
 800b324:	f000 fafe 	bl	800b924 <_Bfree>
 800b328:	2d00      	cmp	r5, #0
 800b32a:	d0dc      	beq.n	800b2e6 <_dtoa_r+0x65e>
 800b32c:	b12f      	cbz	r7, 800b33a <_dtoa_r+0x6b2>
 800b32e:	42af      	cmp	r7, r5
 800b330:	d003      	beq.n	800b33a <_dtoa_r+0x6b2>
 800b332:	4639      	mov	r1, r7
 800b334:	4658      	mov	r0, fp
 800b336:	f000 faf5 	bl	800b924 <_Bfree>
 800b33a:	4629      	mov	r1, r5
 800b33c:	4658      	mov	r0, fp
 800b33e:	f000 faf1 	bl	800b924 <_Bfree>
 800b342:	e7d0      	b.n	800b2e6 <_dtoa_r+0x65e>
 800b344:	9704      	str	r7, [sp, #16]
 800b346:	4633      	mov	r3, r6
 800b348:	461e      	mov	r6, r3
 800b34a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b34e:	2a39      	cmp	r2, #57	@ 0x39
 800b350:	d107      	bne.n	800b362 <_dtoa_r+0x6da>
 800b352:	459a      	cmp	sl, r3
 800b354:	d1f8      	bne.n	800b348 <_dtoa_r+0x6c0>
 800b356:	9a04      	ldr	r2, [sp, #16]
 800b358:	3201      	adds	r2, #1
 800b35a:	9204      	str	r2, [sp, #16]
 800b35c:	2230      	movs	r2, #48	@ 0x30
 800b35e:	f88a 2000 	strb.w	r2, [sl]
 800b362:	781a      	ldrb	r2, [r3, #0]
 800b364:	3201      	adds	r2, #1
 800b366:	701a      	strb	r2, [r3, #0]
 800b368:	e7bd      	b.n	800b2e6 <_dtoa_r+0x65e>
 800b36a:	4b7b      	ldr	r3, [pc, #492]	@ (800b558 <_dtoa_r+0x8d0>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	f7f5 f963 	bl	8000638 <__aeabi_dmul>
 800b372:	2200      	movs	r2, #0
 800b374:	2300      	movs	r3, #0
 800b376:	4604      	mov	r4, r0
 800b378:	460d      	mov	r5, r1
 800b37a:	f7f5 fbc5 	bl	8000b08 <__aeabi_dcmpeq>
 800b37e:	2800      	cmp	r0, #0
 800b380:	f43f aebb 	beq.w	800b0fa <_dtoa_r+0x472>
 800b384:	e6f0      	b.n	800b168 <_dtoa_r+0x4e0>
 800b386:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b388:	2a00      	cmp	r2, #0
 800b38a:	f000 80db 	beq.w	800b544 <_dtoa_r+0x8bc>
 800b38e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b390:	2a01      	cmp	r2, #1
 800b392:	f300 80bf 	bgt.w	800b514 <_dtoa_r+0x88c>
 800b396:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b398:	2a00      	cmp	r2, #0
 800b39a:	f000 80b7 	beq.w	800b50c <_dtoa_r+0x884>
 800b39e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b3a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b3a4:	4646      	mov	r6, r8
 800b3a6:	9a08      	ldr	r2, [sp, #32]
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	441a      	add	r2, r3
 800b3ac:	4658      	mov	r0, fp
 800b3ae:	4498      	add	r8, r3
 800b3b0:	9208      	str	r2, [sp, #32]
 800b3b2:	f000 fbb5 	bl	800bb20 <__i2b>
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	b15e      	cbz	r6, 800b3d2 <_dtoa_r+0x74a>
 800b3ba:	9b08      	ldr	r3, [sp, #32]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dd08      	ble.n	800b3d2 <_dtoa_r+0x74a>
 800b3c0:	42b3      	cmp	r3, r6
 800b3c2:	9a08      	ldr	r2, [sp, #32]
 800b3c4:	bfa8      	it	ge
 800b3c6:	4633      	movge	r3, r6
 800b3c8:	eba8 0803 	sub.w	r8, r8, r3
 800b3cc:	1af6      	subs	r6, r6, r3
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	9308      	str	r3, [sp, #32]
 800b3d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3d4:	b1f3      	cbz	r3, 800b414 <_dtoa_r+0x78c>
 800b3d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f000 80b7 	beq.w	800b54c <_dtoa_r+0x8c4>
 800b3de:	b18c      	cbz	r4, 800b404 <_dtoa_r+0x77c>
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	4658      	mov	r0, fp
 800b3e6:	f000 fc5b 	bl	800bca0 <__pow5mult>
 800b3ea:	464a      	mov	r2, r9
 800b3ec:	4601      	mov	r1, r0
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	4658      	mov	r0, fp
 800b3f2:	f000 fbab 	bl	800bb4c <__multiply>
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	9004      	str	r0, [sp, #16]
 800b3fa:	4658      	mov	r0, fp
 800b3fc:	f000 fa92 	bl	800b924 <_Bfree>
 800b400:	9b04      	ldr	r3, [sp, #16]
 800b402:	4699      	mov	r9, r3
 800b404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b406:	1b1a      	subs	r2, r3, r4
 800b408:	d004      	beq.n	800b414 <_dtoa_r+0x78c>
 800b40a:	4649      	mov	r1, r9
 800b40c:	4658      	mov	r0, fp
 800b40e:	f000 fc47 	bl	800bca0 <__pow5mult>
 800b412:	4681      	mov	r9, r0
 800b414:	2101      	movs	r1, #1
 800b416:	4658      	mov	r0, fp
 800b418:	f000 fb82 	bl	800bb20 <__i2b>
 800b41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b41e:	4604      	mov	r4, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	f000 81cf 	beq.w	800b7c4 <_dtoa_r+0xb3c>
 800b426:	461a      	mov	r2, r3
 800b428:	4601      	mov	r1, r0
 800b42a:	4658      	mov	r0, fp
 800b42c:	f000 fc38 	bl	800bca0 <__pow5mult>
 800b430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b432:	2b01      	cmp	r3, #1
 800b434:	4604      	mov	r4, r0
 800b436:	f300 8095 	bgt.w	800b564 <_dtoa_r+0x8dc>
 800b43a:	9b02      	ldr	r3, [sp, #8]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f040 8087 	bne.w	800b550 <_dtoa_r+0x8c8>
 800b442:	9b03      	ldr	r3, [sp, #12]
 800b444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f040 8089 	bne.w	800b560 <_dtoa_r+0x8d8>
 800b44e:	9b03      	ldr	r3, [sp, #12]
 800b450:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b454:	0d1b      	lsrs	r3, r3, #20
 800b456:	051b      	lsls	r3, r3, #20
 800b458:	b12b      	cbz	r3, 800b466 <_dtoa_r+0x7de>
 800b45a:	9b08      	ldr	r3, [sp, #32]
 800b45c:	3301      	adds	r3, #1
 800b45e:	9308      	str	r3, [sp, #32]
 800b460:	f108 0801 	add.w	r8, r8, #1
 800b464:	2301      	movs	r3, #1
 800b466:	930a      	str	r3, [sp, #40]	@ 0x28
 800b468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f000 81b0 	beq.w	800b7d0 <_dtoa_r+0xb48>
 800b470:	6923      	ldr	r3, [r4, #16]
 800b472:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b476:	6918      	ldr	r0, [r3, #16]
 800b478:	f000 fb06 	bl	800ba88 <__hi0bits>
 800b47c:	f1c0 0020 	rsb	r0, r0, #32
 800b480:	9b08      	ldr	r3, [sp, #32]
 800b482:	4418      	add	r0, r3
 800b484:	f010 001f 	ands.w	r0, r0, #31
 800b488:	d077      	beq.n	800b57a <_dtoa_r+0x8f2>
 800b48a:	f1c0 0320 	rsb	r3, r0, #32
 800b48e:	2b04      	cmp	r3, #4
 800b490:	dd6b      	ble.n	800b56a <_dtoa_r+0x8e2>
 800b492:	9b08      	ldr	r3, [sp, #32]
 800b494:	f1c0 001c 	rsb	r0, r0, #28
 800b498:	4403      	add	r3, r0
 800b49a:	4480      	add	r8, r0
 800b49c:	4406      	add	r6, r0
 800b49e:	9308      	str	r3, [sp, #32]
 800b4a0:	f1b8 0f00 	cmp.w	r8, #0
 800b4a4:	dd05      	ble.n	800b4b2 <_dtoa_r+0x82a>
 800b4a6:	4649      	mov	r1, r9
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	4658      	mov	r0, fp
 800b4ac:	f000 fc52 	bl	800bd54 <__lshift>
 800b4b0:	4681      	mov	r9, r0
 800b4b2:	9b08      	ldr	r3, [sp, #32]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dd05      	ble.n	800b4c4 <_dtoa_r+0x83c>
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	4658      	mov	r0, fp
 800b4be:	f000 fc49 	bl	800bd54 <__lshift>
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d059      	beq.n	800b57e <_dtoa_r+0x8f6>
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	4648      	mov	r0, r9
 800b4ce:	f000 fcad 	bl	800be2c <__mcmp>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	da53      	bge.n	800b57e <_dtoa_r+0x8f6>
 800b4d6:	1e7b      	subs	r3, r7, #1
 800b4d8:	9304      	str	r3, [sp, #16]
 800b4da:	4649      	mov	r1, r9
 800b4dc:	2300      	movs	r3, #0
 800b4de:	220a      	movs	r2, #10
 800b4e0:	4658      	mov	r0, fp
 800b4e2:	f000 fa41 	bl	800b968 <__multadd>
 800b4e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4e8:	4681      	mov	r9, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 8172 	beq.w	800b7d4 <_dtoa_r+0xb4c>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	220a      	movs	r2, #10
 800b4f6:	4658      	mov	r0, fp
 800b4f8:	f000 fa36 	bl	800b968 <__multadd>
 800b4fc:	9b00      	ldr	r3, [sp, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	4605      	mov	r5, r0
 800b502:	dc67      	bgt.n	800b5d4 <_dtoa_r+0x94c>
 800b504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b506:	2b02      	cmp	r3, #2
 800b508:	dc41      	bgt.n	800b58e <_dtoa_r+0x906>
 800b50a:	e063      	b.n	800b5d4 <_dtoa_r+0x94c>
 800b50c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b50e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b512:	e746      	b.n	800b3a2 <_dtoa_r+0x71a>
 800b514:	9b07      	ldr	r3, [sp, #28]
 800b516:	1e5c      	subs	r4, r3, #1
 800b518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b51a:	42a3      	cmp	r3, r4
 800b51c:	bfbf      	itttt	lt
 800b51e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b520:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b522:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b524:	1ae3      	sublt	r3, r4, r3
 800b526:	bfb4      	ite	lt
 800b528:	18d2      	addlt	r2, r2, r3
 800b52a:	1b1c      	subge	r4, r3, r4
 800b52c:	9b07      	ldr	r3, [sp, #28]
 800b52e:	bfbc      	itt	lt
 800b530:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b532:	2400      	movlt	r4, #0
 800b534:	2b00      	cmp	r3, #0
 800b536:	bfb5      	itete	lt
 800b538:	eba8 0603 	sublt.w	r6, r8, r3
 800b53c:	9b07      	ldrge	r3, [sp, #28]
 800b53e:	2300      	movlt	r3, #0
 800b540:	4646      	movge	r6, r8
 800b542:	e730      	b.n	800b3a6 <_dtoa_r+0x71e>
 800b544:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b546:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b548:	4646      	mov	r6, r8
 800b54a:	e735      	b.n	800b3b8 <_dtoa_r+0x730>
 800b54c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b54e:	e75c      	b.n	800b40a <_dtoa_r+0x782>
 800b550:	2300      	movs	r3, #0
 800b552:	e788      	b.n	800b466 <_dtoa_r+0x7de>
 800b554:	3fe00000 	.word	0x3fe00000
 800b558:	40240000 	.word	0x40240000
 800b55c:	40140000 	.word	0x40140000
 800b560:	9b02      	ldr	r3, [sp, #8]
 800b562:	e780      	b.n	800b466 <_dtoa_r+0x7de>
 800b564:	2300      	movs	r3, #0
 800b566:	930a      	str	r3, [sp, #40]	@ 0x28
 800b568:	e782      	b.n	800b470 <_dtoa_r+0x7e8>
 800b56a:	d099      	beq.n	800b4a0 <_dtoa_r+0x818>
 800b56c:	9a08      	ldr	r2, [sp, #32]
 800b56e:	331c      	adds	r3, #28
 800b570:	441a      	add	r2, r3
 800b572:	4498      	add	r8, r3
 800b574:	441e      	add	r6, r3
 800b576:	9208      	str	r2, [sp, #32]
 800b578:	e792      	b.n	800b4a0 <_dtoa_r+0x818>
 800b57a:	4603      	mov	r3, r0
 800b57c:	e7f6      	b.n	800b56c <_dtoa_r+0x8e4>
 800b57e:	9b07      	ldr	r3, [sp, #28]
 800b580:	9704      	str	r7, [sp, #16]
 800b582:	2b00      	cmp	r3, #0
 800b584:	dc20      	bgt.n	800b5c8 <_dtoa_r+0x940>
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	dd1e      	ble.n	800b5cc <_dtoa_r+0x944>
 800b58e:	9b00      	ldr	r3, [sp, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f47f aec0 	bne.w	800b316 <_dtoa_r+0x68e>
 800b596:	4621      	mov	r1, r4
 800b598:	2205      	movs	r2, #5
 800b59a:	4658      	mov	r0, fp
 800b59c:	f000 f9e4 	bl	800b968 <__multadd>
 800b5a0:	4601      	mov	r1, r0
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4648      	mov	r0, r9
 800b5a6:	f000 fc41 	bl	800be2c <__mcmp>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	f77f aeb3 	ble.w	800b316 <_dtoa_r+0x68e>
 800b5b0:	4656      	mov	r6, sl
 800b5b2:	2331      	movs	r3, #49	@ 0x31
 800b5b4:	f806 3b01 	strb.w	r3, [r6], #1
 800b5b8:	9b04      	ldr	r3, [sp, #16]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	9304      	str	r3, [sp, #16]
 800b5be:	e6ae      	b.n	800b31e <_dtoa_r+0x696>
 800b5c0:	9c07      	ldr	r4, [sp, #28]
 800b5c2:	9704      	str	r7, [sp, #16]
 800b5c4:	4625      	mov	r5, r4
 800b5c6:	e7f3      	b.n	800b5b0 <_dtoa_r+0x928>
 800b5c8:	9b07      	ldr	r3, [sp, #28]
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 8104 	beq.w	800b7dc <_dtoa_r+0xb54>
 800b5d4:	2e00      	cmp	r6, #0
 800b5d6:	dd05      	ble.n	800b5e4 <_dtoa_r+0x95c>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4632      	mov	r2, r6
 800b5dc:	4658      	mov	r0, fp
 800b5de:	f000 fbb9 	bl	800bd54 <__lshift>
 800b5e2:	4605      	mov	r5, r0
 800b5e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d05a      	beq.n	800b6a0 <_dtoa_r+0xa18>
 800b5ea:	6869      	ldr	r1, [r5, #4]
 800b5ec:	4658      	mov	r0, fp
 800b5ee:	f000 f959 	bl	800b8a4 <_Balloc>
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	b928      	cbnz	r0, 800b602 <_dtoa_r+0x97a>
 800b5f6:	4b84      	ldr	r3, [pc, #528]	@ (800b808 <_dtoa_r+0xb80>)
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b5fe:	f7ff bb5a 	b.w	800acb6 <_dtoa_r+0x2e>
 800b602:	692a      	ldr	r2, [r5, #16]
 800b604:	3202      	adds	r2, #2
 800b606:	0092      	lsls	r2, r2, #2
 800b608:	f105 010c 	add.w	r1, r5, #12
 800b60c:	300c      	adds	r0, #12
 800b60e:	f7ff fa9e 	bl	800ab4e <memcpy>
 800b612:	2201      	movs	r2, #1
 800b614:	4631      	mov	r1, r6
 800b616:	4658      	mov	r0, fp
 800b618:	f000 fb9c 	bl	800bd54 <__lshift>
 800b61c:	f10a 0301 	add.w	r3, sl, #1
 800b620:	9307      	str	r3, [sp, #28]
 800b622:	9b00      	ldr	r3, [sp, #0]
 800b624:	4453      	add	r3, sl
 800b626:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b628:	9b02      	ldr	r3, [sp, #8]
 800b62a:	f003 0301 	and.w	r3, r3, #1
 800b62e:	462f      	mov	r7, r5
 800b630:	930a      	str	r3, [sp, #40]	@ 0x28
 800b632:	4605      	mov	r5, r0
 800b634:	9b07      	ldr	r3, [sp, #28]
 800b636:	4621      	mov	r1, r4
 800b638:	3b01      	subs	r3, #1
 800b63a:	4648      	mov	r0, r9
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	f7ff fa9b 	bl	800ab78 <quorem>
 800b642:	4639      	mov	r1, r7
 800b644:	9002      	str	r0, [sp, #8]
 800b646:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b64a:	4648      	mov	r0, r9
 800b64c:	f000 fbee 	bl	800be2c <__mcmp>
 800b650:	462a      	mov	r2, r5
 800b652:	9008      	str	r0, [sp, #32]
 800b654:	4621      	mov	r1, r4
 800b656:	4658      	mov	r0, fp
 800b658:	f000 fc04 	bl	800be64 <__mdiff>
 800b65c:	68c2      	ldr	r2, [r0, #12]
 800b65e:	4606      	mov	r6, r0
 800b660:	bb02      	cbnz	r2, 800b6a4 <_dtoa_r+0xa1c>
 800b662:	4601      	mov	r1, r0
 800b664:	4648      	mov	r0, r9
 800b666:	f000 fbe1 	bl	800be2c <__mcmp>
 800b66a:	4602      	mov	r2, r0
 800b66c:	4631      	mov	r1, r6
 800b66e:	4658      	mov	r0, fp
 800b670:	920e      	str	r2, [sp, #56]	@ 0x38
 800b672:	f000 f957 	bl	800b924 <_Bfree>
 800b676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b678:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b67a:	9e07      	ldr	r6, [sp, #28]
 800b67c:	ea43 0102 	orr.w	r1, r3, r2
 800b680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b682:	4319      	orrs	r1, r3
 800b684:	d110      	bne.n	800b6a8 <_dtoa_r+0xa20>
 800b686:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b68a:	d029      	beq.n	800b6e0 <_dtoa_r+0xa58>
 800b68c:	9b08      	ldr	r3, [sp, #32]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dd02      	ble.n	800b698 <_dtoa_r+0xa10>
 800b692:	9b02      	ldr	r3, [sp, #8]
 800b694:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b698:	9b00      	ldr	r3, [sp, #0]
 800b69a:	f883 8000 	strb.w	r8, [r3]
 800b69e:	e63f      	b.n	800b320 <_dtoa_r+0x698>
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	e7bb      	b.n	800b61c <_dtoa_r+0x994>
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	e7e1      	b.n	800b66c <_dtoa_r+0x9e4>
 800b6a8:	9b08      	ldr	r3, [sp, #32]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	db04      	blt.n	800b6b8 <_dtoa_r+0xa30>
 800b6ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6b0:	430b      	orrs	r3, r1
 800b6b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6b4:	430b      	orrs	r3, r1
 800b6b6:	d120      	bne.n	800b6fa <_dtoa_r+0xa72>
 800b6b8:	2a00      	cmp	r2, #0
 800b6ba:	dded      	ble.n	800b698 <_dtoa_r+0xa10>
 800b6bc:	4649      	mov	r1, r9
 800b6be:	2201      	movs	r2, #1
 800b6c0:	4658      	mov	r0, fp
 800b6c2:	f000 fb47 	bl	800bd54 <__lshift>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4681      	mov	r9, r0
 800b6ca:	f000 fbaf 	bl	800be2c <__mcmp>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	dc03      	bgt.n	800b6da <_dtoa_r+0xa52>
 800b6d2:	d1e1      	bne.n	800b698 <_dtoa_r+0xa10>
 800b6d4:	f018 0f01 	tst.w	r8, #1
 800b6d8:	d0de      	beq.n	800b698 <_dtoa_r+0xa10>
 800b6da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6de:	d1d8      	bne.n	800b692 <_dtoa_r+0xa0a>
 800b6e0:	9a00      	ldr	r2, [sp, #0]
 800b6e2:	2339      	movs	r3, #57	@ 0x39
 800b6e4:	7013      	strb	r3, [r2, #0]
 800b6e6:	4633      	mov	r3, r6
 800b6e8:	461e      	mov	r6, r3
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b6f0:	2a39      	cmp	r2, #57	@ 0x39
 800b6f2:	d052      	beq.n	800b79a <_dtoa_r+0xb12>
 800b6f4:	3201      	adds	r2, #1
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	e612      	b.n	800b320 <_dtoa_r+0x698>
 800b6fa:	2a00      	cmp	r2, #0
 800b6fc:	dd07      	ble.n	800b70e <_dtoa_r+0xa86>
 800b6fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b702:	d0ed      	beq.n	800b6e0 <_dtoa_r+0xa58>
 800b704:	9a00      	ldr	r2, [sp, #0]
 800b706:	f108 0301 	add.w	r3, r8, #1
 800b70a:	7013      	strb	r3, [r2, #0]
 800b70c:	e608      	b.n	800b320 <_dtoa_r+0x698>
 800b70e:	9b07      	ldr	r3, [sp, #28]
 800b710:	9a07      	ldr	r2, [sp, #28]
 800b712:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b718:	4293      	cmp	r3, r2
 800b71a:	d028      	beq.n	800b76e <_dtoa_r+0xae6>
 800b71c:	4649      	mov	r1, r9
 800b71e:	2300      	movs	r3, #0
 800b720:	220a      	movs	r2, #10
 800b722:	4658      	mov	r0, fp
 800b724:	f000 f920 	bl	800b968 <__multadd>
 800b728:	42af      	cmp	r7, r5
 800b72a:	4681      	mov	r9, r0
 800b72c:	f04f 0300 	mov.w	r3, #0
 800b730:	f04f 020a 	mov.w	r2, #10
 800b734:	4639      	mov	r1, r7
 800b736:	4658      	mov	r0, fp
 800b738:	d107      	bne.n	800b74a <_dtoa_r+0xac2>
 800b73a:	f000 f915 	bl	800b968 <__multadd>
 800b73e:	4607      	mov	r7, r0
 800b740:	4605      	mov	r5, r0
 800b742:	9b07      	ldr	r3, [sp, #28]
 800b744:	3301      	adds	r3, #1
 800b746:	9307      	str	r3, [sp, #28]
 800b748:	e774      	b.n	800b634 <_dtoa_r+0x9ac>
 800b74a:	f000 f90d 	bl	800b968 <__multadd>
 800b74e:	4629      	mov	r1, r5
 800b750:	4607      	mov	r7, r0
 800b752:	2300      	movs	r3, #0
 800b754:	220a      	movs	r2, #10
 800b756:	4658      	mov	r0, fp
 800b758:	f000 f906 	bl	800b968 <__multadd>
 800b75c:	4605      	mov	r5, r0
 800b75e:	e7f0      	b.n	800b742 <_dtoa_r+0xaba>
 800b760:	9b00      	ldr	r3, [sp, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	bfcc      	ite	gt
 800b766:	461e      	movgt	r6, r3
 800b768:	2601      	movle	r6, #1
 800b76a:	4456      	add	r6, sl
 800b76c:	2700      	movs	r7, #0
 800b76e:	4649      	mov	r1, r9
 800b770:	2201      	movs	r2, #1
 800b772:	4658      	mov	r0, fp
 800b774:	f000 faee 	bl	800bd54 <__lshift>
 800b778:	4621      	mov	r1, r4
 800b77a:	4681      	mov	r9, r0
 800b77c:	f000 fb56 	bl	800be2c <__mcmp>
 800b780:	2800      	cmp	r0, #0
 800b782:	dcb0      	bgt.n	800b6e6 <_dtoa_r+0xa5e>
 800b784:	d102      	bne.n	800b78c <_dtoa_r+0xb04>
 800b786:	f018 0f01 	tst.w	r8, #1
 800b78a:	d1ac      	bne.n	800b6e6 <_dtoa_r+0xa5e>
 800b78c:	4633      	mov	r3, r6
 800b78e:	461e      	mov	r6, r3
 800b790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b794:	2a30      	cmp	r2, #48	@ 0x30
 800b796:	d0fa      	beq.n	800b78e <_dtoa_r+0xb06>
 800b798:	e5c2      	b.n	800b320 <_dtoa_r+0x698>
 800b79a:	459a      	cmp	sl, r3
 800b79c:	d1a4      	bne.n	800b6e8 <_dtoa_r+0xa60>
 800b79e:	9b04      	ldr	r3, [sp, #16]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	9304      	str	r3, [sp, #16]
 800b7a4:	2331      	movs	r3, #49	@ 0x31
 800b7a6:	f88a 3000 	strb.w	r3, [sl]
 800b7aa:	e5b9      	b.n	800b320 <_dtoa_r+0x698>
 800b7ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b80c <_dtoa_r+0xb84>
 800b7b2:	b11b      	cbz	r3, 800b7bc <_dtoa_r+0xb34>
 800b7b4:	f10a 0308 	add.w	r3, sl, #8
 800b7b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b7ba:	6013      	str	r3, [r2, #0]
 800b7bc:	4650      	mov	r0, sl
 800b7be:	b019      	add	sp, #100	@ 0x64
 800b7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	f77f ae37 	ble.w	800b43a <_dtoa_r+0x7b2>
 800b7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	e655      	b.n	800b480 <_dtoa_r+0x7f8>
 800b7d4:	9b00      	ldr	r3, [sp, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f77f aed6 	ble.w	800b588 <_dtoa_r+0x900>
 800b7dc:	4656      	mov	r6, sl
 800b7de:	4621      	mov	r1, r4
 800b7e0:	4648      	mov	r0, r9
 800b7e2:	f7ff f9c9 	bl	800ab78 <quorem>
 800b7e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b7ea:	f806 8b01 	strb.w	r8, [r6], #1
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	eba6 020a 	sub.w	r2, r6, sl
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	ddb3      	ble.n	800b760 <_dtoa_r+0xad8>
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	220a      	movs	r2, #10
 800b7fe:	4658      	mov	r0, fp
 800b800:	f000 f8b2 	bl	800b968 <__multadd>
 800b804:	4681      	mov	r9, r0
 800b806:	e7ea      	b.n	800b7de <_dtoa_r+0xb56>
 800b808:	0800e1bd 	.word	0x0800e1bd
 800b80c:	0800e141 	.word	0x0800e141

0800b810 <_free_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	4605      	mov	r5, r0
 800b814:	2900      	cmp	r1, #0
 800b816:	d041      	beq.n	800b89c <_free_r+0x8c>
 800b818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b81c:	1f0c      	subs	r4, r1, #4
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bfb8      	it	lt
 800b822:	18e4      	addlt	r4, r4, r3
 800b824:	f7fe f966 	bl	8009af4 <__malloc_lock>
 800b828:	4a1d      	ldr	r2, [pc, #116]	@ (800b8a0 <_free_r+0x90>)
 800b82a:	6813      	ldr	r3, [r2, #0]
 800b82c:	b933      	cbnz	r3, 800b83c <_free_r+0x2c>
 800b82e:	6063      	str	r3, [r4, #4]
 800b830:	6014      	str	r4, [r2, #0]
 800b832:	4628      	mov	r0, r5
 800b834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b838:	f7fe b962 	b.w	8009b00 <__malloc_unlock>
 800b83c:	42a3      	cmp	r3, r4
 800b83e:	d908      	bls.n	800b852 <_free_r+0x42>
 800b840:	6820      	ldr	r0, [r4, #0]
 800b842:	1821      	adds	r1, r4, r0
 800b844:	428b      	cmp	r3, r1
 800b846:	bf01      	itttt	eq
 800b848:	6819      	ldreq	r1, [r3, #0]
 800b84a:	685b      	ldreq	r3, [r3, #4]
 800b84c:	1809      	addeq	r1, r1, r0
 800b84e:	6021      	streq	r1, [r4, #0]
 800b850:	e7ed      	b.n	800b82e <_free_r+0x1e>
 800b852:	461a      	mov	r2, r3
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	b10b      	cbz	r3, 800b85c <_free_r+0x4c>
 800b858:	42a3      	cmp	r3, r4
 800b85a:	d9fa      	bls.n	800b852 <_free_r+0x42>
 800b85c:	6811      	ldr	r1, [r2, #0]
 800b85e:	1850      	adds	r0, r2, r1
 800b860:	42a0      	cmp	r0, r4
 800b862:	d10b      	bne.n	800b87c <_free_r+0x6c>
 800b864:	6820      	ldr	r0, [r4, #0]
 800b866:	4401      	add	r1, r0
 800b868:	1850      	adds	r0, r2, r1
 800b86a:	4283      	cmp	r3, r0
 800b86c:	6011      	str	r1, [r2, #0]
 800b86e:	d1e0      	bne.n	800b832 <_free_r+0x22>
 800b870:	6818      	ldr	r0, [r3, #0]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	6053      	str	r3, [r2, #4]
 800b876:	4408      	add	r0, r1
 800b878:	6010      	str	r0, [r2, #0]
 800b87a:	e7da      	b.n	800b832 <_free_r+0x22>
 800b87c:	d902      	bls.n	800b884 <_free_r+0x74>
 800b87e:	230c      	movs	r3, #12
 800b880:	602b      	str	r3, [r5, #0]
 800b882:	e7d6      	b.n	800b832 <_free_r+0x22>
 800b884:	6820      	ldr	r0, [r4, #0]
 800b886:	1821      	adds	r1, r4, r0
 800b888:	428b      	cmp	r3, r1
 800b88a:	bf04      	itt	eq
 800b88c:	6819      	ldreq	r1, [r3, #0]
 800b88e:	685b      	ldreq	r3, [r3, #4]
 800b890:	6063      	str	r3, [r4, #4]
 800b892:	bf04      	itt	eq
 800b894:	1809      	addeq	r1, r1, r0
 800b896:	6021      	streq	r1, [r4, #0]
 800b898:	6054      	str	r4, [r2, #4]
 800b89a:	e7ca      	b.n	800b832 <_free_r+0x22>
 800b89c:	bd38      	pop	{r3, r4, r5, pc}
 800b89e:	bf00      	nop
 800b8a0:	20019cbc 	.word	0x20019cbc

0800b8a4 <_Balloc>:
 800b8a4:	b570      	push	{r4, r5, r6, lr}
 800b8a6:	69c6      	ldr	r6, [r0, #28]
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	b976      	cbnz	r6, 800b8cc <_Balloc+0x28>
 800b8ae:	2010      	movs	r0, #16
 800b8b0:	f7fe f86e 	bl	8009990 <malloc>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	61e0      	str	r0, [r4, #28]
 800b8b8:	b920      	cbnz	r0, 800b8c4 <_Balloc+0x20>
 800b8ba:	4b18      	ldr	r3, [pc, #96]	@ (800b91c <_Balloc+0x78>)
 800b8bc:	4818      	ldr	r0, [pc, #96]	@ (800b920 <_Balloc+0x7c>)
 800b8be:	216b      	movs	r1, #107	@ 0x6b
 800b8c0:	f001 fd62 	bl	800d388 <__assert_func>
 800b8c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8c8:	6006      	str	r6, [r0, #0]
 800b8ca:	60c6      	str	r6, [r0, #12]
 800b8cc:	69e6      	ldr	r6, [r4, #28]
 800b8ce:	68f3      	ldr	r3, [r6, #12]
 800b8d0:	b183      	cbz	r3, 800b8f4 <_Balloc+0x50>
 800b8d2:	69e3      	ldr	r3, [r4, #28]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8da:	b9b8      	cbnz	r0, 800b90c <_Balloc+0x68>
 800b8dc:	2101      	movs	r1, #1
 800b8de:	fa01 f605 	lsl.w	r6, r1, r5
 800b8e2:	1d72      	adds	r2, r6, #5
 800b8e4:	0092      	lsls	r2, r2, #2
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f001 fd6c 	bl	800d3c4 <_calloc_r>
 800b8ec:	b160      	cbz	r0, 800b908 <_Balloc+0x64>
 800b8ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8f2:	e00e      	b.n	800b912 <_Balloc+0x6e>
 800b8f4:	2221      	movs	r2, #33	@ 0x21
 800b8f6:	2104      	movs	r1, #4
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f001 fd63 	bl	800d3c4 <_calloc_r>
 800b8fe:	69e3      	ldr	r3, [r4, #28]
 800b900:	60f0      	str	r0, [r6, #12]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1e4      	bne.n	800b8d2 <_Balloc+0x2e>
 800b908:	2000      	movs	r0, #0
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	6802      	ldr	r2, [r0, #0]
 800b90e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b912:	2300      	movs	r3, #0
 800b914:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b918:	e7f7      	b.n	800b90a <_Balloc+0x66>
 800b91a:	bf00      	nop
 800b91c:	0800e14e 	.word	0x0800e14e
 800b920:	0800e1ce 	.word	0x0800e1ce

0800b924 <_Bfree>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	69c6      	ldr	r6, [r0, #28]
 800b928:	4605      	mov	r5, r0
 800b92a:	460c      	mov	r4, r1
 800b92c:	b976      	cbnz	r6, 800b94c <_Bfree+0x28>
 800b92e:	2010      	movs	r0, #16
 800b930:	f7fe f82e 	bl	8009990 <malloc>
 800b934:	4602      	mov	r2, r0
 800b936:	61e8      	str	r0, [r5, #28]
 800b938:	b920      	cbnz	r0, 800b944 <_Bfree+0x20>
 800b93a:	4b09      	ldr	r3, [pc, #36]	@ (800b960 <_Bfree+0x3c>)
 800b93c:	4809      	ldr	r0, [pc, #36]	@ (800b964 <_Bfree+0x40>)
 800b93e:	218f      	movs	r1, #143	@ 0x8f
 800b940:	f001 fd22 	bl	800d388 <__assert_func>
 800b944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b948:	6006      	str	r6, [r0, #0]
 800b94a:	60c6      	str	r6, [r0, #12]
 800b94c:	b13c      	cbz	r4, 800b95e <_Bfree+0x3a>
 800b94e:	69eb      	ldr	r3, [r5, #28]
 800b950:	6862      	ldr	r2, [r4, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b958:	6021      	str	r1, [r4, #0]
 800b95a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b95e:	bd70      	pop	{r4, r5, r6, pc}
 800b960:	0800e14e 	.word	0x0800e14e
 800b964:	0800e1ce 	.word	0x0800e1ce

0800b968 <__multadd>:
 800b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96c:	690d      	ldr	r5, [r1, #16]
 800b96e:	4607      	mov	r7, r0
 800b970:	460c      	mov	r4, r1
 800b972:	461e      	mov	r6, r3
 800b974:	f101 0c14 	add.w	ip, r1, #20
 800b978:	2000      	movs	r0, #0
 800b97a:	f8dc 3000 	ldr.w	r3, [ip]
 800b97e:	b299      	uxth	r1, r3
 800b980:	fb02 6101 	mla	r1, r2, r1, r6
 800b984:	0c1e      	lsrs	r6, r3, #16
 800b986:	0c0b      	lsrs	r3, r1, #16
 800b988:	fb02 3306 	mla	r3, r2, r6, r3
 800b98c:	b289      	uxth	r1, r1
 800b98e:	3001      	adds	r0, #1
 800b990:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b994:	4285      	cmp	r5, r0
 800b996:	f84c 1b04 	str.w	r1, [ip], #4
 800b99a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b99e:	dcec      	bgt.n	800b97a <__multadd+0x12>
 800b9a0:	b30e      	cbz	r6, 800b9e6 <__multadd+0x7e>
 800b9a2:	68a3      	ldr	r3, [r4, #8]
 800b9a4:	42ab      	cmp	r3, r5
 800b9a6:	dc19      	bgt.n	800b9dc <__multadd+0x74>
 800b9a8:	6861      	ldr	r1, [r4, #4]
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	3101      	adds	r1, #1
 800b9ae:	f7ff ff79 	bl	800b8a4 <_Balloc>
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	b928      	cbnz	r0, 800b9c2 <__multadd+0x5a>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	4b0c      	ldr	r3, [pc, #48]	@ (800b9ec <__multadd+0x84>)
 800b9ba:	480d      	ldr	r0, [pc, #52]	@ (800b9f0 <__multadd+0x88>)
 800b9bc:	21ba      	movs	r1, #186	@ 0xba
 800b9be:	f001 fce3 	bl	800d388 <__assert_func>
 800b9c2:	6922      	ldr	r2, [r4, #16]
 800b9c4:	3202      	adds	r2, #2
 800b9c6:	f104 010c 	add.w	r1, r4, #12
 800b9ca:	0092      	lsls	r2, r2, #2
 800b9cc:	300c      	adds	r0, #12
 800b9ce:	f7ff f8be 	bl	800ab4e <memcpy>
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	4638      	mov	r0, r7
 800b9d6:	f7ff ffa5 	bl	800b924 <_Bfree>
 800b9da:	4644      	mov	r4, r8
 800b9dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9e0:	3501      	adds	r5, #1
 800b9e2:	615e      	str	r6, [r3, #20]
 800b9e4:	6125      	str	r5, [r4, #16]
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ec:	0800e1bd 	.word	0x0800e1bd
 800b9f0:	0800e1ce 	.word	0x0800e1ce

0800b9f4 <__s2b>:
 800b9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	4615      	mov	r5, r2
 800b9fc:	461f      	mov	r7, r3
 800b9fe:	2209      	movs	r2, #9
 800ba00:	3308      	adds	r3, #8
 800ba02:	4606      	mov	r6, r0
 800ba04:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba08:	2100      	movs	r1, #0
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	db09      	blt.n	800ba24 <__s2b+0x30>
 800ba10:	4630      	mov	r0, r6
 800ba12:	f7ff ff47 	bl	800b8a4 <_Balloc>
 800ba16:	b940      	cbnz	r0, 800ba2a <__s2b+0x36>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	4b19      	ldr	r3, [pc, #100]	@ (800ba80 <__s2b+0x8c>)
 800ba1c:	4819      	ldr	r0, [pc, #100]	@ (800ba84 <__s2b+0x90>)
 800ba1e:	21d3      	movs	r1, #211	@ 0xd3
 800ba20:	f001 fcb2 	bl	800d388 <__assert_func>
 800ba24:	0052      	lsls	r2, r2, #1
 800ba26:	3101      	adds	r1, #1
 800ba28:	e7f0      	b.n	800ba0c <__s2b+0x18>
 800ba2a:	9b08      	ldr	r3, [sp, #32]
 800ba2c:	6143      	str	r3, [r0, #20]
 800ba2e:	2d09      	cmp	r5, #9
 800ba30:	f04f 0301 	mov.w	r3, #1
 800ba34:	6103      	str	r3, [r0, #16]
 800ba36:	dd16      	ble.n	800ba66 <__s2b+0x72>
 800ba38:	f104 0909 	add.w	r9, r4, #9
 800ba3c:	46c8      	mov	r8, r9
 800ba3e:	442c      	add	r4, r5
 800ba40:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba44:	4601      	mov	r1, r0
 800ba46:	3b30      	subs	r3, #48	@ 0x30
 800ba48:	220a      	movs	r2, #10
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff ff8c 	bl	800b968 <__multadd>
 800ba50:	45a0      	cmp	r8, r4
 800ba52:	d1f5      	bne.n	800ba40 <__s2b+0x4c>
 800ba54:	f1a5 0408 	sub.w	r4, r5, #8
 800ba58:	444c      	add	r4, r9
 800ba5a:	1b2d      	subs	r5, r5, r4
 800ba5c:	1963      	adds	r3, r4, r5
 800ba5e:	42bb      	cmp	r3, r7
 800ba60:	db04      	blt.n	800ba6c <__s2b+0x78>
 800ba62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba66:	340a      	adds	r4, #10
 800ba68:	2509      	movs	r5, #9
 800ba6a:	e7f6      	b.n	800ba5a <__s2b+0x66>
 800ba6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba70:	4601      	mov	r1, r0
 800ba72:	3b30      	subs	r3, #48	@ 0x30
 800ba74:	220a      	movs	r2, #10
 800ba76:	4630      	mov	r0, r6
 800ba78:	f7ff ff76 	bl	800b968 <__multadd>
 800ba7c:	e7ee      	b.n	800ba5c <__s2b+0x68>
 800ba7e:	bf00      	nop
 800ba80:	0800e1bd 	.word	0x0800e1bd
 800ba84:	0800e1ce 	.word	0x0800e1ce

0800ba88 <__hi0bits>:
 800ba88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	bf36      	itet	cc
 800ba90:	0403      	lslcc	r3, r0, #16
 800ba92:	2000      	movcs	r0, #0
 800ba94:	2010      	movcc	r0, #16
 800ba96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba9a:	bf3c      	itt	cc
 800ba9c:	021b      	lslcc	r3, r3, #8
 800ba9e:	3008      	addcc	r0, #8
 800baa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800baa4:	bf3c      	itt	cc
 800baa6:	011b      	lslcc	r3, r3, #4
 800baa8:	3004      	addcc	r0, #4
 800baaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baae:	bf3c      	itt	cc
 800bab0:	009b      	lslcc	r3, r3, #2
 800bab2:	3002      	addcc	r0, #2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	db05      	blt.n	800bac4 <__hi0bits+0x3c>
 800bab8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800babc:	f100 0001 	add.w	r0, r0, #1
 800bac0:	bf08      	it	eq
 800bac2:	2020      	moveq	r0, #32
 800bac4:	4770      	bx	lr

0800bac6 <__lo0bits>:
 800bac6:	6803      	ldr	r3, [r0, #0]
 800bac8:	4602      	mov	r2, r0
 800baca:	f013 0007 	ands.w	r0, r3, #7
 800bace:	d00b      	beq.n	800bae8 <__lo0bits+0x22>
 800bad0:	07d9      	lsls	r1, r3, #31
 800bad2:	d421      	bmi.n	800bb18 <__lo0bits+0x52>
 800bad4:	0798      	lsls	r0, r3, #30
 800bad6:	bf49      	itett	mi
 800bad8:	085b      	lsrmi	r3, r3, #1
 800bada:	089b      	lsrpl	r3, r3, #2
 800badc:	2001      	movmi	r0, #1
 800bade:	6013      	strmi	r3, [r2, #0]
 800bae0:	bf5c      	itt	pl
 800bae2:	6013      	strpl	r3, [r2, #0]
 800bae4:	2002      	movpl	r0, #2
 800bae6:	4770      	bx	lr
 800bae8:	b299      	uxth	r1, r3
 800baea:	b909      	cbnz	r1, 800baf0 <__lo0bits+0x2a>
 800baec:	0c1b      	lsrs	r3, r3, #16
 800baee:	2010      	movs	r0, #16
 800baf0:	b2d9      	uxtb	r1, r3
 800baf2:	b909      	cbnz	r1, 800baf8 <__lo0bits+0x32>
 800baf4:	3008      	adds	r0, #8
 800baf6:	0a1b      	lsrs	r3, r3, #8
 800baf8:	0719      	lsls	r1, r3, #28
 800bafa:	bf04      	itt	eq
 800bafc:	091b      	lsreq	r3, r3, #4
 800bafe:	3004      	addeq	r0, #4
 800bb00:	0799      	lsls	r1, r3, #30
 800bb02:	bf04      	itt	eq
 800bb04:	089b      	lsreq	r3, r3, #2
 800bb06:	3002      	addeq	r0, #2
 800bb08:	07d9      	lsls	r1, r3, #31
 800bb0a:	d403      	bmi.n	800bb14 <__lo0bits+0x4e>
 800bb0c:	085b      	lsrs	r3, r3, #1
 800bb0e:	f100 0001 	add.w	r0, r0, #1
 800bb12:	d003      	beq.n	800bb1c <__lo0bits+0x56>
 800bb14:	6013      	str	r3, [r2, #0]
 800bb16:	4770      	bx	lr
 800bb18:	2000      	movs	r0, #0
 800bb1a:	4770      	bx	lr
 800bb1c:	2020      	movs	r0, #32
 800bb1e:	4770      	bx	lr

0800bb20 <__i2b>:
 800bb20:	b510      	push	{r4, lr}
 800bb22:	460c      	mov	r4, r1
 800bb24:	2101      	movs	r1, #1
 800bb26:	f7ff febd 	bl	800b8a4 <_Balloc>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	b928      	cbnz	r0, 800bb3a <__i2b+0x1a>
 800bb2e:	4b05      	ldr	r3, [pc, #20]	@ (800bb44 <__i2b+0x24>)
 800bb30:	4805      	ldr	r0, [pc, #20]	@ (800bb48 <__i2b+0x28>)
 800bb32:	f240 1145 	movw	r1, #325	@ 0x145
 800bb36:	f001 fc27 	bl	800d388 <__assert_func>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	6144      	str	r4, [r0, #20]
 800bb3e:	6103      	str	r3, [r0, #16]
 800bb40:	bd10      	pop	{r4, pc}
 800bb42:	bf00      	nop
 800bb44:	0800e1bd 	.word	0x0800e1bd
 800bb48:	0800e1ce 	.word	0x0800e1ce

0800bb4c <__multiply>:
 800bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb50:	4614      	mov	r4, r2
 800bb52:	690a      	ldr	r2, [r1, #16]
 800bb54:	6923      	ldr	r3, [r4, #16]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	bfa8      	it	ge
 800bb5a:	4623      	movge	r3, r4
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	bfa4      	itt	ge
 800bb60:	460c      	movge	r4, r1
 800bb62:	461f      	movge	r7, r3
 800bb64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bb68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bb6c:	68a3      	ldr	r3, [r4, #8]
 800bb6e:	6861      	ldr	r1, [r4, #4]
 800bb70:	eb0a 0609 	add.w	r6, sl, r9
 800bb74:	42b3      	cmp	r3, r6
 800bb76:	b085      	sub	sp, #20
 800bb78:	bfb8      	it	lt
 800bb7a:	3101      	addlt	r1, #1
 800bb7c:	f7ff fe92 	bl	800b8a4 <_Balloc>
 800bb80:	b930      	cbnz	r0, 800bb90 <__multiply+0x44>
 800bb82:	4602      	mov	r2, r0
 800bb84:	4b44      	ldr	r3, [pc, #272]	@ (800bc98 <__multiply+0x14c>)
 800bb86:	4845      	ldr	r0, [pc, #276]	@ (800bc9c <__multiply+0x150>)
 800bb88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb8c:	f001 fbfc 	bl	800d388 <__assert_func>
 800bb90:	f100 0514 	add.w	r5, r0, #20
 800bb94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb98:	462b      	mov	r3, r5
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4543      	cmp	r3, r8
 800bb9e:	d321      	bcc.n	800bbe4 <__multiply+0x98>
 800bba0:	f107 0114 	add.w	r1, r7, #20
 800bba4:	f104 0214 	add.w	r2, r4, #20
 800bba8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bbac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bbb0:	9302      	str	r3, [sp, #8]
 800bbb2:	1b13      	subs	r3, r2, r4
 800bbb4:	3b15      	subs	r3, #21
 800bbb6:	f023 0303 	bic.w	r3, r3, #3
 800bbba:	3304      	adds	r3, #4
 800bbbc:	f104 0715 	add.w	r7, r4, #21
 800bbc0:	42ba      	cmp	r2, r7
 800bbc2:	bf38      	it	cc
 800bbc4:	2304      	movcc	r3, #4
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	9b02      	ldr	r3, [sp, #8]
 800bbca:	9103      	str	r1, [sp, #12]
 800bbcc:	428b      	cmp	r3, r1
 800bbce:	d80c      	bhi.n	800bbea <__multiply+0x9e>
 800bbd0:	2e00      	cmp	r6, #0
 800bbd2:	dd03      	ble.n	800bbdc <__multiply+0x90>
 800bbd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d05b      	beq.n	800bc94 <__multiply+0x148>
 800bbdc:	6106      	str	r6, [r0, #16]
 800bbde:	b005      	add	sp, #20
 800bbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe4:	f843 2b04 	str.w	r2, [r3], #4
 800bbe8:	e7d8      	b.n	800bb9c <__multiply+0x50>
 800bbea:	f8b1 a000 	ldrh.w	sl, [r1]
 800bbee:	f1ba 0f00 	cmp.w	sl, #0
 800bbf2:	d024      	beq.n	800bc3e <__multiply+0xf2>
 800bbf4:	f104 0e14 	add.w	lr, r4, #20
 800bbf8:	46a9      	mov	r9, r5
 800bbfa:	f04f 0c00 	mov.w	ip, #0
 800bbfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc02:	f8d9 3000 	ldr.w	r3, [r9]
 800bc06:	fa1f fb87 	uxth.w	fp, r7
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bc10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bc14:	f8d9 7000 	ldr.w	r7, [r9]
 800bc18:	4463      	add	r3, ip
 800bc1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc1e:	fb0a c70b 	mla	r7, sl, fp, ip
 800bc22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc2c:	4572      	cmp	r2, lr
 800bc2e:	f849 3b04 	str.w	r3, [r9], #4
 800bc32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc36:	d8e2      	bhi.n	800bbfe <__multiply+0xb2>
 800bc38:	9b01      	ldr	r3, [sp, #4]
 800bc3a:	f845 c003 	str.w	ip, [r5, r3]
 800bc3e:	9b03      	ldr	r3, [sp, #12]
 800bc40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bc44:	3104      	adds	r1, #4
 800bc46:	f1b9 0f00 	cmp.w	r9, #0
 800bc4a:	d021      	beq.n	800bc90 <__multiply+0x144>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	f104 0c14 	add.w	ip, r4, #20
 800bc52:	46ae      	mov	lr, r5
 800bc54:	f04f 0a00 	mov.w	sl, #0
 800bc58:	f8bc b000 	ldrh.w	fp, [ip]
 800bc5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bc60:	fb09 770b 	mla	r7, r9, fp, r7
 800bc64:	4457      	add	r7, sl
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc6c:	f84e 3b04 	str.w	r3, [lr], #4
 800bc70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc78:	f8be 3000 	ldrh.w	r3, [lr]
 800bc7c:	fb09 330a 	mla	r3, r9, sl, r3
 800bc80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bc84:	4562      	cmp	r2, ip
 800bc86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc8a:	d8e5      	bhi.n	800bc58 <__multiply+0x10c>
 800bc8c:	9f01      	ldr	r7, [sp, #4]
 800bc8e:	51eb      	str	r3, [r5, r7]
 800bc90:	3504      	adds	r5, #4
 800bc92:	e799      	b.n	800bbc8 <__multiply+0x7c>
 800bc94:	3e01      	subs	r6, #1
 800bc96:	e79b      	b.n	800bbd0 <__multiply+0x84>
 800bc98:	0800e1bd 	.word	0x0800e1bd
 800bc9c:	0800e1ce 	.word	0x0800e1ce

0800bca0 <__pow5mult>:
 800bca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca4:	4615      	mov	r5, r2
 800bca6:	f012 0203 	ands.w	r2, r2, #3
 800bcaa:	4607      	mov	r7, r0
 800bcac:	460e      	mov	r6, r1
 800bcae:	d007      	beq.n	800bcc0 <__pow5mult+0x20>
 800bcb0:	4c25      	ldr	r4, [pc, #148]	@ (800bd48 <__pow5mult+0xa8>)
 800bcb2:	3a01      	subs	r2, #1
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcba:	f7ff fe55 	bl	800b968 <__multadd>
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	10ad      	asrs	r5, r5, #2
 800bcc2:	d03d      	beq.n	800bd40 <__pow5mult+0xa0>
 800bcc4:	69fc      	ldr	r4, [r7, #28]
 800bcc6:	b97c      	cbnz	r4, 800bce8 <__pow5mult+0x48>
 800bcc8:	2010      	movs	r0, #16
 800bcca:	f7fd fe61 	bl	8009990 <malloc>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	61f8      	str	r0, [r7, #28]
 800bcd2:	b928      	cbnz	r0, 800bce0 <__pow5mult+0x40>
 800bcd4:	4b1d      	ldr	r3, [pc, #116]	@ (800bd4c <__pow5mult+0xac>)
 800bcd6:	481e      	ldr	r0, [pc, #120]	@ (800bd50 <__pow5mult+0xb0>)
 800bcd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bcdc:	f001 fb54 	bl	800d388 <__assert_func>
 800bce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bce4:	6004      	str	r4, [r0, #0]
 800bce6:	60c4      	str	r4, [r0, #12]
 800bce8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bcec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcf0:	b94c      	cbnz	r4, 800bd06 <__pow5mult+0x66>
 800bcf2:	f240 2171 	movw	r1, #625	@ 0x271
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	f7ff ff12 	bl	800bb20 <__i2b>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd02:	4604      	mov	r4, r0
 800bd04:	6003      	str	r3, [r0, #0]
 800bd06:	f04f 0900 	mov.w	r9, #0
 800bd0a:	07eb      	lsls	r3, r5, #31
 800bd0c:	d50a      	bpl.n	800bd24 <__pow5mult+0x84>
 800bd0e:	4631      	mov	r1, r6
 800bd10:	4622      	mov	r2, r4
 800bd12:	4638      	mov	r0, r7
 800bd14:	f7ff ff1a 	bl	800bb4c <__multiply>
 800bd18:	4631      	mov	r1, r6
 800bd1a:	4680      	mov	r8, r0
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	f7ff fe01 	bl	800b924 <_Bfree>
 800bd22:	4646      	mov	r6, r8
 800bd24:	106d      	asrs	r5, r5, #1
 800bd26:	d00b      	beq.n	800bd40 <__pow5mult+0xa0>
 800bd28:	6820      	ldr	r0, [r4, #0]
 800bd2a:	b938      	cbnz	r0, 800bd3c <__pow5mult+0x9c>
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	4621      	mov	r1, r4
 800bd30:	4638      	mov	r0, r7
 800bd32:	f7ff ff0b 	bl	800bb4c <__multiply>
 800bd36:	6020      	str	r0, [r4, #0]
 800bd38:	f8c0 9000 	str.w	r9, [r0]
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	e7e4      	b.n	800bd0a <__pow5mult+0x6a>
 800bd40:	4630      	mov	r0, r6
 800bd42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd46:	bf00      	nop
 800bd48:	0800e228 	.word	0x0800e228
 800bd4c:	0800e14e 	.word	0x0800e14e
 800bd50:	0800e1ce 	.word	0x0800e1ce

0800bd54 <__lshift>:
 800bd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd58:	460c      	mov	r4, r1
 800bd5a:	6849      	ldr	r1, [r1, #4]
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd62:	68a3      	ldr	r3, [r4, #8]
 800bd64:	4607      	mov	r7, r0
 800bd66:	4691      	mov	r9, r2
 800bd68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd6c:	f108 0601 	add.w	r6, r8, #1
 800bd70:	42b3      	cmp	r3, r6
 800bd72:	db0b      	blt.n	800bd8c <__lshift+0x38>
 800bd74:	4638      	mov	r0, r7
 800bd76:	f7ff fd95 	bl	800b8a4 <_Balloc>
 800bd7a:	4605      	mov	r5, r0
 800bd7c:	b948      	cbnz	r0, 800bd92 <__lshift+0x3e>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	4b28      	ldr	r3, [pc, #160]	@ (800be24 <__lshift+0xd0>)
 800bd82:	4829      	ldr	r0, [pc, #164]	@ (800be28 <__lshift+0xd4>)
 800bd84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd88:	f001 fafe 	bl	800d388 <__assert_func>
 800bd8c:	3101      	adds	r1, #1
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	e7ee      	b.n	800bd70 <__lshift+0x1c>
 800bd92:	2300      	movs	r3, #0
 800bd94:	f100 0114 	add.w	r1, r0, #20
 800bd98:	f100 0210 	add.w	r2, r0, #16
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	4553      	cmp	r3, sl
 800bda0:	db33      	blt.n	800be0a <__lshift+0xb6>
 800bda2:	6920      	ldr	r0, [r4, #16]
 800bda4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bda8:	f104 0314 	add.w	r3, r4, #20
 800bdac:	f019 091f 	ands.w	r9, r9, #31
 800bdb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bdb8:	d02b      	beq.n	800be12 <__lshift+0xbe>
 800bdba:	f1c9 0e20 	rsb	lr, r9, #32
 800bdbe:	468a      	mov	sl, r1
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	6818      	ldr	r0, [r3, #0]
 800bdc4:	fa00 f009 	lsl.w	r0, r0, r9
 800bdc8:	4310      	orrs	r0, r2
 800bdca:	f84a 0b04 	str.w	r0, [sl], #4
 800bdce:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdd2:	459c      	cmp	ip, r3
 800bdd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdd8:	d8f3      	bhi.n	800bdc2 <__lshift+0x6e>
 800bdda:	ebac 0304 	sub.w	r3, ip, r4
 800bdde:	3b15      	subs	r3, #21
 800bde0:	f023 0303 	bic.w	r3, r3, #3
 800bde4:	3304      	adds	r3, #4
 800bde6:	f104 0015 	add.w	r0, r4, #21
 800bdea:	4584      	cmp	ip, r0
 800bdec:	bf38      	it	cc
 800bdee:	2304      	movcc	r3, #4
 800bdf0:	50ca      	str	r2, [r1, r3]
 800bdf2:	b10a      	cbz	r2, 800bdf8 <__lshift+0xa4>
 800bdf4:	f108 0602 	add.w	r6, r8, #2
 800bdf8:	3e01      	subs	r6, #1
 800bdfa:	4638      	mov	r0, r7
 800bdfc:	612e      	str	r6, [r5, #16]
 800bdfe:	4621      	mov	r1, r4
 800be00:	f7ff fd90 	bl	800b924 <_Bfree>
 800be04:	4628      	mov	r0, r5
 800be06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800be0e:	3301      	adds	r3, #1
 800be10:	e7c5      	b.n	800bd9e <__lshift+0x4a>
 800be12:	3904      	subs	r1, #4
 800be14:	f853 2b04 	ldr.w	r2, [r3], #4
 800be18:	f841 2f04 	str.w	r2, [r1, #4]!
 800be1c:	459c      	cmp	ip, r3
 800be1e:	d8f9      	bhi.n	800be14 <__lshift+0xc0>
 800be20:	e7ea      	b.n	800bdf8 <__lshift+0xa4>
 800be22:	bf00      	nop
 800be24:	0800e1bd 	.word	0x0800e1bd
 800be28:	0800e1ce 	.word	0x0800e1ce

0800be2c <__mcmp>:
 800be2c:	690a      	ldr	r2, [r1, #16]
 800be2e:	4603      	mov	r3, r0
 800be30:	6900      	ldr	r0, [r0, #16]
 800be32:	1a80      	subs	r0, r0, r2
 800be34:	b530      	push	{r4, r5, lr}
 800be36:	d10e      	bne.n	800be56 <__mcmp+0x2a>
 800be38:	3314      	adds	r3, #20
 800be3a:	3114      	adds	r1, #20
 800be3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be4c:	4295      	cmp	r5, r2
 800be4e:	d003      	beq.n	800be58 <__mcmp+0x2c>
 800be50:	d205      	bcs.n	800be5e <__mcmp+0x32>
 800be52:	f04f 30ff 	mov.w	r0, #4294967295
 800be56:	bd30      	pop	{r4, r5, pc}
 800be58:	42a3      	cmp	r3, r4
 800be5a:	d3f3      	bcc.n	800be44 <__mcmp+0x18>
 800be5c:	e7fb      	b.n	800be56 <__mcmp+0x2a>
 800be5e:	2001      	movs	r0, #1
 800be60:	e7f9      	b.n	800be56 <__mcmp+0x2a>
	...

0800be64 <__mdiff>:
 800be64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be68:	4689      	mov	r9, r1
 800be6a:	4606      	mov	r6, r0
 800be6c:	4611      	mov	r1, r2
 800be6e:	4648      	mov	r0, r9
 800be70:	4614      	mov	r4, r2
 800be72:	f7ff ffdb 	bl	800be2c <__mcmp>
 800be76:	1e05      	subs	r5, r0, #0
 800be78:	d112      	bne.n	800bea0 <__mdiff+0x3c>
 800be7a:	4629      	mov	r1, r5
 800be7c:	4630      	mov	r0, r6
 800be7e:	f7ff fd11 	bl	800b8a4 <_Balloc>
 800be82:	4602      	mov	r2, r0
 800be84:	b928      	cbnz	r0, 800be92 <__mdiff+0x2e>
 800be86:	4b3f      	ldr	r3, [pc, #252]	@ (800bf84 <__mdiff+0x120>)
 800be88:	f240 2137 	movw	r1, #567	@ 0x237
 800be8c:	483e      	ldr	r0, [pc, #248]	@ (800bf88 <__mdiff+0x124>)
 800be8e:	f001 fa7b 	bl	800d388 <__assert_func>
 800be92:	2301      	movs	r3, #1
 800be94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be98:	4610      	mov	r0, r2
 800be9a:	b003      	add	sp, #12
 800be9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea0:	bfbc      	itt	lt
 800bea2:	464b      	movlt	r3, r9
 800bea4:	46a1      	movlt	r9, r4
 800bea6:	4630      	mov	r0, r6
 800bea8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800beac:	bfba      	itte	lt
 800beae:	461c      	movlt	r4, r3
 800beb0:	2501      	movlt	r5, #1
 800beb2:	2500      	movge	r5, #0
 800beb4:	f7ff fcf6 	bl	800b8a4 <_Balloc>
 800beb8:	4602      	mov	r2, r0
 800beba:	b918      	cbnz	r0, 800bec4 <__mdiff+0x60>
 800bebc:	4b31      	ldr	r3, [pc, #196]	@ (800bf84 <__mdiff+0x120>)
 800bebe:	f240 2145 	movw	r1, #581	@ 0x245
 800bec2:	e7e3      	b.n	800be8c <__mdiff+0x28>
 800bec4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bec8:	6926      	ldr	r6, [r4, #16]
 800beca:	60c5      	str	r5, [r0, #12]
 800becc:	f109 0310 	add.w	r3, r9, #16
 800bed0:	f109 0514 	add.w	r5, r9, #20
 800bed4:	f104 0e14 	add.w	lr, r4, #20
 800bed8:	f100 0b14 	add.w	fp, r0, #20
 800bedc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bee0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bee4:	9301      	str	r3, [sp, #4]
 800bee6:	46d9      	mov	r9, fp
 800bee8:	f04f 0c00 	mov.w	ip, #0
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bef2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	fa1f f38a 	uxth.w	r3, sl
 800befc:	4619      	mov	r1, r3
 800befe:	b283      	uxth	r3, r0
 800bf00:	1acb      	subs	r3, r1, r3
 800bf02:	0c00      	lsrs	r0, r0, #16
 800bf04:	4463      	add	r3, ip
 800bf06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bf0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf14:	4576      	cmp	r6, lr
 800bf16:	f849 3b04 	str.w	r3, [r9], #4
 800bf1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf1e:	d8e5      	bhi.n	800beec <__mdiff+0x88>
 800bf20:	1b33      	subs	r3, r6, r4
 800bf22:	3b15      	subs	r3, #21
 800bf24:	f023 0303 	bic.w	r3, r3, #3
 800bf28:	3415      	adds	r4, #21
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	42a6      	cmp	r6, r4
 800bf2e:	bf38      	it	cc
 800bf30:	2304      	movcc	r3, #4
 800bf32:	441d      	add	r5, r3
 800bf34:	445b      	add	r3, fp
 800bf36:	461e      	mov	r6, r3
 800bf38:	462c      	mov	r4, r5
 800bf3a:	4544      	cmp	r4, r8
 800bf3c:	d30e      	bcc.n	800bf5c <__mdiff+0xf8>
 800bf3e:	f108 0103 	add.w	r1, r8, #3
 800bf42:	1b49      	subs	r1, r1, r5
 800bf44:	f021 0103 	bic.w	r1, r1, #3
 800bf48:	3d03      	subs	r5, #3
 800bf4a:	45a8      	cmp	r8, r5
 800bf4c:	bf38      	it	cc
 800bf4e:	2100      	movcc	r1, #0
 800bf50:	440b      	add	r3, r1
 800bf52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf56:	b191      	cbz	r1, 800bf7e <__mdiff+0x11a>
 800bf58:	6117      	str	r7, [r2, #16]
 800bf5a:	e79d      	b.n	800be98 <__mdiff+0x34>
 800bf5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf60:	46e6      	mov	lr, ip
 800bf62:	0c08      	lsrs	r0, r1, #16
 800bf64:	fa1c fc81 	uxtah	ip, ip, r1
 800bf68:	4471      	add	r1, lr
 800bf6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf6e:	b289      	uxth	r1, r1
 800bf70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf74:	f846 1b04 	str.w	r1, [r6], #4
 800bf78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf7c:	e7dd      	b.n	800bf3a <__mdiff+0xd6>
 800bf7e:	3f01      	subs	r7, #1
 800bf80:	e7e7      	b.n	800bf52 <__mdiff+0xee>
 800bf82:	bf00      	nop
 800bf84:	0800e1bd 	.word	0x0800e1bd
 800bf88:	0800e1ce 	.word	0x0800e1ce

0800bf8c <__ulp>:
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	ed8d 0b00 	vstr	d0, [sp]
 800bf92:	9a01      	ldr	r2, [sp, #4]
 800bf94:	4b0f      	ldr	r3, [pc, #60]	@ (800bfd4 <__ulp+0x48>)
 800bf96:	4013      	ands	r3, r2
 800bf98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	dc08      	bgt.n	800bfb2 <__ulp+0x26>
 800bfa0:	425b      	negs	r3, r3
 800bfa2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bfa6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bfaa:	da04      	bge.n	800bfb6 <__ulp+0x2a>
 800bfac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bfb0:	4113      	asrs	r3, r2
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	e008      	b.n	800bfc8 <__ulp+0x3c>
 800bfb6:	f1a2 0314 	sub.w	r3, r2, #20
 800bfba:	2b1e      	cmp	r3, #30
 800bfbc:	bfda      	itte	le
 800bfbe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bfc2:	40da      	lsrle	r2, r3
 800bfc4:	2201      	movgt	r2, #1
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4610      	mov	r0, r2
 800bfcc:	ec41 0b10 	vmov	d0, r0, r1
 800bfd0:	b002      	add	sp, #8
 800bfd2:	4770      	bx	lr
 800bfd4:	7ff00000 	.word	0x7ff00000

0800bfd8 <__b2d>:
 800bfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfdc:	6906      	ldr	r6, [r0, #16]
 800bfde:	f100 0814 	add.w	r8, r0, #20
 800bfe2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bfe6:	1f37      	subs	r7, r6, #4
 800bfe8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bfec:	4610      	mov	r0, r2
 800bfee:	f7ff fd4b 	bl	800ba88 <__hi0bits>
 800bff2:	f1c0 0320 	rsb	r3, r0, #32
 800bff6:	280a      	cmp	r0, #10
 800bff8:	600b      	str	r3, [r1, #0]
 800bffa:	491b      	ldr	r1, [pc, #108]	@ (800c068 <__b2d+0x90>)
 800bffc:	dc15      	bgt.n	800c02a <__b2d+0x52>
 800bffe:	f1c0 0c0b 	rsb	ip, r0, #11
 800c002:	fa22 f30c 	lsr.w	r3, r2, ip
 800c006:	45b8      	cmp	r8, r7
 800c008:	ea43 0501 	orr.w	r5, r3, r1
 800c00c:	bf34      	ite	cc
 800c00e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c012:	2300      	movcs	r3, #0
 800c014:	3015      	adds	r0, #21
 800c016:	fa02 f000 	lsl.w	r0, r2, r0
 800c01a:	fa23 f30c 	lsr.w	r3, r3, ip
 800c01e:	4303      	orrs	r3, r0
 800c020:	461c      	mov	r4, r3
 800c022:	ec45 4b10 	vmov	d0, r4, r5
 800c026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c02a:	45b8      	cmp	r8, r7
 800c02c:	bf3a      	itte	cc
 800c02e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c032:	f1a6 0708 	subcc.w	r7, r6, #8
 800c036:	2300      	movcs	r3, #0
 800c038:	380b      	subs	r0, #11
 800c03a:	d012      	beq.n	800c062 <__b2d+0x8a>
 800c03c:	f1c0 0120 	rsb	r1, r0, #32
 800c040:	fa23 f401 	lsr.w	r4, r3, r1
 800c044:	4082      	lsls	r2, r0
 800c046:	4322      	orrs	r2, r4
 800c048:	4547      	cmp	r7, r8
 800c04a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c04e:	bf8c      	ite	hi
 800c050:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c054:	2200      	movls	r2, #0
 800c056:	4083      	lsls	r3, r0
 800c058:	40ca      	lsrs	r2, r1
 800c05a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c05e:	4313      	orrs	r3, r2
 800c060:	e7de      	b.n	800c020 <__b2d+0x48>
 800c062:	ea42 0501 	orr.w	r5, r2, r1
 800c066:	e7db      	b.n	800c020 <__b2d+0x48>
 800c068:	3ff00000 	.word	0x3ff00000

0800c06c <__d2b>:
 800c06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c070:	460f      	mov	r7, r1
 800c072:	2101      	movs	r1, #1
 800c074:	ec59 8b10 	vmov	r8, r9, d0
 800c078:	4616      	mov	r6, r2
 800c07a:	f7ff fc13 	bl	800b8a4 <_Balloc>
 800c07e:	4604      	mov	r4, r0
 800c080:	b930      	cbnz	r0, 800c090 <__d2b+0x24>
 800c082:	4602      	mov	r2, r0
 800c084:	4b23      	ldr	r3, [pc, #140]	@ (800c114 <__d2b+0xa8>)
 800c086:	4824      	ldr	r0, [pc, #144]	@ (800c118 <__d2b+0xac>)
 800c088:	f240 310f 	movw	r1, #783	@ 0x30f
 800c08c:	f001 f97c 	bl	800d388 <__assert_func>
 800c090:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c098:	b10d      	cbz	r5, 800c09e <__d2b+0x32>
 800c09a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	f1b8 0300 	subs.w	r3, r8, #0
 800c0a4:	d023      	beq.n	800c0ee <__d2b+0x82>
 800c0a6:	4668      	mov	r0, sp
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	f7ff fd0c 	bl	800bac6 <__lo0bits>
 800c0ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0b2:	b1d0      	cbz	r0, 800c0ea <__d2b+0x7e>
 800c0b4:	f1c0 0320 	rsb	r3, r0, #32
 800c0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0bc:	430b      	orrs	r3, r1
 800c0be:	40c2      	lsrs	r2, r0
 800c0c0:	6163      	str	r3, [r4, #20]
 800c0c2:	9201      	str	r2, [sp, #4]
 800c0c4:	9b01      	ldr	r3, [sp, #4]
 800c0c6:	61a3      	str	r3, [r4, #24]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	bf0c      	ite	eq
 800c0cc:	2201      	moveq	r2, #1
 800c0ce:	2202      	movne	r2, #2
 800c0d0:	6122      	str	r2, [r4, #16]
 800c0d2:	b1a5      	cbz	r5, 800c0fe <__d2b+0x92>
 800c0d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0d8:	4405      	add	r5, r0
 800c0da:	603d      	str	r5, [r7, #0]
 800c0dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0e0:	6030      	str	r0, [r6, #0]
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	b003      	add	sp, #12
 800c0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ea:	6161      	str	r1, [r4, #20]
 800c0ec:	e7ea      	b.n	800c0c4 <__d2b+0x58>
 800c0ee:	a801      	add	r0, sp, #4
 800c0f0:	f7ff fce9 	bl	800bac6 <__lo0bits>
 800c0f4:	9b01      	ldr	r3, [sp, #4]
 800c0f6:	6163      	str	r3, [r4, #20]
 800c0f8:	3020      	adds	r0, #32
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	e7e8      	b.n	800c0d0 <__d2b+0x64>
 800c0fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c102:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c106:	6038      	str	r0, [r7, #0]
 800c108:	6918      	ldr	r0, [r3, #16]
 800c10a:	f7ff fcbd 	bl	800ba88 <__hi0bits>
 800c10e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c112:	e7e5      	b.n	800c0e0 <__d2b+0x74>
 800c114:	0800e1bd 	.word	0x0800e1bd
 800c118:	0800e1ce 	.word	0x0800e1ce

0800c11c <__ratio>:
 800c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	b085      	sub	sp, #20
 800c122:	e9cd 1000 	strd	r1, r0, [sp]
 800c126:	a902      	add	r1, sp, #8
 800c128:	f7ff ff56 	bl	800bfd8 <__b2d>
 800c12c:	9800      	ldr	r0, [sp, #0]
 800c12e:	a903      	add	r1, sp, #12
 800c130:	ec55 4b10 	vmov	r4, r5, d0
 800c134:	f7ff ff50 	bl	800bfd8 <__b2d>
 800c138:	9b01      	ldr	r3, [sp, #4]
 800c13a:	6919      	ldr	r1, [r3, #16]
 800c13c:	9b00      	ldr	r3, [sp, #0]
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	1ac9      	subs	r1, r1, r3
 800c142:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c146:	1a9b      	subs	r3, r3, r2
 800c148:	ec5b ab10 	vmov	sl, fp, d0
 800c14c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c150:	2b00      	cmp	r3, #0
 800c152:	bfce      	itee	gt
 800c154:	462a      	movgt	r2, r5
 800c156:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c15a:	465a      	movle	r2, fp
 800c15c:	462f      	mov	r7, r5
 800c15e:	46d9      	mov	r9, fp
 800c160:	bfcc      	ite	gt
 800c162:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c166:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c16a:	464b      	mov	r3, r9
 800c16c:	4652      	mov	r2, sl
 800c16e:	4620      	mov	r0, r4
 800c170:	4639      	mov	r1, r7
 800c172:	f7f4 fb8b 	bl	800088c <__aeabi_ddiv>
 800c176:	ec41 0b10 	vmov	d0, r0, r1
 800c17a:	b005      	add	sp, #20
 800c17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c180 <__copybits>:
 800c180:	3901      	subs	r1, #1
 800c182:	b570      	push	{r4, r5, r6, lr}
 800c184:	1149      	asrs	r1, r1, #5
 800c186:	6914      	ldr	r4, [r2, #16]
 800c188:	3101      	adds	r1, #1
 800c18a:	f102 0314 	add.w	r3, r2, #20
 800c18e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c192:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c196:	1f05      	subs	r5, r0, #4
 800c198:	42a3      	cmp	r3, r4
 800c19a:	d30c      	bcc.n	800c1b6 <__copybits+0x36>
 800c19c:	1aa3      	subs	r3, r4, r2
 800c19e:	3b11      	subs	r3, #17
 800c1a0:	f023 0303 	bic.w	r3, r3, #3
 800c1a4:	3211      	adds	r2, #17
 800c1a6:	42a2      	cmp	r2, r4
 800c1a8:	bf88      	it	hi
 800c1aa:	2300      	movhi	r3, #0
 800c1ac:	4418      	add	r0, r3
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	4288      	cmp	r0, r1
 800c1b2:	d305      	bcc.n	800c1c0 <__copybits+0x40>
 800c1b4:	bd70      	pop	{r4, r5, r6, pc}
 800c1b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1be:	e7eb      	b.n	800c198 <__copybits+0x18>
 800c1c0:	f840 3b04 	str.w	r3, [r0], #4
 800c1c4:	e7f4      	b.n	800c1b0 <__copybits+0x30>

0800c1c6 <__any_on>:
 800c1c6:	f100 0214 	add.w	r2, r0, #20
 800c1ca:	6900      	ldr	r0, [r0, #16]
 800c1cc:	114b      	asrs	r3, r1, #5
 800c1ce:	4298      	cmp	r0, r3
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	db11      	blt.n	800c1f8 <__any_on+0x32>
 800c1d4:	dd0a      	ble.n	800c1ec <__any_on+0x26>
 800c1d6:	f011 011f 	ands.w	r1, r1, #31
 800c1da:	d007      	beq.n	800c1ec <__any_on+0x26>
 800c1dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1e0:	fa24 f001 	lsr.w	r0, r4, r1
 800c1e4:	fa00 f101 	lsl.w	r1, r0, r1
 800c1e8:	428c      	cmp	r4, r1
 800c1ea:	d10b      	bne.n	800c204 <__any_on+0x3e>
 800c1ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d803      	bhi.n	800c1fc <__any_on+0x36>
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	bd10      	pop	{r4, pc}
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	e7f7      	b.n	800c1ec <__any_on+0x26>
 800c1fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c200:	2900      	cmp	r1, #0
 800c202:	d0f5      	beq.n	800c1f0 <__any_on+0x2a>
 800c204:	2001      	movs	r0, #1
 800c206:	e7f6      	b.n	800c1f6 <__any_on+0x30>

0800c208 <sulp>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	4604      	mov	r4, r0
 800c20c:	460d      	mov	r5, r1
 800c20e:	ec45 4b10 	vmov	d0, r4, r5
 800c212:	4616      	mov	r6, r2
 800c214:	f7ff feba 	bl	800bf8c <__ulp>
 800c218:	ec51 0b10 	vmov	r0, r1, d0
 800c21c:	b17e      	cbz	r6, 800c23e <sulp+0x36>
 800c21e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c222:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c226:	2b00      	cmp	r3, #0
 800c228:	dd09      	ble.n	800c23e <sulp+0x36>
 800c22a:	051b      	lsls	r3, r3, #20
 800c22c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c230:	2400      	movs	r4, #0
 800c232:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c236:	4622      	mov	r2, r4
 800c238:	462b      	mov	r3, r5
 800c23a:	f7f4 f9fd 	bl	8000638 <__aeabi_dmul>
 800c23e:	ec41 0b10 	vmov	d0, r0, r1
 800c242:	bd70      	pop	{r4, r5, r6, pc}
 800c244:	0000      	movs	r0, r0
	...

0800c248 <_strtod_l>:
 800c248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24c:	b09f      	sub	sp, #124	@ 0x7c
 800c24e:	460c      	mov	r4, r1
 800c250:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c252:	2200      	movs	r2, #0
 800c254:	921a      	str	r2, [sp, #104]	@ 0x68
 800c256:	9005      	str	r0, [sp, #20]
 800c258:	f04f 0a00 	mov.w	sl, #0
 800c25c:	f04f 0b00 	mov.w	fp, #0
 800c260:	460a      	mov	r2, r1
 800c262:	9219      	str	r2, [sp, #100]	@ 0x64
 800c264:	7811      	ldrb	r1, [r2, #0]
 800c266:	292b      	cmp	r1, #43	@ 0x2b
 800c268:	d04a      	beq.n	800c300 <_strtod_l+0xb8>
 800c26a:	d838      	bhi.n	800c2de <_strtod_l+0x96>
 800c26c:	290d      	cmp	r1, #13
 800c26e:	d832      	bhi.n	800c2d6 <_strtod_l+0x8e>
 800c270:	2908      	cmp	r1, #8
 800c272:	d832      	bhi.n	800c2da <_strtod_l+0x92>
 800c274:	2900      	cmp	r1, #0
 800c276:	d03b      	beq.n	800c2f0 <_strtod_l+0xa8>
 800c278:	2200      	movs	r2, #0
 800c27a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c27c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c27e:	782a      	ldrb	r2, [r5, #0]
 800c280:	2a30      	cmp	r2, #48	@ 0x30
 800c282:	f040 80b3 	bne.w	800c3ec <_strtod_l+0x1a4>
 800c286:	786a      	ldrb	r2, [r5, #1]
 800c288:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c28c:	2a58      	cmp	r2, #88	@ 0x58
 800c28e:	d16e      	bne.n	800c36e <_strtod_l+0x126>
 800c290:	9302      	str	r3, [sp, #8]
 800c292:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c294:	9301      	str	r3, [sp, #4]
 800c296:	ab1a      	add	r3, sp, #104	@ 0x68
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	4a8e      	ldr	r2, [pc, #568]	@ (800c4d4 <_strtod_l+0x28c>)
 800c29c:	9805      	ldr	r0, [sp, #20]
 800c29e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c2a0:	a919      	add	r1, sp, #100	@ 0x64
 800c2a2:	f001 f90b 	bl	800d4bc <__gethex>
 800c2a6:	f010 060f 	ands.w	r6, r0, #15
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	d005      	beq.n	800c2ba <_strtod_l+0x72>
 800c2ae:	2e06      	cmp	r6, #6
 800c2b0:	d128      	bne.n	800c304 <_strtod_l+0xbc>
 800c2b2:	3501      	adds	r5, #1
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9519      	str	r5, [sp, #100]	@ 0x64
 800c2b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f040 858e 	bne.w	800cdde <_strtod_l+0xb96>
 800c2c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2c4:	b1cb      	cbz	r3, 800c2fa <_strtod_l+0xb2>
 800c2c6:	4652      	mov	r2, sl
 800c2c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c2cc:	ec43 2b10 	vmov	d0, r2, r3
 800c2d0:	b01f      	add	sp, #124	@ 0x7c
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d6:	2920      	cmp	r1, #32
 800c2d8:	d1ce      	bne.n	800c278 <_strtod_l+0x30>
 800c2da:	3201      	adds	r2, #1
 800c2dc:	e7c1      	b.n	800c262 <_strtod_l+0x1a>
 800c2de:	292d      	cmp	r1, #45	@ 0x2d
 800c2e0:	d1ca      	bne.n	800c278 <_strtod_l+0x30>
 800c2e2:	2101      	movs	r1, #1
 800c2e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c2e6:	1c51      	adds	r1, r2, #1
 800c2e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c2ea:	7852      	ldrb	r2, [r2, #1]
 800c2ec:	2a00      	cmp	r2, #0
 800c2ee:	d1c5      	bne.n	800c27c <_strtod_l+0x34>
 800c2f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f040 8570 	bne.w	800cdda <_strtod_l+0xb92>
 800c2fa:	4652      	mov	r2, sl
 800c2fc:	465b      	mov	r3, fp
 800c2fe:	e7e5      	b.n	800c2cc <_strtod_l+0x84>
 800c300:	2100      	movs	r1, #0
 800c302:	e7ef      	b.n	800c2e4 <_strtod_l+0x9c>
 800c304:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c306:	b13a      	cbz	r2, 800c318 <_strtod_l+0xd0>
 800c308:	2135      	movs	r1, #53	@ 0x35
 800c30a:	a81c      	add	r0, sp, #112	@ 0x70
 800c30c:	f7ff ff38 	bl	800c180 <__copybits>
 800c310:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c312:	9805      	ldr	r0, [sp, #20]
 800c314:	f7ff fb06 	bl	800b924 <_Bfree>
 800c318:	3e01      	subs	r6, #1
 800c31a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c31c:	2e04      	cmp	r6, #4
 800c31e:	d806      	bhi.n	800c32e <_strtod_l+0xe6>
 800c320:	e8df f006 	tbb	[pc, r6]
 800c324:	201d0314 	.word	0x201d0314
 800c328:	14          	.byte	0x14
 800c329:	00          	.byte	0x00
 800c32a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c32e:	05e1      	lsls	r1, r4, #23
 800c330:	bf48      	it	mi
 800c332:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c336:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c33a:	0d1b      	lsrs	r3, r3, #20
 800c33c:	051b      	lsls	r3, r3, #20
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1bb      	bne.n	800c2ba <_strtod_l+0x72>
 800c342:	f7fe fbd7 	bl	800aaf4 <__errno>
 800c346:	2322      	movs	r3, #34	@ 0x22
 800c348:	6003      	str	r3, [r0, #0]
 800c34a:	e7b6      	b.n	800c2ba <_strtod_l+0x72>
 800c34c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c350:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c354:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c358:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c35c:	e7e7      	b.n	800c32e <_strtod_l+0xe6>
 800c35e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c4dc <_strtod_l+0x294>
 800c362:	e7e4      	b.n	800c32e <_strtod_l+0xe6>
 800c364:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c368:	f04f 3aff 	mov.w	sl, #4294967295
 800c36c:	e7df      	b.n	800c32e <_strtod_l+0xe6>
 800c36e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c370:	1c5a      	adds	r2, r3, #1
 800c372:	9219      	str	r2, [sp, #100]	@ 0x64
 800c374:	785b      	ldrb	r3, [r3, #1]
 800c376:	2b30      	cmp	r3, #48	@ 0x30
 800c378:	d0f9      	beq.n	800c36e <_strtod_l+0x126>
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d09d      	beq.n	800c2ba <_strtod_l+0x72>
 800c37e:	2301      	movs	r3, #1
 800c380:	9309      	str	r3, [sp, #36]	@ 0x24
 800c382:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c384:	930c      	str	r3, [sp, #48]	@ 0x30
 800c386:	2300      	movs	r3, #0
 800c388:	9308      	str	r3, [sp, #32]
 800c38a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c38c:	461f      	mov	r7, r3
 800c38e:	220a      	movs	r2, #10
 800c390:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c392:	7805      	ldrb	r5, [r0, #0]
 800c394:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c398:	b2d9      	uxtb	r1, r3
 800c39a:	2909      	cmp	r1, #9
 800c39c:	d928      	bls.n	800c3f0 <_strtod_l+0x1a8>
 800c39e:	494e      	ldr	r1, [pc, #312]	@ (800c4d8 <_strtod_l+0x290>)
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f000 ffd5 	bl	800d350 <strncmp>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d032      	beq.n	800c410 <_strtod_l+0x1c8>
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	462a      	mov	r2, r5
 800c3ae:	4681      	mov	r9, r0
 800c3b0:	463d      	mov	r5, r7
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2a65      	cmp	r2, #101	@ 0x65
 800c3b6:	d001      	beq.n	800c3bc <_strtod_l+0x174>
 800c3b8:	2a45      	cmp	r2, #69	@ 0x45
 800c3ba:	d114      	bne.n	800c3e6 <_strtod_l+0x19e>
 800c3bc:	b91d      	cbnz	r5, 800c3c6 <_strtod_l+0x17e>
 800c3be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3c0:	4302      	orrs	r2, r0
 800c3c2:	d095      	beq.n	800c2f0 <_strtod_l+0xa8>
 800c3c4:	2500      	movs	r5, #0
 800c3c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c3c8:	1c62      	adds	r2, r4, #1
 800c3ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3cc:	7862      	ldrb	r2, [r4, #1]
 800c3ce:	2a2b      	cmp	r2, #43	@ 0x2b
 800c3d0:	d077      	beq.n	800c4c2 <_strtod_l+0x27a>
 800c3d2:	2a2d      	cmp	r2, #45	@ 0x2d
 800c3d4:	d07b      	beq.n	800c4ce <_strtod_l+0x286>
 800c3d6:	f04f 0c00 	mov.w	ip, #0
 800c3da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c3de:	2909      	cmp	r1, #9
 800c3e0:	f240 8082 	bls.w	800c4e8 <_strtod_l+0x2a0>
 800c3e4:	9419      	str	r4, [sp, #100]	@ 0x64
 800c3e6:	f04f 0800 	mov.w	r8, #0
 800c3ea:	e0a2      	b.n	800c532 <_strtod_l+0x2ea>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	e7c7      	b.n	800c380 <_strtod_l+0x138>
 800c3f0:	2f08      	cmp	r7, #8
 800c3f2:	bfd5      	itete	le
 800c3f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c3f6:	9908      	ldrgt	r1, [sp, #32]
 800c3f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c400:	f100 0001 	add.w	r0, r0, #1
 800c404:	bfd4      	ite	le
 800c406:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c408:	9308      	strgt	r3, [sp, #32]
 800c40a:	3701      	adds	r7, #1
 800c40c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c40e:	e7bf      	b.n	800c390 <_strtod_l+0x148>
 800c410:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c412:	1c5a      	adds	r2, r3, #1
 800c414:	9219      	str	r2, [sp, #100]	@ 0x64
 800c416:	785a      	ldrb	r2, [r3, #1]
 800c418:	b37f      	cbz	r7, 800c47a <_strtod_l+0x232>
 800c41a:	4681      	mov	r9, r0
 800c41c:	463d      	mov	r5, r7
 800c41e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c422:	2b09      	cmp	r3, #9
 800c424:	d912      	bls.n	800c44c <_strtod_l+0x204>
 800c426:	2301      	movs	r3, #1
 800c428:	e7c4      	b.n	800c3b4 <_strtod_l+0x16c>
 800c42a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c42c:	1c5a      	adds	r2, r3, #1
 800c42e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c430:	785a      	ldrb	r2, [r3, #1]
 800c432:	3001      	adds	r0, #1
 800c434:	2a30      	cmp	r2, #48	@ 0x30
 800c436:	d0f8      	beq.n	800c42a <_strtod_l+0x1e2>
 800c438:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c43c:	2b08      	cmp	r3, #8
 800c43e:	f200 84d3 	bhi.w	800cde8 <_strtod_l+0xba0>
 800c442:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c444:	930c      	str	r3, [sp, #48]	@ 0x30
 800c446:	4681      	mov	r9, r0
 800c448:	2000      	movs	r0, #0
 800c44a:	4605      	mov	r5, r0
 800c44c:	3a30      	subs	r2, #48	@ 0x30
 800c44e:	f100 0301 	add.w	r3, r0, #1
 800c452:	d02a      	beq.n	800c4aa <_strtod_l+0x262>
 800c454:	4499      	add	r9, r3
 800c456:	eb00 0c05 	add.w	ip, r0, r5
 800c45a:	462b      	mov	r3, r5
 800c45c:	210a      	movs	r1, #10
 800c45e:	4563      	cmp	r3, ip
 800c460:	d10d      	bne.n	800c47e <_strtod_l+0x236>
 800c462:	1c69      	adds	r1, r5, #1
 800c464:	4401      	add	r1, r0
 800c466:	4428      	add	r0, r5
 800c468:	2808      	cmp	r0, #8
 800c46a:	dc16      	bgt.n	800c49a <_strtod_l+0x252>
 800c46c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c46e:	230a      	movs	r3, #10
 800c470:	fb03 2300 	mla	r3, r3, r0, r2
 800c474:	930a      	str	r3, [sp, #40]	@ 0x28
 800c476:	2300      	movs	r3, #0
 800c478:	e018      	b.n	800c4ac <_strtod_l+0x264>
 800c47a:	4638      	mov	r0, r7
 800c47c:	e7da      	b.n	800c434 <_strtod_l+0x1ec>
 800c47e:	2b08      	cmp	r3, #8
 800c480:	f103 0301 	add.w	r3, r3, #1
 800c484:	dc03      	bgt.n	800c48e <_strtod_l+0x246>
 800c486:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c488:	434e      	muls	r6, r1
 800c48a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c48c:	e7e7      	b.n	800c45e <_strtod_l+0x216>
 800c48e:	2b10      	cmp	r3, #16
 800c490:	bfde      	ittt	le
 800c492:	9e08      	ldrle	r6, [sp, #32]
 800c494:	434e      	mulle	r6, r1
 800c496:	9608      	strle	r6, [sp, #32]
 800c498:	e7e1      	b.n	800c45e <_strtod_l+0x216>
 800c49a:	280f      	cmp	r0, #15
 800c49c:	dceb      	bgt.n	800c476 <_strtod_l+0x22e>
 800c49e:	9808      	ldr	r0, [sp, #32]
 800c4a0:	230a      	movs	r3, #10
 800c4a2:	fb03 2300 	mla	r3, r3, r0, r2
 800c4a6:	9308      	str	r3, [sp, #32]
 800c4a8:	e7e5      	b.n	800c476 <_strtod_l+0x22e>
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4ae:	1c50      	adds	r0, r2, #1
 800c4b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800c4b2:	7852      	ldrb	r2, [r2, #1]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	460d      	mov	r5, r1
 800c4b8:	e7b1      	b.n	800c41e <_strtod_l+0x1d6>
 800c4ba:	f04f 0900 	mov.w	r9, #0
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e77d      	b.n	800c3be <_strtod_l+0x176>
 800c4c2:	f04f 0c00 	mov.w	ip, #0
 800c4c6:	1ca2      	adds	r2, r4, #2
 800c4c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4ca:	78a2      	ldrb	r2, [r4, #2]
 800c4cc:	e785      	b.n	800c3da <_strtod_l+0x192>
 800c4ce:	f04f 0c01 	mov.w	ip, #1
 800c4d2:	e7f8      	b.n	800c4c6 <_strtod_l+0x27e>
 800c4d4:	0800e340 	.word	0x0800e340
 800c4d8:	0800e328 	.word	0x0800e328
 800c4dc:	7ff00000 	.word	0x7ff00000
 800c4e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4e2:	1c51      	adds	r1, r2, #1
 800c4e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4e6:	7852      	ldrb	r2, [r2, #1]
 800c4e8:	2a30      	cmp	r2, #48	@ 0x30
 800c4ea:	d0f9      	beq.n	800c4e0 <_strtod_l+0x298>
 800c4ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c4f0:	2908      	cmp	r1, #8
 800c4f2:	f63f af78 	bhi.w	800c3e6 <_strtod_l+0x19e>
 800c4f6:	3a30      	subs	r2, #48	@ 0x30
 800c4f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c4fe:	f04f 080a 	mov.w	r8, #10
 800c502:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c504:	1c56      	adds	r6, r2, #1
 800c506:	9619      	str	r6, [sp, #100]	@ 0x64
 800c508:	7852      	ldrb	r2, [r2, #1]
 800c50a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c50e:	f1be 0f09 	cmp.w	lr, #9
 800c512:	d939      	bls.n	800c588 <_strtod_l+0x340>
 800c514:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c516:	1a76      	subs	r6, r6, r1
 800c518:	2e08      	cmp	r6, #8
 800c51a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c51e:	dc03      	bgt.n	800c528 <_strtod_l+0x2e0>
 800c520:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c522:	4588      	cmp	r8, r1
 800c524:	bfa8      	it	ge
 800c526:	4688      	movge	r8, r1
 800c528:	f1bc 0f00 	cmp.w	ip, #0
 800c52c:	d001      	beq.n	800c532 <_strtod_l+0x2ea>
 800c52e:	f1c8 0800 	rsb	r8, r8, #0
 800c532:	2d00      	cmp	r5, #0
 800c534:	d14e      	bne.n	800c5d4 <_strtod_l+0x38c>
 800c536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c538:	4308      	orrs	r0, r1
 800c53a:	f47f aebe 	bne.w	800c2ba <_strtod_l+0x72>
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f47f aed6 	bne.w	800c2f0 <_strtod_l+0xa8>
 800c544:	2a69      	cmp	r2, #105	@ 0x69
 800c546:	d028      	beq.n	800c59a <_strtod_l+0x352>
 800c548:	dc25      	bgt.n	800c596 <_strtod_l+0x34e>
 800c54a:	2a49      	cmp	r2, #73	@ 0x49
 800c54c:	d025      	beq.n	800c59a <_strtod_l+0x352>
 800c54e:	2a4e      	cmp	r2, #78	@ 0x4e
 800c550:	f47f aece 	bne.w	800c2f0 <_strtod_l+0xa8>
 800c554:	499b      	ldr	r1, [pc, #620]	@ (800c7c4 <_strtod_l+0x57c>)
 800c556:	a819      	add	r0, sp, #100	@ 0x64
 800c558:	f001 f9d2 	bl	800d900 <__match>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	f43f aec7 	beq.w	800c2f0 <_strtod_l+0xa8>
 800c562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	2b28      	cmp	r3, #40	@ 0x28
 800c568:	d12e      	bne.n	800c5c8 <_strtod_l+0x380>
 800c56a:	4997      	ldr	r1, [pc, #604]	@ (800c7c8 <_strtod_l+0x580>)
 800c56c:	aa1c      	add	r2, sp, #112	@ 0x70
 800c56e:	a819      	add	r0, sp, #100	@ 0x64
 800c570:	f001 f9da 	bl	800d928 <__hexnan>
 800c574:	2805      	cmp	r0, #5
 800c576:	d127      	bne.n	800c5c8 <_strtod_l+0x380>
 800c578:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c57a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c57e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c582:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c586:	e698      	b.n	800c2ba <_strtod_l+0x72>
 800c588:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c58a:	fb08 2101 	mla	r1, r8, r1, r2
 800c58e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c592:	920e      	str	r2, [sp, #56]	@ 0x38
 800c594:	e7b5      	b.n	800c502 <_strtod_l+0x2ba>
 800c596:	2a6e      	cmp	r2, #110	@ 0x6e
 800c598:	e7da      	b.n	800c550 <_strtod_l+0x308>
 800c59a:	498c      	ldr	r1, [pc, #560]	@ (800c7cc <_strtod_l+0x584>)
 800c59c:	a819      	add	r0, sp, #100	@ 0x64
 800c59e:	f001 f9af 	bl	800d900 <__match>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	f43f aea4 	beq.w	800c2f0 <_strtod_l+0xa8>
 800c5a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5aa:	4989      	ldr	r1, [pc, #548]	@ (800c7d0 <_strtod_l+0x588>)
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	a819      	add	r0, sp, #100	@ 0x64
 800c5b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c5b2:	f001 f9a5 	bl	800d900 <__match>
 800c5b6:	b910      	cbnz	r0, 800c5be <_strtod_l+0x376>
 800c5b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800c5be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c7e0 <_strtod_l+0x598>
 800c5c2:	f04f 0a00 	mov.w	sl, #0
 800c5c6:	e678      	b.n	800c2ba <_strtod_l+0x72>
 800c5c8:	4882      	ldr	r0, [pc, #520]	@ (800c7d4 <_strtod_l+0x58c>)
 800c5ca:	f000 fed5 	bl	800d378 <nan>
 800c5ce:	ec5b ab10 	vmov	sl, fp, d0
 800c5d2:	e672      	b.n	800c2ba <_strtod_l+0x72>
 800c5d4:	eba8 0309 	sub.w	r3, r8, r9
 800c5d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c5da:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5dc:	2f00      	cmp	r7, #0
 800c5de:	bf08      	it	eq
 800c5e0:	462f      	moveq	r7, r5
 800c5e2:	2d10      	cmp	r5, #16
 800c5e4:	462c      	mov	r4, r5
 800c5e6:	bfa8      	it	ge
 800c5e8:	2410      	movge	r4, #16
 800c5ea:	f7f3 ffab 	bl	8000544 <__aeabi_ui2d>
 800c5ee:	2d09      	cmp	r5, #9
 800c5f0:	4682      	mov	sl, r0
 800c5f2:	468b      	mov	fp, r1
 800c5f4:	dc13      	bgt.n	800c61e <_strtod_l+0x3d6>
 800c5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f43f ae5e 	beq.w	800c2ba <_strtod_l+0x72>
 800c5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c600:	dd78      	ble.n	800c6f4 <_strtod_l+0x4ac>
 800c602:	2b16      	cmp	r3, #22
 800c604:	dc5f      	bgt.n	800c6c6 <_strtod_l+0x47e>
 800c606:	4974      	ldr	r1, [pc, #464]	@ (800c7d8 <_strtod_l+0x590>)
 800c608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c60c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c610:	4652      	mov	r2, sl
 800c612:	465b      	mov	r3, fp
 800c614:	f7f4 f810 	bl	8000638 <__aeabi_dmul>
 800c618:	4682      	mov	sl, r0
 800c61a:	468b      	mov	fp, r1
 800c61c:	e64d      	b.n	800c2ba <_strtod_l+0x72>
 800c61e:	4b6e      	ldr	r3, [pc, #440]	@ (800c7d8 <_strtod_l+0x590>)
 800c620:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c624:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c628:	f7f4 f806 	bl	8000638 <__aeabi_dmul>
 800c62c:	4682      	mov	sl, r0
 800c62e:	9808      	ldr	r0, [sp, #32]
 800c630:	468b      	mov	fp, r1
 800c632:	f7f3 ff87 	bl	8000544 <__aeabi_ui2d>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4650      	mov	r0, sl
 800c63c:	4659      	mov	r1, fp
 800c63e:	f7f3 fe45 	bl	80002cc <__adddf3>
 800c642:	2d0f      	cmp	r5, #15
 800c644:	4682      	mov	sl, r0
 800c646:	468b      	mov	fp, r1
 800c648:	ddd5      	ble.n	800c5f6 <_strtod_l+0x3ae>
 800c64a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c64c:	1b2c      	subs	r4, r5, r4
 800c64e:	441c      	add	r4, r3
 800c650:	2c00      	cmp	r4, #0
 800c652:	f340 8096 	ble.w	800c782 <_strtod_l+0x53a>
 800c656:	f014 030f 	ands.w	r3, r4, #15
 800c65a:	d00a      	beq.n	800c672 <_strtod_l+0x42a>
 800c65c:	495e      	ldr	r1, [pc, #376]	@ (800c7d8 <_strtod_l+0x590>)
 800c65e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c662:	4652      	mov	r2, sl
 800c664:	465b      	mov	r3, fp
 800c666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c66a:	f7f3 ffe5 	bl	8000638 <__aeabi_dmul>
 800c66e:	4682      	mov	sl, r0
 800c670:	468b      	mov	fp, r1
 800c672:	f034 040f 	bics.w	r4, r4, #15
 800c676:	d073      	beq.n	800c760 <_strtod_l+0x518>
 800c678:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c67c:	dd48      	ble.n	800c710 <_strtod_l+0x4c8>
 800c67e:	2400      	movs	r4, #0
 800c680:	46a0      	mov	r8, r4
 800c682:	940a      	str	r4, [sp, #40]	@ 0x28
 800c684:	46a1      	mov	r9, r4
 800c686:	9a05      	ldr	r2, [sp, #20]
 800c688:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c7e0 <_strtod_l+0x598>
 800c68c:	2322      	movs	r3, #34	@ 0x22
 800c68e:	6013      	str	r3, [r2, #0]
 800c690:	f04f 0a00 	mov.w	sl, #0
 800c694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c696:	2b00      	cmp	r3, #0
 800c698:	f43f ae0f 	beq.w	800c2ba <_strtod_l+0x72>
 800c69c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c69e:	9805      	ldr	r0, [sp, #20]
 800c6a0:	f7ff f940 	bl	800b924 <_Bfree>
 800c6a4:	9805      	ldr	r0, [sp, #20]
 800c6a6:	4649      	mov	r1, r9
 800c6a8:	f7ff f93c 	bl	800b924 <_Bfree>
 800c6ac:	9805      	ldr	r0, [sp, #20]
 800c6ae:	4641      	mov	r1, r8
 800c6b0:	f7ff f938 	bl	800b924 <_Bfree>
 800c6b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6b6:	9805      	ldr	r0, [sp, #20]
 800c6b8:	f7ff f934 	bl	800b924 <_Bfree>
 800c6bc:	9805      	ldr	r0, [sp, #20]
 800c6be:	4621      	mov	r1, r4
 800c6c0:	f7ff f930 	bl	800b924 <_Bfree>
 800c6c4:	e5f9      	b.n	800c2ba <_strtod_l+0x72>
 800c6c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	dbbc      	blt.n	800c64a <_strtod_l+0x402>
 800c6d0:	4c41      	ldr	r4, [pc, #260]	@ (800c7d8 <_strtod_l+0x590>)
 800c6d2:	f1c5 050f 	rsb	r5, r5, #15
 800c6d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c6da:	4652      	mov	r2, sl
 800c6dc:	465b      	mov	r3, fp
 800c6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e2:	f7f3 ffa9 	bl	8000638 <__aeabi_dmul>
 800c6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e8:	1b5d      	subs	r5, r3, r5
 800c6ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c6ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c6f2:	e78f      	b.n	800c614 <_strtod_l+0x3cc>
 800c6f4:	3316      	adds	r3, #22
 800c6f6:	dba8      	blt.n	800c64a <_strtod_l+0x402>
 800c6f8:	4b37      	ldr	r3, [pc, #220]	@ (800c7d8 <_strtod_l+0x590>)
 800c6fa:	eba9 0808 	sub.w	r8, r9, r8
 800c6fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c702:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c706:	4650      	mov	r0, sl
 800c708:	4659      	mov	r1, fp
 800c70a:	f7f4 f8bf 	bl	800088c <__aeabi_ddiv>
 800c70e:	e783      	b.n	800c618 <_strtod_l+0x3d0>
 800c710:	4b32      	ldr	r3, [pc, #200]	@ (800c7dc <_strtod_l+0x594>)
 800c712:	9308      	str	r3, [sp, #32]
 800c714:	2300      	movs	r3, #0
 800c716:	1124      	asrs	r4, r4, #4
 800c718:	4650      	mov	r0, sl
 800c71a:	4659      	mov	r1, fp
 800c71c:	461e      	mov	r6, r3
 800c71e:	2c01      	cmp	r4, #1
 800c720:	dc21      	bgt.n	800c766 <_strtod_l+0x51e>
 800c722:	b10b      	cbz	r3, 800c728 <_strtod_l+0x4e0>
 800c724:	4682      	mov	sl, r0
 800c726:	468b      	mov	fp, r1
 800c728:	492c      	ldr	r1, [pc, #176]	@ (800c7dc <_strtod_l+0x594>)
 800c72a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c72e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c732:	4652      	mov	r2, sl
 800c734:	465b      	mov	r3, fp
 800c736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c73a:	f7f3 ff7d 	bl	8000638 <__aeabi_dmul>
 800c73e:	4b28      	ldr	r3, [pc, #160]	@ (800c7e0 <_strtod_l+0x598>)
 800c740:	460a      	mov	r2, r1
 800c742:	400b      	ands	r3, r1
 800c744:	4927      	ldr	r1, [pc, #156]	@ (800c7e4 <_strtod_l+0x59c>)
 800c746:	428b      	cmp	r3, r1
 800c748:	4682      	mov	sl, r0
 800c74a:	d898      	bhi.n	800c67e <_strtod_l+0x436>
 800c74c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c750:	428b      	cmp	r3, r1
 800c752:	bf86      	itte	hi
 800c754:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c7e8 <_strtod_l+0x5a0>
 800c758:	f04f 3aff 	movhi.w	sl, #4294967295
 800c75c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c760:	2300      	movs	r3, #0
 800c762:	9308      	str	r3, [sp, #32]
 800c764:	e07a      	b.n	800c85c <_strtod_l+0x614>
 800c766:	07e2      	lsls	r2, r4, #31
 800c768:	d505      	bpl.n	800c776 <_strtod_l+0x52e>
 800c76a:	9b08      	ldr	r3, [sp, #32]
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f7f3 ff62 	bl	8000638 <__aeabi_dmul>
 800c774:	2301      	movs	r3, #1
 800c776:	9a08      	ldr	r2, [sp, #32]
 800c778:	3208      	adds	r2, #8
 800c77a:	3601      	adds	r6, #1
 800c77c:	1064      	asrs	r4, r4, #1
 800c77e:	9208      	str	r2, [sp, #32]
 800c780:	e7cd      	b.n	800c71e <_strtod_l+0x4d6>
 800c782:	d0ed      	beq.n	800c760 <_strtod_l+0x518>
 800c784:	4264      	negs	r4, r4
 800c786:	f014 020f 	ands.w	r2, r4, #15
 800c78a:	d00a      	beq.n	800c7a2 <_strtod_l+0x55a>
 800c78c:	4b12      	ldr	r3, [pc, #72]	@ (800c7d8 <_strtod_l+0x590>)
 800c78e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c792:	4650      	mov	r0, sl
 800c794:	4659      	mov	r1, fp
 800c796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79a:	f7f4 f877 	bl	800088c <__aeabi_ddiv>
 800c79e:	4682      	mov	sl, r0
 800c7a0:	468b      	mov	fp, r1
 800c7a2:	1124      	asrs	r4, r4, #4
 800c7a4:	d0dc      	beq.n	800c760 <_strtod_l+0x518>
 800c7a6:	2c1f      	cmp	r4, #31
 800c7a8:	dd20      	ble.n	800c7ec <_strtod_l+0x5a4>
 800c7aa:	2400      	movs	r4, #0
 800c7ac:	46a0      	mov	r8, r4
 800c7ae:	940a      	str	r4, [sp, #40]	@ 0x28
 800c7b0:	46a1      	mov	r9, r4
 800c7b2:	9a05      	ldr	r2, [sp, #20]
 800c7b4:	2322      	movs	r3, #34	@ 0x22
 800c7b6:	f04f 0a00 	mov.w	sl, #0
 800c7ba:	f04f 0b00 	mov.w	fp, #0
 800c7be:	6013      	str	r3, [r2, #0]
 800c7c0:	e768      	b.n	800c694 <_strtod_l+0x44c>
 800c7c2:	bf00      	nop
 800c7c4:	0800e115 	.word	0x0800e115
 800c7c8:	0800e32c 	.word	0x0800e32c
 800c7cc:	0800e10d 	.word	0x0800e10d
 800c7d0:	0800e144 	.word	0x0800e144
 800c7d4:	0800e4d5 	.word	0x0800e4d5
 800c7d8:	0800e260 	.word	0x0800e260
 800c7dc:	0800e238 	.word	0x0800e238
 800c7e0:	7ff00000 	.word	0x7ff00000
 800c7e4:	7ca00000 	.word	0x7ca00000
 800c7e8:	7fefffff 	.word	0x7fefffff
 800c7ec:	f014 0310 	ands.w	r3, r4, #16
 800c7f0:	bf18      	it	ne
 800c7f2:	236a      	movne	r3, #106	@ 0x6a
 800c7f4:	4ea9      	ldr	r6, [pc, #676]	@ (800ca9c <_strtod_l+0x854>)
 800c7f6:	9308      	str	r3, [sp, #32]
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	4659      	mov	r1, fp
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	07e2      	lsls	r2, r4, #31
 800c800:	d504      	bpl.n	800c80c <_strtod_l+0x5c4>
 800c802:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c806:	f7f3 ff17 	bl	8000638 <__aeabi_dmul>
 800c80a:	2301      	movs	r3, #1
 800c80c:	1064      	asrs	r4, r4, #1
 800c80e:	f106 0608 	add.w	r6, r6, #8
 800c812:	d1f4      	bne.n	800c7fe <_strtod_l+0x5b6>
 800c814:	b10b      	cbz	r3, 800c81a <_strtod_l+0x5d2>
 800c816:	4682      	mov	sl, r0
 800c818:	468b      	mov	fp, r1
 800c81a:	9b08      	ldr	r3, [sp, #32]
 800c81c:	b1b3      	cbz	r3, 800c84c <_strtod_l+0x604>
 800c81e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c822:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c826:	2b00      	cmp	r3, #0
 800c828:	4659      	mov	r1, fp
 800c82a:	dd0f      	ble.n	800c84c <_strtod_l+0x604>
 800c82c:	2b1f      	cmp	r3, #31
 800c82e:	dd55      	ble.n	800c8dc <_strtod_l+0x694>
 800c830:	2b34      	cmp	r3, #52	@ 0x34
 800c832:	bfde      	ittt	le
 800c834:	f04f 33ff 	movle.w	r3, #4294967295
 800c838:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c83c:	4093      	lslle	r3, r2
 800c83e:	f04f 0a00 	mov.w	sl, #0
 800c842:	bfcc      	ite	gt
 800c844:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c848:	ea03 0b01 	andle.w	fp, r3, r1
 800c84c:	2200      	movs	r2, #0
 800c84e:	2300      	movs	r3, #0
 800c850:	4650      	mov	r0, sl
 800c852:	4659      	mov	r1, fp
 800c854:	f7f4 f958 	bl	8000b08 <__aeabi_dcmpeq>
 800c858:	2800      	cmp	r0, #0
 800c85a:	d1a6      	bne.n	800c7aa <_strtod_l+0x562>
 800c85c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c862:	9805      	ldr	r0, [sp, #20]
 800c864:	462b      	mov	r3, r5
 800c866:	463a      	mov	r2, r7
 800c868:	f7ff f8c4 	bl	800b9f4 <__s2b>
 800c86c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c86e:	2800      	cmp	r0, #0
 800c870:	f43f af05 	beq.w	800c67e <_strtod_l+0x436>
 800c874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c876:	2a00      	cmp	r2, #0
 800c878:	eba9 0308 	sub.w	r3, r9, r8
 800c87c:	bfa8      	it	ge
 800c87e:	2300      	movge	r3, #0
 800c880:	9312      	str	r3, [sp, #72]	@ 0x48
 800c882:	2400      	movs	r4, #0
 800c884:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c888:	9316      	str	r3, [sp, #88]	@ 0x58
 800c88a:	46a0      	mov	r8, r4
 800c88c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c88e:	9805      	ldr	r0, [sp, #20]
 800c890:	6859      	ldr	r1, [r3, #4]
 800c892:	f7ff f807 	bl	800b8a4 <_Balloc>
 800c896:	4681      	mov	r9, r0
 800c898:	2800      	cmp	r0, #0
 800c89a:	f43f aef4 	beq.w	800c686 <_strtod_l+0x43e>
 800c89e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8a0:	691a      	ldr	r2, [r3, #16]
 800c8a2:	3202      	adds	r2, #2
 800c8a4:	f103 010c 	add.w	r1, r3, #12
 800c8a8:	0092      	lsls	r2, r2, #2
 800c8aa:	300c      	adds	r0, #12
 800c8ac:	f7fe f94f 	bl	800ab4e <memcpy>
 800c8b0:	ec4b ab10 	vmov	d0, sl, fp
 800c8b4:	9805      	ldr	r0, [sp, #20]
 800c8b6:	aa1c      	add	r2, sp, #112	@ 0x70
 800c8b8:	a91b      	add	r1, sp, #108	@ 0x6c
 800c8ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c8be:	f7ff fbd5 	bl	800c06c <__d2b>
 800c8c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f43f aede 	beq.w	800c686 <_strtod_l+0x43e>
 800c8ca:	9805      	ldr	r0, [sp, #20]
 800c8cc:	2101      	movs	r1, #1
 800c8ce:	f7ff f927 	bl	800bb20 <__i2b>
 800c8d2:	4680      	mov	r8, r0
 800c8d4:	b948      	cbnz	r0, 800c8ea <_strtod_l+0x6a2>
 800c8d6:	f04f 0800 	mov.w	r8, #0
 800c8da:	e6d4      	b.n	800c686 <_strtod_l+0x43e>
 800c8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e4:	ea03 0a0a 	and.w	sl, r3, sl
 800c8e8:	e7b0      	b.n	800c84c <_strtod_l+0x604>
 800c8ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c8ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c8ee:	2d00      	cmp	r5, #0
 800c8f0:	bfab      	itete	ge
 800c8f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c8f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c8f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c8f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c8fa:	bfac      	ite	ge
 800c8fc:	18ef      	addge	r7, r5, r3
 800c8fe:	1b5e      	sublt	r6, r3, r5
 800c900:	9b08      	ldr	r3, [sp, #32]
 800c902:	1aed      	subs	r5, r5, r3
 800c904:	4415      	add	r5, r2
 800c906:	4b66      	ldr	r3, [pc, #408]	@ (800caa0 <_strtod_l+0x858>)
 800c908:	3d01      	subs	r5, #1
 800c90a:	429d      	cmp	r5, r3
 800c90c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c910:	da50      	bge.n	800c9b4 <_strtod_l+0x76c>
 800c912:	1b5b      	subs	r3, r3, r5
 800c914:	2b1f      	cmp	r3, #31
 800c916:	eba2 0203 	sub.w	r2, r2, r3
 800c91a:	f04f 0101 	mov.w	r1, #1
 800c91e:	dc3d      	bgt.n	800c99c <_strtod_l+0x754>
 800c920:	fa01 f303 	lsl.w	r3, r1, r3
 800c924:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c926:	2300      	movs	r3, #0
 800c928:	9310      	str	r3, [sp, #64]	@ 0x40
 800c92a:	18bd      	adds	r5, r7, r2
 800c92c:	9b08      	ldr	r3, [sp, #32]
 800c92e:	42af      	cmp	r7, r5
 800c930:	4416      	add	r6, r2
 800c932:	441e      	add	r6, r3
 800c934:	463b      	mov	r3, r7
 800c936:	bfa8      	it	ge
 800c938:	462b      	movge	r3, r5
 800c93a:	42b3      	cmp	r3, r6
 800c93c:	bfa8      	it	ge
 800c93e:	4633      	movge	r3, r6
 800c940:	2b00      	cmp	r3, #0
 800c942:	bfc2      	ittt	gt
 800c944:	1aed      	subgt	r5, r5, r3
 800c946:	1af6      	subgt	r6, r6, r3
 800c948:	1aff      	subgt	r7, r7, r3
 800c94a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	dd16      	ble.n	800c97e <_strtod_l+0x736>
 800c950:	4641      	mov	r1, r8
 800c952:	9805      	ldr	r0, [sp, #20]
 800c954:	461a      	mov	r2, r3
 800c956:	f7ff f9a3 	bl	800bca0 <__pow5mult>
 800c95a:	4680      	mov	r8, r0
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d0ba      	beq.n	800c8d6 <_strtod_l+0x68e>
 800c960:	4601      	mov	r1, r0
 800c962:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c964:	9805      	ldr	r0, [sp, #20]
 800c966:	f7ff f8f1 	bl	800bb4c <__multiply>
 800c96a:	900e      	str	r0, [sp, #56]	@ 0x38
 800c96c:	2800      	cmp	r0, #0
 800c96e:	f43f ae8a 	beq.w	800c686 <_strtod_l+0x43e>
 800c972:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c974:	9805      	ldr	r0, [sp, #20]
 800c976:	f7fe ffd5 	bl	800b924 <_Bfree>
 800c97a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c97c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c97e:	2d00      	cmp	r5, #0
 800c980:	dc1d      	bgt.n	800c9be <_strtod_l+0x776>
 800c982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c984:	2b00      	cmp	r3, #0
 800c986:	dd23      	ble.n	800c9d0 <_strtod_l+0x788>
 800c988:	4649      	mov	r1, r9
 800c98a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c98c:	9805      	ldr	r0, [sp, #20]
 800c98e:	f7ff f987 	bl	800bca0 <__pow5mult>
 800c992:	4681      	mov	r9, r0
 800c994:	b9e0      	cbnz	r0, 800c9d0 <_strtod_l+0x788>
 800c996:	f04f 0900 	mov.w	r9, #0
 800c99a:	e674      	b.n	800c686 <_strtod_l+0x43e>
 800c99c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c9a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c9a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c9a8:	35e2      	adds	r5, #226	@ 0xe2
 800c9aa:	fa01 f305 	lsl.w	r3, r1, r5
 800c9ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800c9b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c9b2:	e7ba      	b.n	800c92a <_strtod_l+0x6e2>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c9bc:	e7b5      	b.n	800c92a <_strtod_l+0x6e2>
 800c9be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9c0:	9805      	ldr	r0, [sp, #20]
 800c9c2:	462a      	mov	r2, r5
 800c9c4:	f7ff f9c6 	bl	800bd54 <__lshift>
 800c9c8:	901a      	str	r0, [sp, #104]	@ 0x68
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d1d9      	bne.n	800c982 <_strtod_l+0x73a>
 800c9ce:	e65a      	b.n	800c686 <_strtod_l+0x43e>
 800c9d0:	2e00      	cmp	r6, #0
 800c9d2:	dd07      	ble.n	800c9e4 <_strtod_l+0x79c>
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	9805      	ldr	r0, [sp, #20]
 800c9d8:	4632      	mov	r2, r6
 800c9da:	f7ff f9bb 	bl	800bd54 <__lshift>
 800c9de:	4681      	mov	r9, r0
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d0d8      	beq.n	800c996 <_strtod_l+0x74e>
 800c9e4:	2f00      	cmp	r7, #0
 800c9e6:	dd08      	ble.n	800c9fa <_strtod_l+0x7b2>
 800c9e8:	4641      	mov	r1, r8
 800c9ea:	9805      	ldr	r0, [sp, #20]
 800c9ec:	463a      	mov	r2, r7
 800c9ee:	f7ff f9b1 	bl	800bd54 <__lshift>
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	f43f ae46 	beq.w	800c686 <_strtod_l+0x43e>
 800c9fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9fc:	9805      	ldr	r0, [sp, #20]
 800c9fe:	464a      	mov	r2, r9
 800ca00:	f7ff fa30 	bl	800be64 <__mdiff>
 800ca04:	4604      	mov	r4, r0
 800ca06:	2800      	cmp	r0, #0
 800ca08:	f43f ae3d 	beq.w	800c686 <_strtod_l+0x43e>
 800ca0c:	68c3      	ldr	r3, [r0, #12]
 800ca0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca10:	2300      	movs	r3, #0
 800ca12:	60c3      	str	r3, [r0, #12]
 800ca14:	4641      	mov	r1, r8
 800ca16:	f7ff fa09 	bl	800be2c <__mcmp>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	da46      	bge.n	800caac <_strtod_l+0x864>
 800ca1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca20:	ea53 030a 	orrs.w	r3, r3, sl
 800ca24:	d16c      	bne.n	800cb00 <_strtod_l+0x8b8>
 800ca26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d168      	bne.n	800cb00 <_strtod_l+0x8b8>
 800ca2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca32:	0d1b      	lsrs	r3, r3, #20
 800ca34:	051b      	lsls	r3, r3, #20
 800ca36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca3a:	d961      	bls.n	800cb00 <_strtod_l+0x8b8>
 800ca3c:	6963      	ldr	r3, [r4, #20]
 800ca3e:	b913      	cbnz	r3, 800ca46 <_strtod_l+0x7fe>
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	dd5c      	ble.n	800cb00 <_strtod_l+0x8b8>
 800ca46:	4621      	mov	r1, r4
 800ca48:	2201      	movs	r2, #1
 800ca4a:	9805      	ldr	r0, [sp, #20]
 800ca4c:	f7ff f982 	bl	800bd54 <__lshift>
 800ca50:	4641      	mov	r1, r8
 800ca52:	4604      	mov	r4, r0
 800ca54:	f7ff f9ea 	bl	800be2c <__mcmp>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	dd51      	ble.n	800cb00 <_strtod_l+0x8b8>
 800ca5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca60:	9a08      	ldr	r2, [sp, #32]
 800ca62:	0d1b      	lsrs	r3, r3, #20
 800ca64:	051b      	lsls	r3, r3, #20
 800ca66:	2a00      	cmp	r2, #0
 800ca68:	d06b      	beq.n	800cb42 <_strtod_l+0x8fa>
 800ca6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca6e:	d868      	bhi.n	800cb42 <_strtod_l+0x8fa>
 800ca70:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ca74:	f67f ae9d 	bls.w	800c7b2 <_strtod_l+0x56a>
 800ca78:	4b0a      	ldr	r3, [pc, #40]	@ (800caa4 <_strtod_l+0x85c>)
 800ca7a:	4650      	mov	r0, sl
 800ca7c:	4659      	mov	r1, fp
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f7f3 fdda 	bl	8000638 <__aeabi_dmul>
 800ca84:	4b08      	ldr	r3, [pc, #32]	@ (800caa8 <_strtod_l+0x860>)
 800ca86:	400b      	ands	r3, r1
 800ca88:	4682      	mov	sl, r0
 800ca8a:	468b      	mov	fp, r1
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f47f ae05 	bne.w	800c69c <_strtod_l+0x454>
 800ca92:	9a05      	ldr	r2, [sp, #20]
 800ca94:	2322      	movs	r3, #34	@ 0x22
 800ca96:	6013      	str	r3, [r2, #0]
 800ca98:	e600      	b.n	800c69c <_strtod_l+0x454>
 800ca9a:	bf00      	nop
 800ca9c:	0800e358 	.word	0x0800e358
 800caa0:	fffffc02 	.word	0xfffffc02
 800caa4:	39500000 	.word	0x39500000
 800caa8:	7ff00000 	.word	0x7ff00000
 800caac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cab0:	d165      	bne.n	800cb7e <_strtod_l+0x936>
 800cab2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cab4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cab8:	b35a      	cbz	r2, 800cb12 <_strtod_l+0x8ca>
 800caba:	4a9f      	ldr	r2, [pc, #636]	@ (800cd38 <_strtod_l+0xaf0>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d12b      	bne.n	800cb18 <_strtod_l+0x8d0>
 800cac0:	9b08      	ldr	r3, [sp, #32]
 800cac2:	4651      	mov	r1, sl
 800cac4:	b303      	cbz	r3, 800cb08 <_strtod_l+0x8c0>
 800cac6:	4b9d      	ldr	r3, [pc, #628]	@ (800cd3c <_strtod_l+0xaf4>)
 800cac8:	465a      	mov	r2, fp
 800caca:	4013      	ands	r3, r2
 800cacc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cad0:	f04f 32ff 	mov.w	r2, #4294967295
 800cad4:	d81b      	bhi.n	800cb0e <_strtod_l+0x8c6>
 800cad6:	0d1b      	lsrs	r3, r3, #20
 800cad8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cadc:	fa02 f303 	lsl.w	r3, r2, r3
 800cae0:	4299      	cmp	r1, r3
 800cae2:	d119      	bne.n	800cb18 <_strtod_l+0x8d0>
 800cae4:	4b96      	ldr	r3, [pc, #600]	@ (800cd40 <_strtod_l+0xaf8>)
 800cae6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cae8:	429a      	cmp	r2, r3
 800caea:	d102      	bne.n	800caf2 <_strtod_l+0x8aa>
 800caec:	3101      	adds	r1, #1
 800caee:	f43f adca 	beq.w	800c686 <_strtod_l+0x43e>
 800caf2:	4b92      	ldr	r3, [pc, #584]	@ (800cd3c <_strtod_l+0xaf4>)
 800caf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800caf6:	401a      	ands	r2, r3
 800caf8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cafc:	f04f 0a00 	mov.w	sl, #0
 800cb00:	9b08      	ldr	r3, [sp, #32]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1b8      	bne.n	800ca78 <_strtod_l+0x830>
 800cb06:	e5c9      	b.n	800c69c <_strtod_l+0x454>
 800cb08:	f04f 33ff 	mov.w	r3, #4294967295
 800cb0c:	e7e8      	b.n	800cae0 <_strtod_l+0x898>
 800cb0e:	4613      	mov	r3, r2
 800cb10:	e7e6      	b.n	800cae0 <_strtod_l+0x898>
 800cb12:	ea53 030a 	orrs.w	r3, r3, sl
 800cb16:	d0a1      	beq.n	800ca5c <_strtod_l+0x814>
 800cb18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb1a:	b1db      	cbz	r3, 800cb54 <_strtod_l+0x90c>
 800cb1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb1e:	4213      	tst	r3, r2
 800cb20:	d0ee      	beq.n	800cb00 <_strtod_l+0x8b8>
 800cb22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb24:	9a08      	ldr	r2, [sp, #32]
 800cb26:	4650      	mov	r0, sl
 800cb28:	4659      	mov	r1, fp
 800cb2a:	b1bb      	cbz	r3, 800cb5c <_strtod_l+0x914>
 800cb2c:	f7ff fb6c 	bl	800c208 <sulp>
 800cb30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb34:	ec53 2b10 	vmov	r2, r3, d0
 800cb38:	f7f3 fbc8 	bl	80002cc <__adddf3>
 800cb3c:	4682      	mov	sl, r0
 800cb3e:	468b      	mov	fp, r1
 800cb40:	e7de      	b.n	800cb00 <_strtod_l+0x8b8>
 800cb42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cb46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cb4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cb4e:	f04f 3aff 	mov.w	sl, #4294967295
 800cb52:	e7d5      	b.n	800cb00 <_strtod_l+0x8b8>
 800cb54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb56:	ea13 0f0a 	tst.w	r3, sl
 800cb5a:	e7e1      	b.n	800cb20 <_strtod_l+0x8d8>
 800cb5c:	f7ff fb54 	bl	800c208 <sulp>
 800cb60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb64:	ec53 2b10 	vmov	r2, r3, d0
 800cb68:	f7f3 fbae 	bl	80002c8 <__aeabi_dsub>
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	2300      	movs	r3, #0
 800cb70:	4682      	mov	sl, r0
 800cb72:	468b      	mov	fp, r1
 800cb74:	f7f3 ffc8 	bl	8000b08 <__aeabi_dcmpeq>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d0c1      	beq.n	800cb00 <_strtod_l+0x8b8>
 800cb7c:	e619      	b.n	800c7b2 <_strtod_l+0x56a>
 800cb7e:	4641      	mov	r1, r8
 800cb80:	4620      	mov	r0, r4
 800cb82:	f7ff facb 	bl	800c11c <__ratio>
 800cb86:	ec57 6b10 	vmov	r6, r7, d0
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cb90:	4630      	mov	r0, r6
 800cb92:	4639      	mov	r1, r7
 800cb94:	f7f3 ffcc 	bl	8000b30 <__aeabi_dcmple>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d06f      	beq.n	800cc7c <_strtod_l+0xa34>
 800cb9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d17a      	bne.n	800cc98 <_strtod_l+0xa50>
 800cba2:	f1ba 0f00 	cmp.w	sl, #0
 800cba6:	d158      	bne.n	800cc5a <_strtod_l+0xa12>
 800cba8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d15a      	bne.n	800cc68 <_strtod_l+0xa20>
 800cbb2:	4b64      	ldr	r3, [pc, #400]	@ (800cd44 <_strtod_l+0xafc>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	4639      	mov	r1, r7
 800cbba:	f7f3 ffaf 	bl	8000b1c <__aeabi_dcmplt>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d159      	bne.n	800cc76 <_strtod_l+0xa2e>
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	4639      	mov	r1, r7
 800cbc6:	4b60      	ldr	r3, [pc, #384]	@ (800cd48 <_strtod_l+0xb00>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f7f3 fd35 	bl	8000638 <__aeabi_dmul>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	460f      	mov	r7, r1
 800cbd2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cbd6:	9606      	str	r6, [sp, #24]
 800cbd8:	9307      	str	r3, [sp, #28]
 800cbda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbde:	4d57      	ldr	r5, [pc, #348]	@ (800cd3c <_strtod_l+0xaf4>)
 800cbe0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cbe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbe6:	401d      	ands	r5, r3
 800cbe8:	4b58      	ldr	r3, [pc, #352]	@ (800cd4c <_strtod_l+0xb04>)
 800cbea:	429d      	cmp	r5, r3
 800cbec:	f040 80b2 	bne.w	800cd54 <_strtod_l+0xb0c>
 800cbf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbf2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cbf6:	ec4b ab10 	vmov	d0, sl, fp
 800cbfa:	f7ff f9c7 	bl	800bf8c <__ulp>
 800cbfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc02:	ec51 0b10 	vmov	r0, r1, d0
 800cc06:	f7f3 fd17 	bl	8000638 <__aeabi_dmul>
 800cc0a:	4652      	mov	r2, sl
 800cc0c:	465b      	mov	r3, fp
 800cc0e:	f7f3 fb5d 	bl	80002cc <__adddf3>
 800cc12:	460b      	mov	r3, r1
 800cc14:	4949      	ldr	r1, [pc, #292]	@ (800cd3c <_strtod_l+0xaf4>)
 800cc16:	4a4e      	ldr	r2, [pc, #312]	@ (800cd50 <_strtod_l+0xb08>)
 800cc18:	4019      	ands	r1, r3
 800cc1a:	4291      	cmp	r1, r2
 800cc1c:	4682      	mov	sl, r0
 800cc1e:	d942      	bls.n	800cca6 <_strtod_l+0xa5e>
 800cc20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc22:	4b47      	ldr	r3, [pc, #284]	@ (800cd40 <_strtod_l+0xaf8>)
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d103      	bne.n	800cc30 <_strtod_l+0x9e8>
 800cc28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	f43f ad2b 	beq.w	800c686 <_strtod_l+0x43e>
 800cc30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cd40 <_strtod_l+0xaf8>
 800cc34:	f04f 3aff 	mov.w	sl, #4294967295
 800cc38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc3a:	9805      	ldr	r0, [sp, #20]
 800cc3c:	f7fe fe72 	bl	800b924 <_Bfree>
 800cc40:	9805      	ldr	r0, [sp, #20]
 800cc42:	4649      	mov	r1, r9
 800cc44:	f7fe fe6e 	bl	800b924 <_Bfree>
 800cc48:	9805      	ldr	r0, [sp, #20]
 800cc4a:	4641      	mov	r1, r8
 800cc4c:	f7fe fe6a 	bl	800b924 <_Bfree>
 800cc50:	9805      	ldr	r0, [sp, #20]
 800cc52:	4621      	mov	r1, r4
 800cc54:	f7fe fe66 	bl	800b924 <_Bfree>
 800cc58:	e618      	b.n	800c88c <_strtod_l+0x644>
 800cc5a:	f1ba 0f01 	cmp.w	sl, #1
 800cc5e:	d103      	bne.n	800cc68 <_strtod_l+0xa20>
 800cc60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f43f ada5 	beq.w	800c7b2 <_strtod_l+0x56a>
 800cc68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cd18 <_strtod_l+0xad0>
 800cc6c:	4f35      	ldr	r7, [pc, #212]	@ (800cd44 <_strtod_l+0xafc>)
 800cc6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc72:	2600      	movs	r6, #0
 800cc74:	e7b1      	b.n	800cbda <_strtod_l+0x992>
 800cc76:	4f34      	ldr	r7, [pc, #208]	@ (800cd48 <_strtod_l+0xb00>)
 800cc78:	2600      	movs	r6, #0
 800cc7a:	e7aa      	b.n	800cbd2 <_strtod_l+0x98a>
 800cc7c:	4b32      	ldr	r3, [pc, #200]	@ (800cd48 <_strtod_l+0xb00>)
 800cc7e:	4630      	mov	r0, r6
 800cc80:	4639      	mov	r1, r7
 800cc82:	2200      	movs	r2, #0
 800cc84:	f7f3 fcd8 	bl	8000638 <__aeabi_dmul>
 800cc88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460f      	mov	r7, r1
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d09f      	beq.n	800cbd2 <_strtod_l+0x98a>
 800cc92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc96:	e7a0      	b.n	800cbda <_strtod_l+0x992>
 800cc98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cd20 <_strtod_l+0xad8>
 800cc9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cca0:	ec57 6b17 	vmov	r6, r7, d7
 800cca4:	e799      	b.n	800cbda <_strtod_l+0x992>
 800cca6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ccaa:	9b08      	ldr	r3, [sp, #32]
 800ccac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1c1      	bne.n	800cc38 <_strtod_l+0x9f0>
 800ccb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccb8:	0d1b      	lsrs	r3, r3, #20
 800ccba:	051b      	lsls	r3, r3, #20
 800ccbc:	429d      	cmp	r5, r3
 800ccbe:	d1bb      	bne.n	800cc38 <_strtod_l+0x9f0>
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	4639      	mov	r1, r7
 800ccc4:	f7f4 f818 	bl	8000cf8 <__aeabi_d2lz>
 800ccc8:	f7f3 fc88 	bl	80005dc <__aeabi_l2d>
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	4639      	mov	r1, r7
 800ccd4:	f7f3 faf8 	bl	80002c8 <__aeabi_dsub>
 800ccd8:	460b      	mov	r3, r1
 800ccda:	4602      	mov	r2, r0
 800ccdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cce0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cce6:	ea46 060a 	orr.w	r6, r6, sl
 800ccea:	431e      	orrs	r6, r3
 800ccec:	d06f      	beq.n	800cdce <_strtod_l+0xb86>
 800ccee:	a30e      	add	r3, pc, #56	@ (adr r3, 800cd28 <_strtod_l+0xae0>)
 800ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf4:	f7f3 ff12 	bl	8000b1c <__aeabi_dcmplt>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	f47f accf 	bne.w	800c69c <_strtod_l+0x454>
 800ccfe:	a30c      	add	r3, pc, #48	@ (adr r3, 800cd30 <_strtod_l+0xae8>)
 800cd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd08:	f7f3 ff26 	bl	8000b58 <__aeabi_dcmpgt>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d093      	beq.n	800cc38 <_strtod_l+0x9f0>
 800cd10:	e4c4      	b.n	800c69c <_strtod_l+0x454>
 800cd12:	bf00      	nop
 800cd14:	f3af 8000 	nop.w
 800cd18:	00000000 	.word	0x00000000
 800cd1c:	bff00000 	.word	0xbff00000
 800cd20:	00000000 	.word	0x00000000
 800cd24:	3ff00000 	.word	0x3ff00000
 800cd28:	94a03595 	.word	0x94a03595
 800cd2c:	3fdfffff 	.word	0x3fdfffff
 800cd30:	35afe535 	.word	0x35afe535
 800cd34:	3fe00000 	.word	0x3fe00000
 800cd38:	000fffff 	.word	0x000fffff
 800cd3c:	7ff00000 	.word	0x7ff00000
 800cd40:	7fefffff 	.word	0x7fefffff
 800cd44:	3ff00000 	.word	0x3ff00000
 800cd48:	3fe00000 	.word	0x3fe00000
 800cd4c:	7fe00000 	.word	0x7fe00000
 800cd50:	7c9fffff 	.word	0x7c9fffff
 800cd54:	9b08      	ldr	r3, [sp, #32]
 800cd56:	b323      	cbz	r3, 800cda2 <_strtod_l+0xb5a>
 800cd58:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cd5c:	d821      	bhi.n	800cda2 <_strtod_l+0xb5a>
 800cd5e:	a328      	add	r3, pc, #160	@ (adr r3, 800ce00 <_strtod_l+0xbb8>)
 800cd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd64:	4630      	mov	r0, r6
 800cd66:	4639      	mov	r1, r7
 800cd68:	f7f3 fee2 	bl	8000b30 <__aeabi_dcmple>
 800cd6c:	b1a0      	cbz	r0, 800cd98 <_strtod_l+0xb50>
 800cd6e:	4639      	mov	r1, r7
 800cd70:	4630      	mov	r0, r6
 800cd72:	f7f3 ff39 	bl	8000be8 <__aeabi_d2uiz>
 800cd76:	2801      	cmp	r0, #1
 800cd78:	bf38      	it	cc
 800cd7a:	2001      	movcc	r0, #1
 800cd7c:	f7f3 fbe2 	bl	8000544 <__aeabi_ui2d>
 800cd80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd82:	4606      	mov	r6, r0
 800cd84:	460f      	mov	r7, r1
 800cd86:	b9fb      	cbnz	r3, 800cdc8 <_strtod_l+0xb80>
 800cd88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd8c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cd8e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd90:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cd94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd9a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cd9e:	1b5b      	subs	r3, r3, r5
 800cda0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cda2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cda6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cdaa:	f7ff f8ef 	bl	800bf8c <__ulp>
 800cdae:	4650      	mov	r0, sl
 800cdb0:	ec53 2b10 	vmov	r2, r3, d0
 800cdb4:	4659      	mov	r1, fp
 800cdb6:	f7f3 fc3f 	bl	8000638 <__aeabi_dmul>
 800cdba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cdbe:	f7f3 fa85 	bl	80002cc <__adddf3>
 800cdc2:	4682      	mov	sl, r0
 800cdc4:	468b      	mov	fp, r1
 800cdc6:	e770      	b.n	800ccaa <_strtod_l+0xa62>
 800cdc8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cdcc:	e7e0      	b.n	800cd90 <_strtod_l+0xb48>
 800cdce:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce08 <_strtod_l+0xbc0>)
 800cdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd4:	f7f3 fea2 	bl	8000b1c <__aeabi_dcmplt>
 800cdd8:	e798      	b.n	800cd0c <_strtod_l+0xac4>
 800cdda:	2300      	movs	r3, #0
 800cddc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdde:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cde0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cde2:	6013      	str	r3, [r2, #0]
 800cde4:	f7ff ba6d 	b.w	800c2c2 <_strtod_l+0x7a>
 800cde8:	2a65      	cmp	r2, #101	@ 0x65
 800cdea:	f43f ab66 	beq.w	800c4ba <_strtod_l+0x272>
 800cdee:	2a45      	cmp	r2, #69	@ 0x45
 800cdf0:	f43f ab63 	beq.w	800c4ba <_strtod_l+0x272>
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	f7ff bb9e 	b.w	800c536 <_strtod_l+0x2ee>
 800cdfa:	bf00      	nop
 800cdfc:	f3af 8000 	nop.w
 800ce00:	ffc00000 	.word	0xffc00000
 800ce04:	41dfffff 	.word	0x41dfffff
 800ce08:	94a03595 	.word	0x94a03595
 800ce0c:	3fcfffff 	.word	0x3fcfffff

0800ce10 <_strtod_r>:
 800ce10:	4b01      	ldr	r3, [pc, #4]	@ (800ce18 <_strtod_r+0x8>)
 800ce12:	f7ff ba19 	b.w	800c248 <_strtod_l>
 800ce16:	bf00      	nop
 800ce18:	20000168 	.word	0x20000168

0800ce1c <_strtol_l.constprop.0>:
 800ce1c:	2b24      	cmp	r3, #36	@ 0x24
 800ce1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce22:	4686      	mov	lr, r0
 800ce24:	4690      	mov	r8, r2
 800ce26:	d801      	bhi.n	800ce2c <_strtol_l.constprop.0+0x10>
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d106      	bne.n	800ce3a <_strtol_l.constprop.0+0x1e>
 800ce2c:	f7fd fe62 	bl	800aaf4 <__errno>
 800ce30:	2316      	movs	r3, #22
 800ce32:	6003      	str	r3, [r0, #0]
 800ce34:	2000      	movs	r0, #0
 800ce36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce3a:	4834      	ldr	r0, [pc, #208]	@ (800cf0c <_strtol_l.constprop.0+0xf0>)
 800ce3c:	460d      	mov	r5, r1
 800ce3e:	462a      	mov	r2, r5
 800ce40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce44:	5d06      	ldrb	r6, [r0, r4]
 800ce46:	f016 0608 	ands.w	r6, r6, #8
 800ce4a:	d1f8      	bne.n	800ce3e <_strtol_l.constprop.0+0x22>
 800ce4c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce4e:	d12d      	bne.n	800ceac <_strtol_l.constprop.0+0x90>
 800ce50:	782c      	ldrb	r4, [r5, #0]
 800ce52:	2601      	movs	r6, #1
 800ce54:	1c95      	adds	r5, r2, #2
 800ce56:	f033 0210 	bics.w	r2, r3, #16
 800ce5a:	d109      	bne.n	800ce70 <_strtol_l.constprop.0+0x54>
 800ce5c:	2c30      	cmp	r4, #48	@ 0x30
 800ce5e:	d12a      	bne.n	800ceb6 <_strtol_l.constprop.0+0x9a>
 800ce60:	782a      	ldrb	r2, [r5, #0]
 800ce62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce66:	2a58      	cmp	r2, #88	@ 0x58
 800ce68:	d125      	bne.n	800ceb6 <_strtol_l.constprop.0+0x9a>
 800ce6a:	786c      	ldrb	r4, [r5, #1]
 800ce6c:	2310      	movs	r3, #16
 800ce6e:	3502      	adds	r5, #2
 800ce70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ce74:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ce78:	2200      	movs	r2, #0
 800ce7a:	fbbc f9f3 	udiv	r9, ip, r3
 800ce7e:	4610      	mov	r0, r2
 800ce80:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ce88:	2f09      	cmp	r7, #9
 800ce8a:	d81b      	bhi.n	800cec4 <_strtol_l.constprop.0+0xa8>
 800ce8c:	463c      	mov	r4, r7
 800ce8e:	42a3      	cmp	r3, r4
 800ce90:	dd27      	ble.n	800cee2 <_strtol_l.constprop.0+0xc6>
 800ce92:	1c57      	adds	r7, r2, #1
 800ce94:	d007      	beq.n	800cea6 <_strtol_l.constprop.0+0x8a>
 800ce96:	4581      	cmp	r9, r0
 800ce98:	d320      	bcc.n	800cedc <_strtol_l.constprop.0+0xc0>
 800ce9a:	d101      	bne.n	800cea0 <_strtol_l.constprop.0+0x84>
 800ce9c:	45a2      	cmp	sl, r4
 800ce9e:	db1d      	blt.n	800cedc <_strtol_l.constprop.0+0xc0>
 800cea0:	fb00 4003 	mla	r0, r0, r3, r4
 800cea4:	2201      	movs	r2, #1
 800cea6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ceaa:	e7eb      	b.n	800ce84 <_strtol_l.constprop.0+0x68>
 800ceac:	2c2b      	cmp	r4, #43	@ 0x2b
 800ceae:	bf04      	itt	eq
 800ceb0:	782c      	ldrbeq	r4, [r5, #0]
 800ceb2:	1c95      	addeq	r5, r2, #2
 800ceb4:	e7cf      	b.n	800ce56 <_strtol_l.constprop.0+0x3a>
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1da      	bne.n	800ce70 <_strtol_l.constprop.0+0x54>
 800ceba:	2c30      	cmp	r4, #48	@ 0x30
 800cebc:	bf0c      	ite	eq
 800cebe:	2308      	moveq	r3, #8
 800cec0:	230a      	movne	r3, #10
 800cec2:	e7d5      	b.n	800ce70 <_strtol_l.constprop.0+0x54>
 800cec4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cec8:	2f19      	cmp	r7, #25
 800ceca:	d801      	bhi.n	800ced0 <_strtol_l.constprop.0+0xb4>
 800cecc:	3c37      	subs	r4, #55	@ 0x37
 800cece:	e7de      	b.n	800ce8e <_strtol_l.constprop.0+0x72>
 800ced0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ced4:	2f19      	cmp	r7, #25
 800ced6:	d804      	bhi.n	800cee2 <_strtol_l.constprop.0+0xc6>
 800ced8:	3c57      	subs	r4, #87	@ 0x57
 800ceda:	e7d8      	b.n	800ce8e <_strtol_l.constprop.0+0x72>
 800cedc:	f04f 32ff 	mov.w	r2, #4294967295
 800cee0:	e7e1      	b.n	800cea6 <_strtol_l.constprop.0+0x8a>
 800cee2:	1c53      	adds	r3, r2, #1
 800cee4:	d108      	bne.n	800cef8 <_strtol_l.constprop.0+0xdc>
 800cee6:	2322      	movs	r3, #34	@ 0x22
 800cee8:	f8ce 3000 	str.w	r3, [lr]
 800ceec:	4660      	mov	r0, ip
 800ceee:	f1b8 0f00 	cmp.w	r8, #0
 800cef2:	d0a0      	beq.n	800ce36 <_strtol_l.constprop.0+0x1a>
 800cef4:	1e69      	subs	r1, r5, #1
 800cef6:	e006      	b.n	800cf06 <_strtol_l.constprop.0+0xea>
 800cef8:	b106      	cbz	r6, 800cefc <_strtol_l.constprop.0+0xe0>
 800cefa:	4240      	negs	r0, r0
 800cefc:	f1b8 0f00 	cmp.w	r8, #0
 800cf00:	d099      	beq.n	800ce36 <_strtol_l.constprop.0+0x1a>
 800cf02:	2a00      	cmp	r2, #0
 800cf04:	d1f6      	bne.n	800cef4 <_strtol_l.constprop.0+0xd8>
 800cf06:	f8c8 1000 	str.w	r1, [r8]
 800cf0a:	e794      	b.n	800ce36 <_strtol_l.constprop.0+0x1a>
 800cf0c:	0800e381 	.word	0x0800e381

0800cf10 <_strtol_r>:
 800cf10:	f7ff bf84 	b.w	800ce1c <_strtol_l.constprop.0>

0800cf14 <__ssputs_r>:
 800cf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf18:	688e      	ldr	r6, [r1, #8]
 800cf1a:	461f      	mov	r7, r3
 800cf1c:	42be      	cmp	r6, r7
 800cf1e:	680b      	ldr	r3, [r1, #0]
 800cf20:	4682      	mov	sl, r0
 800cf22:	460c      	mov	r4, r1
 800cf24:	4690      	mov	r8, r2
 800cf26:	d82d      	bhi.n	800cf84 <__ssputs_r+0x70>
 800cf28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf30:	d026      	beq.n	800cf80 <__ssputs_r+0x6c>
 800cf32:	6965      	ldr	r5, [r4, #20]
 800cf34:	6909      	ldr	r1, [r1, #16]
 800cf36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf3a:	eba3 0901 	sub.w	r9, r3, r1
 800cf3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf42:	1c7b      	adds	r3, r7, #1
 800cf44:	444b      	add	r3, r9
 800cf46:	106d      	asrs	r5, r5, #1
 800cf48:	429d      	cmp	r5, r3
 800cf4a:	bf38      	it	cc
 800cf4c:	461d      	movcc	r5, r3
 800cf4e:	0553      	lsls	r3, r2, #21
 800cf50:	d527      	bpl.n	800cfa2 <__ssputs_r+0x8e>
 800cf52:	4629      	mov	r1, r5
 800cf54:	f7fc fd4e 	bl	80099f4 <_malloc_r>
 800cf58:	4606      	mov	r6, r0
 800cf5a:	b360      	cbz	r0, 800cfb6 <__ssputs_r+0xa2>
 800cf5c:	6921      	ldr	r1, [r4, #16]
 800cf5e:	464a      	mov	r2, r9
 800cf60:	f7fd fdf5 	bl	800ab4e <memcpy>
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf6e:	81a3      	strh	r3, [r4, #12]
 800cf70:	6126      	str	r6, [r4, #16]
 800cf72:	6165      	str	r5, [r4, #20]
 800cf74:	444e      	add	r6, r9
 800cf76:	eba5 0509 	sub.w	r5, r5, r9
 800cf7a:	6026      	str	r6, [r4, #0]
 800cf7c:	60a5      	str	r5, [r4, #8]
 800cf7e:	463e      	mov	r6, r7
 800cf80:	42be      	cmp	r6, r7
 800cf82:	d900      	bls.n	800cf86 <__ssputs_r+0x72>
 800cf84:	463e      	mov	r6, r7
 800cf86:	6820      	ldr	r0, [r4, #0]
 800cf88:	4632      	mov	r2, r6
 800cf8a:	4641      	mov	r1, r8
 800cf8c:	f000 f9c6 	bl	800d31c <memmove>
 800cf90:	68a3      	ldr	r3, [r4, #8]
 800cf92:	1b9b      	subs	r3, r3, r6
 800cf94:	60a3      	str	r3, [r4, #8]
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	4433      	add	r3, r6
 800cf9a:	6023      	str	r3, [r4, #0]
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfa2:	462a      	mov	r2, r5
 800cfa4:	f000 fd6d 	bl	800da82 <_realloc_r>
 800cfa8:	4606      	mov	r6, r0
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d1e0      	bne.n	800cf70 <__ssputs_r+0x5c>
 800cfae:	6921      	ldr	r1, [r4, #16]
 800cfb0:	4650      	mov	r0, sl
 800cfb2:	f7fe fc2d 	bl	800b810 <_free_r>
 800cfb6:	230c      	movs	r3, #12
 800cfb8:	f8ca 3000 	str.w	r3, [sl]
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfc2:	81a3      	strh	r3, [r4, #12]
 800cfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc8:	e7e9      	b.n	800cf9e <__ssputs_r+0x8a>
	...

0800cfcc <_svfiprintf_r>:
 800cfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd0:	4698      	mov	r8, r3
 800cfd2:	898b      	ldrh	r3, [r1, #12]
 800cfd4:	061b      	lsls	r3, r3, #24
 800cfd6:	b09d      	sub	sp, #116	@ 0x74
 800cfd8:	4607      	mov	r7, r0
 800cfda:	460d      	mov	r5, r1
 800cfdc:	4614      	mov	r4, r2
 800cfde:	d510      	bpl.n	800d002 <_svfiprintf_r+0x36>
 800cfe0:	690b      	ldr	r3, [r1, #16]
 800cfe2:	b973      	cbnz	r3, 800d002 <_svfiprintf_r+0x36>
 800cfe4:	2140      	movs	r1, #64	@ 0x40
 800cfe6:	f7fc fd05 	bl	80099f4 <_malloc_r>
 800cfea:	6028      	str	r0, [r5, #0]
 800cfec:	6128      	str	r0, [r5, #16]
 800cfee:	b930      	cbnz	r0, 800cffe <_svfiprintf_r+0x32>
 800cff0:	230c      	movs	r3, #12
 800cff2:	603b      	str	r3, [r7, #0]
 800cff4:	f04f 30ff 	mov.w	r0, #4294967295
 800cff8:	b01d      	add	sp, #116	@ 0x74
 800cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffe:	2340      	movs	r3, #64	@ 0x40
 800d000:	616b      	str	r3, [r5, #20]
 800d002:	2300      	movs	r3, #0
 800d004:	9309      	str	r3, [sp, #36]	@ 0x24
 800d006:	2320      	movs	r3, #32
 800d008:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d00c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d010:	2330      	movs	r3, #48	@ 0x30
 800d012:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d1b0 <_svfiprintf_r+0x1e4>
 800d016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d01a:	f04f 0901 	mov.w	r9, #1
 800d01e:	4623      	mov	r3, r4
 800d020:	469a      	mov	sl, r3
 800d022:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d026:	b10a      	cbz	r2, 800d02c <_svfiprintf_r+0x60>
 800d028:	2a25      	cmp	r2, #37	@ 0x25
 800d02a:	d1f9      	bne.n	800d020 <_svfiprintf_r+0x54>
 800d02c:	ebba 0b04 	subs.w	fp, sl, r4
 800d030:	d00b      	beq.n	800d04a <_svfiprintf_r+0x7e>
 800d032:	465b      	mov	r3, fp
 800d034:	4622      	mov	r2, r4
 800d036:	4629      	mov	r1, r5
 800d038:	4638      	mov	r0, r7
 800d03a:	f7ff ff6b 	bl	800cf14 <__ssputs_r>
 800d03e:	3001      	adds	r0, #1
 800d040:	f000 80a7 	beq.w	800d192 <_svfiprintf_r+0x1c6>
 800d044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d046:	445a      	add	r2, fp
 800d048:	9209      	str	r2, [sp, #36]	@ 0x24
 800d04a:	f89a 3000 	ldrb.w	r3, [sl]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f000 809f 	beq.w	800d192 <_svfiprintf_r+0x1c6>
 800d054:	2300      	movs	r3, #0
 800d056:	f04f 32ff 	mov.w	r2, #4294967295
 800d05a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d05e:	f10a 0a01 	add.w	sl, sl, #1
 800d062:	9304      	str	r3, [sp, #16]
 800d064:	9307      	str	r3, [sp, #28]
 800d066:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d06a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d06c:	4654      	mov	r4, sl
 800d06e:	2205      	movs	r2, #5
 800d070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d074:	484e      	ldr	r0, [pc, #312]	@ (800d1b0 <_svfiprintf_r+0x1e4>)
 800d076:	f7f3 f8cb 	bl	8000210 <memchr>
 800d07a:	9a04      	ldr	r2, [sp, #16]
 800d07c:	b9d8      	cbnz	r0, 800d0b6 <_svfiprintf_r+0xea>
 800d07e:	06d0      	lsls	r0, r2, #27
 800d080:	bf44      	itt	mi
 800d082:	2320      	movmi	r3, #32
 800d084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d088:	0711      	lsls	r1, r2, #28
 800d08a:	bf44      	itt	mi
 800d08c:	232b      	movmi	r3, #43	@ 0x2b
 800d08e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d092:	f89a 3000 	ldrb.w	r3, [sl]
 800d096:	2b2a      	cmp	r3, #42	@ 0x2a
 800d098:	d015      	beq.n	800d0c6 <_svfiprintf_r+0xfa>
 800d09a:	9a07      	ldr	r2, [sp, #28]
 800d09c:	4654      	mov	r4, sl
 800d09e:	2000      	movs	r0, #0
 800d0a0:	f04f 0c0a 	mov.w	ip, #10
 800d0a4:	4621      	mov	r1, r4
 800d0a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0aa:	3b30      	subs	r3, #48	@ 0x30
 800d0ac:	2b09      	cmp	r3, #9
 800d0ae:	d94b      	bls.n	800d148 <_svfiprintf_r+0x17c>
 800d0b0:	b1b0      	cbz	r0, 800d0e0 <_svfiprintf_r+0x114>
 800d0b2:	9207      	str	r2, [sp, #28]
 800d0b4:	e014      	b.n	800d0e0 <_svfiprintf_r+0x114>
 800d0b6:	eba0 0308 	sub.w	r3, r0, r8
 800d0ba:	fa09 f303 	lsl.w	r3, r9, r3
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	9304      	str	r3, [sp, #16]
 800d0c2:	46a2      	mov	sl, r4
 800d0c4:	e7d2      	b.n	800d06c <_svfiprintf_r+0xa0>
 800d0c6:	9b03      	ldr	r3, [sp, #12]
 800d0c8:	1d19      	adds	r1, r3, #4
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	9103      	str	r1, [sp, #12]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	bfbb      	ittet	lt
 800d0d2:	425b      	neglt	r3, r3
 800d0d4:	f042 0202 	orrlt.w	r2, r2, #2
 800d0d8:	9307      	strge	r3, [sp, #28]
 800d0da:	9307      	strlt	r3, [sp, #28]
 800d0dc:	bfb8      	it	lt
 800d0de:	9204      	strlt	r2, [sp, #16]
 800d0e0:	7823      	ldrb	r3, [r4, #0]
 800d0e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0e4:	d10a      	bne.n	800d0fc <_svfiprintf_r+0x130>
 800d0e6:	7863      	ldrb	r3, [r4, #1]
 800d0e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0ea:	d132      	bne.n	800d152 <_svfiprintf_r+0x186>
 800d0ec:	9b03      	ldr	r3, [sp, #12]
 800d0ee:	1d1a      	adds	r2, r3, #4
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	9203      	str	r2, [sp, #12]
 800d0f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0f8:	3402      	adds	r4, #2
 800d0fa:	9305      	str	r3, [sp, #20]
 800d0fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d1c0 <_svfiprintf_r+0x1f4>
 800d100:	7821      	ldrb	r1, [r4, #0]
 800d102:	2203      	movs	r2, #3
 800d104:	4650      	mov	r0, sl
 800d106:	f7f3 f883 	bl	8000210 <memchr>
 800d10a:	b138      	cbz	r0, 800d11c <_svfiprintf_r+0x150>
 800d10c:	9b04      	ldr	r3, [sp, #16]
 800d10e:	eba0 000a 	sub.w	r0, r0, sl
 800d112:	2240      	movs	r2, #64	@ 0x40
 800d114:	4082      	lsls	r2, r0
 800d116:	4313      	orrs	r3, r2
 800d118:	3401      	adds	r4, #1
 800d11a:	9304      	str	r3, [sp, #16]
 800d11c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d120:	4824      	ldr	r0, [pc, #144]	@ (800d1b4 <_svfiprintf_r+0x1e8>)
 800d122:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d126:	2206      	movs	r2, #6
 800d128:	f7f3 f872 	bl	8000210 <memchr>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d036      	beq.n	800d19e <_svfiprintf_r+0x1d2>
 800d130:	4b21      	ldr	r3, [pc, #132]	@ (800d1b8 <_svfiprintf_r+0x1ec>)
 800d132:	bb1b      	cbnz	r3, 800d17c <_svfiprintf_r+0x1b0>
 800d134:	9b03      	ldr	r3, [sp, #12]
 800d136:	3307      	adds	r3, #7
 800d138:	f023 0307 	bic.w	r3, r3, #7
 800d13c:	3308      	adds	r3, #8
 800d13e:	9303      	str	r3, [sp, #12]
 800d140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d142:	4433      	add	r3, r6
 800d144:	9309      	str	r3, [sp, #36]	@ 0x24
 800d146:	e76a      	b.n	800d01e <_svfiprintf_r+0x52>
 800d148:	fb0c 3202 	mla	r2, ip, r2, r3
 800d14c:	460c      	mov	r4, r1
 800d14e:	2001      	movs	r0, #1
 800d150:	e7a8      	b.n	800d0a4 <_svfiprintf_r+0xd8>
 800d152:	2300      	movs	r3, #0
 800d154:	3401      	adds	r4, #1
 800d156:	9305      	str	r3, [sp, #20]
 800d158:	4619      	mov	r1, r3
 800d15a:	f04f 0c0a 	mov.w	ip, #10
 800d15e:	4620      	mov	r0, r4
 800d160:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d164:	3a30      	subs	r2, #48	@ 0x30
 800d166:	2a09      	cmp	r2, #9
 800d168:	d903      	bls.n	800d172 <_svfiprintf_r+0x1a6>
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0c6      	beq.n	800d0fc <_svfiprintf_r+0x130>
 800d16e:	9105      	str	r1, [sp, #20]
 800d170:	e7c4      	b.n	800d0fc <_svfiprintf_r+0x130>
 800d172:	fb0c 2101 	mla	r1, ip, r1, r2
 800d176:	4604      	mov	r4, r0
 800d178:	2301      	movs	r3, #1
 800d17a:	e7f0      	b.n	800d15e <_svfiprintf_r+0x192>
 800d17c:	ab03      	add	r3, sp, #12
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	462a      	mov	r2, r5
 800d182:	4b0e      	ldr	r3, [pc, #56]	@ (800d1bc <_svfiprintf_r+0x1f0>)
 800d184:	a904      	add	r1, sp, #16
 800d186:	4638      	mov	r0, r7
 800d188:	f7fc fd60 	bl	8009c4c <_printf_float>
 800d18c:	1c42      	adds	r2, r0, #1
 800d18e:	4606      	mov	r6, r0
 800d190:	d1d6      	bne.n	800d140 <_svfiprintf_r+0x174>
 800d192:	89ab      	ldrh	r3, [r5, #12]
 800d194:	065b      	lsls	r3, r3, #25
 800d196:	f53f af2d 	bmi.w	800cff4 <_svfiprintf_r+0x28>
 800d19a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d19c:	e72c      	b.n	800cff8 <_svfiprintf_r+0x2c>
 800d19e:	ab03      	add	r3, sp, #12
 800d1a0:	9300      	str	r3, [sp, #0]
 800d1a2:	462a      	mov	r2, r5
 800d1a4:	4b05      	ldr	r3, [pc, #20]	@ (800d1bc <_svfiprintf_r+0x1f0>)
 800d1a6:	a904      	add	r1, sp, #16
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	f7fc ffe7 	bl	800a17c <_printf_i>
 800d1ae:	e7ed      	b.n	800d18c <_svfiprintf_r+0x1c0>
 800d1b0:	0800e481 	.word	0x0800e481
 800d1b4:	0800e48b 	.word	0x0800e48b
 800d1b8:	08009c4d 	.word	0x08009c4d
 800d1bc:	0800cf15 	.word	0x0800cf15
 800d1c0:	0800e487 	.word	0x0800e487

0800d1c4 <__sflush_r>:
 800d1c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1cc:	0716      	lsls	r6, r2, #28
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	d454      	bmi.n	800d27e <__sflush_r+0xba>
 800d1d4:	684b      	ldr	r3, [r1, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	dc02      	bgt.n	800d1e0 <__sflush_r+0x1c>
 800d1da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	dd48      	ble.n	800d272 <__sflush_r+0xae>
 800d1e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1e2:	2e00      	cmp	r6, #0
 800d1e4:	d045      	beq.n	800d272 <__sflush_r+0xae>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1ec:	682f      	ldr	r7, [r5, #0]
 800d1ee:	6a21      	ldr	r1, [r4, #32]
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	d030      	beq.n	800d256 <__sflush_r+0x92>
 800d1f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1f6:	89a3      	ldrh	r3, [r4, #12]
 800d1f8:	0759      	lsls	r1, r3, #29
 800d1fa:	d505      	bpl.n	800d208 <__sflush_r+0x44>
 800d1fc:	6863      	ldr	r3, [r4, #4]
 800d1fe:	1ad2      	subs	r2, r2, r3
 800d200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d202:	b10b      	cbz	r3, 800d208 <__sflush_r+0x44>
 800d204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	2300      	movs	r3, #0
 800d20a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d20c:	6a21      	ldr	r1, [r4, #32]
 800d20e:	4628      	mov	r0, r5
 800d210:	47b0      	blx	r6
 800d212:	1c43      	adds	r3, r0, #1
 800d214:	89a3      	ldrh	r3, [r4, #12]
 800d216:	d106      	bne.n	800d226 <__sflush_r+0x62>
 800d218:	6829      	ldr	r1, [r5, #0]
 800d21a:	291d      	cmp	r1, #29
 800d21c:	d82b      	bhi.n	800d276 <__sflush_r+0xb2>
 800d21e:	4a2a      	ldr	r2, [pc, #168]	@ (800d2c8 <__sflush_r+0x104>)
 800d220:	410a      	asrs	r2, r1
 800d222:	07d6      	lsls	r6, r2, #31
 800d224:	d427      	bmi.n	800d276 <__sflush_r+0xb2>
 800d226:	2200      	movs	r2, #0
 800d228:	6062      	str	r2, [r4, #4]
 800d22a:	04d9      	lsls	r1, r3, #19
 800d22c:	6922      	ldr	r2, [r4, #16]
 800d22e:	6022      	str	r2, [r4, #0]
 800d230:	d504      	bpl.n	800d23c <__sflush_r+0x78>
 800d232:	1c42      	adds	r2, r0, #1
 800d234:	d101      	bne.n	800d23a <__sflush_r+0x76>
 800d236:	682b      	ldr	r3, [r5, #0]
 800d238:	b903      	cbnz	r3, 800d23c <__sflush_r+0x78>
 800d23a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d23c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d23e:	602f      	str	r7, [r5, #0]
 800d240:	b1b9      	cbz	r1, 800d272 <__sflush_r+0xae>
 800d242:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d246:	4299      	cmp	r1, r3
 800d248:	d002      	beq.n	800d250 <__sflush_r+0x8c>
 800d24a:	4628      	mov	r0, r5
 800d24c:	f7fe fae0 	bl	800b810 <_free_r>
 800d250:	2300      	movs	r3, #0
 800d252:	6363      	str	r3, [r4, #52]	@ 0x34
 800d254:	e00d      	b.n	800d272 <__sflush_r+0xae>
 800d256:	2301      	movs	r3, #1
 800d258:	4628      	mov	r0, r5
 800d25a:	47b0      	blx	r6
 800d25c:	4602      	mov	r2, r0
 800d25e:	1c50      	adds	r0, r2, #1
 800d260:	d1c9      	bne.n	800d1f6 <__sflush_r+0x32>
 800d262:	682b      	ldr	r3, [r5, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d0c6      	beq.n	800d1f6 <__sflush_r+0x32>
 800d268:	2b1d      	cmp	r3, #29
 800d26a:	d001      	beq.n	800d270 <__sflush_r+0xac>
 800d26c:	2b16      	cmp	r3, #22
 800d26e:	d11e      	bne.n	800d2ae <__sflush_r+0xea>
 800d270:	602f      	str	r7, [r5, #0]
 800d272:	2000      	movs	r0, #0
 800d274:	e022      	b.n	800d2bc <__sflush_r+0xf8>
 800d276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d27a:	b21b      	sxth	r3, r3
 800d27c:	e01b      	b.n	800d2b6 <__sflush_r+0xf2>
 800d27e:	690f      	ldr	r7, [r1, #16]
 800d280:	2f00      	cmp	r7, #0
 800d282:	d0f6      	beq.n	800d272 <__sflush_r+0xae>
 800d284:	0793      	lsls	r3, r2, #30
 800d286:	680e      	ldr	r6, [r1, #0]
 800d288:	bf08      	it	eq
 800d28a:	694b      	ldreq	r3, [r1, #20]
 800d28c:	600f      	str	r7, [r1, #0]
 800d28e:	bf18      	it	ne
 800d290:	2300      	movne	r3, #0
 800d292:	eba6 0807 	sub.w	r8, r6, r7
 800d296:	608b      	str	r3, [r1, #8]
 800d298:	f1b8 0f00 	cmp.w	r8, #0
 800d29c:	dde9      	ble.n	800d272 <__sflush_r+0xae>
 800d29e:	6a21      	ldr	r1, [r4, #32]
 800d2a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d2a2:	4643      	mov	r3, r8
 800d2a4:	463a      	mov	r2, r7
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	47b0      	blx	r6
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	dc08      	bgt.n	800d2c0 <__sflush_r+0xfc>
 800d2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2b6:	81a3      	strh	r3, [r4, #12]
 800d2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c0:	4407      	add	r7, r0
 800d2c2:	eba8 0800 	sub.w	r8, r8, r0
 800d2c6:	e7e7      	b.n	800d298 <__sflush_r+0xd4>
 800d2c8:	dfbffffe 	.word	0xdfbffffe

0800d2cc <_fflush_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	690b      	ldr	r3, [r1, #16]
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	b913      	cbnz	r3, 800d2dc <_fflush_r+0x10>
 800d2d6:	2500      	movs	r5, #0
 800d2d8:	4628      	mov	r0, r5
 800d2da:	bd38      	pop	{r3, r4, r5, pc}
 800d2dc:	b118      	cbz	r0, 800d2e6 <_fflush_r+0x1a>
 800d2de:	6a03      	ldr	r3, [r0, #32]
 800d2e0:	b90b      	cbnz	r3, 800d2e6 <_fflush_r+0x1a>
 800d2e2:	f7fd fb0b 	bl	800a8fc <__sinit>
 800d2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d0f3      	beq.n	800d2d6 <_fflush_r+0xa>
 800d2ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2f0:	07d0      	lsls	r0, r2, #31
 800d2f2:	d404      	bmi.n	800d2fe <_fflush_r+0x32>
 800d2f4:	0599      	lsls	r1, r3, #22
 800d2f6:	d402      	bmi.n	800d2fe <_fflush_r+0x32>
 800d2f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2fa:	f7fd fc26 	bl	800ab4a <__retarget_lock_acquire_recursive>
 800d2fe:	4628      	mov	r0, r5
 800d300:	4621      	mov	r1, r4
 800d302:	f7ff ff5f 	bl	800d1c4 <__sflush_r>
 800d306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d308:	07da      	lsls	r2, r3, #31
 800d30a:	4605      	mov	r5, r0
 800d30c:	d4e4      	bmi.n	800d2d8 <_fflush_r+0xc>
 800d30e:	89a3      	ldrh	r3, [r4, #12]
 800d310:	059b      	lsls	r3, r3, #22
 800d312:	d4e1      	bmi.n	800d2d8 <_fflush_r+0xc>
 800d314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d316:	f7fd fc19 	bl	800ab4c <__retarget_lock_release_recursive>
 800d31a:	e7dd      	b.n	800d2d8 <_fflush_r+0xc>

0800d31c <memmove>:
 800d31c:	4288      	cmp	r0, r1
 800d31e:	b510      	push	{r4, lr}
 800d320:	eb01 0402 	add.w	r4, r1, r2
 800d324:	d902      	bls.n	800d32c <memmove+0x10>
 800d326:	4284      	cmp	r4, r0
 800d328:	4623      	mov	r3, r4
 800d32a:	d807      	bhi.n	800d33c <memmove+0x20>
 800d32c:	1e43      	subs	r3, r0, #1
 800d32e:	42a1      	cmp	r1, r4
 800d330:	d008      	beq.n	800d344 <memmove+0x28>
 800d332:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d33a:	e7f8      	b.n	800d32e <memmove+0x12>
 800d33c:	4402      	add	r2, r0
 800d33e:	4601      	mov	r1, r0
 800d340:	428a      	cmp	r2, r1
 800d342:	d100      	bne.n	800d346 <memmove+0x2a>
 800d344:	bd10      	pop	{r4, pc}
 800d346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d34a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d34e:	e7f7      	b.n	800d340 <memmove+0x24>

0800d350 <strncmp>:
 800d350:	b510      	push	{r4, lr}
 800d352:	b16a      	cbz	r2, 800d370 <strncmp+0x20>
 800d354:	3901      	subs	r1, #1
 800d356:	1884      	adds	r4, r0, r2
 800d358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d35c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d360:	429a      	cmp	r2, r3
 800d362:	d103      	bne.n	800d36c <strncmp+0x1c>
 800d364:	42a0      	cmp	r0, r4
 800d366:	d001      	beq.n	800d36c <strncmp+0x1c>
 800d368:	2a00      	cmp	r2, #0
 800d36a:	d1f5      	bne.n	800d358 <strncmp+0x8>
 800d36c:	1ad0      	subs	r0, r2, r3
 800d36e:	bd10      	pop	{r4, pc}
 800d370:	4610      	mov	r0, r2
 800d372:	e7fc      	b.n	800d36e <strncmp+0x1e>
 800d374:	0000      	movs	r0, r0
	...

0800d378 <nan>:
 800d378:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d380 <nan+0x8>
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	00000000 	.word	0x00000000
 800d384:	7ff80000 	.word	0x7ff80000

0800d388 <__assert_func>:
 800d388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d38a:	4614      	mov	r4, r2
 800d38c:	461a      	mov	r2, r3
 800d38e:	4b09      	ldr	r3, [pc, #36]	@ (800d3b4 <__assert_func+0x2c>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4605      	mov	r5, r0
 800d394:	68d8      	ldr	r0, [r3, #12]
 800d396:	b954      	cbnz	r4, 800d3ae <__assert_func+0x26>
 800d398:	4b07      	ldr	r3, [pc, #28]	@ (800d3b8 <__assert_func+0x30>)
 800d39a:	461c      	mov	r4, r3
 800d39c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3a0:	9100      	str	r1, [sp, #0]
 800d3a2:	462b      	mov	r3, r5
 800d3a4:	4905      	ldr	r1, [pc, #20]	@ (800d3bc <__assert_func+0x34>)
 800d3a6:	f000 fba7 	bl	800daf8 <fiprintf>
 800d3aa:	f000 fbb7 	bl	800db1c <abort>
 800d3ae:	4b04      	ldr	r3, [pc, #16]	@ (800d3c0 <__assert_func+0x38>)
 800d3b0:	e7f4      	b.n	800d39c <__assert_func+0x14>
 800d3b2:	bf00      	nop
 800d3b4:	20000118 	.word	0x20000118
 800d3b8:	0800e4d5 	.word	0x0800e4d5
 800d3bc:	0800e4a7 	.word	0x0800e4a7
 800d3c0:	0800e49a 	.word	0x0800e49a

0800d3c4 <_calloc_r>:
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	fba1 5402 	umull	r5, r4, r1, r2
 800d3ca:	b93c      	cbnz	r4, 800d3dc <_calloc_r+0x18>
 800d3cc:	4629      	mov	r1, r5
 800d3ce:	f7fc fb11 	bl	80099f4 <_malloc_r>
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	b928      	cbnz	r0, 800d3e2 <_calloc_r+0x1e>
 800d3d6:	2600      	movs	r6, #0
 800d3d8:	4630      	mov	r0, r6
 800d3da:	bd70      	pop	{r4, r5, r6, pc}
 800d3dc:	220c      	movs	r2, #12
 800d3de:	6002      	str	r2, [r0, #0]
 800d3e0:	e7f9      	b.n	800d3d6 <_calloc_r+0x12>
 800d3e2:	462a      	mov	r2, r5
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	f7fd fb22 	bl	800aa2e <memset>
 800d3ea:	e7f5      	b.n	800d3d8 <_calloc_r+0x14>

0800d3ec <rshift>:
 800d3ec:	6903      	ldr	r3, [r0, #16]
 800d3ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d3f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d3fa:	f100 0414 	add.w	r4, r0, #20
 800d3fe:	dd45      	ble.n	800d48c <rshift+0xa0>
 800d400:	f011 011f 	ands.w	r1, r1, #31
 800d404:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d408:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d40c:	d10c      	bne.n	800d428 <rshift+0x3c>
 800d40e:	f100 0710 	add.w	r7, r0, #16
 800d412:	4629      	mov	r1, r5
 800d414:	42b1      	cmp	r1, r6
 800d416:	d334      	bcc.n	800d482 <rshift+0x96>
 800d418:	1a9b      	subs	r3, r3, r2
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	1eea      	subs	r2, r5, #3
 800d41e:	4296      	cmp	r6, r2
 800d420:	bf38      	it	cc
 800d422:	2300      	movcc	r3, #0
 800d424:	4423      	add	r3, r4
 800d426:	e015      	b.n	800d454 <rshift+0x68>
 800d428:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d42c:	f1c1 0820 	rsb	r8, r1, #32
 800d430:	40cf      	lsrs	r7, r1
 800d432:	f105 0e04 	add.w	lr, r5, #4
 800d436:	46a1      	mov	r9, r4
 800d438:	4576      	cmp	r6, lr
 800d43a:	46f4      	mov	ip, lr
 800d43c:	d815      	bhi.n	800d46a <rshift+0x7e>
 800d43e:	1a9a      	subs	r2, r3, r2
 800d440:	0092      	lsls	r2, r2, #2
 800d442:	3a04      	subs	r2, #4
 800d444:	3501      	adds	r5, #1
 800d446:	42ae      	cmp	r6, r5
 800d448:	bf38      	it	cc
 800d44a:	2200      	movcc	r2, #0
 800d44c:	18a3      	adds	r3, r4, r2
 800d44e:	50a7      	str	r7, [r4, r2]
 800d450:	b107      	cbz	r7, 800d454 <rshift+0x68>
 800d452:	3304      	adds	r3, #4
 800d454:	1b1a      	subs	r2, r3, r4
 800d456:	42a3      	cmp	r3, r4
 800d458:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d45c:	bf08      	it	eq
 800d45e:	2300      	moveq	r3, #0
 800d460:	6102      	str	r2, [r0, #16]
 800d462:	bf08      	it	eq
 800d464:	6143      	streq	r3, [r0, #20]
 800d466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d46a:	f8dc c000 	ldr.w	ip, [ip]
 800d46e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d472:	ea4c 0707 	orr.w	r7, ip, r7
 800d476:	f849 7b04 	str.w	r7, [r9], #4
 800d47a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d47e:	40cf      	lsrs	r7, r1
 800d480:	e7da      	b.n	800d438 <rshift+0x4c>
 800d482:	f851 cb04 	ldr.w	ip, [r1], #4
 800d486:	f847 cf04 	str.w	ip, [r7, #4]!
 800d48a:	e7c3      	b.n	800d414 <rshift+0x28>
 800d48c:	4623      	mov	r3, r4
 800d48e:	e7e1      	b.n	800d454 <rshift+0x68>

0800d490 <__hexdig_fun>:
 800d490:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d494:	2b09      	cmp	r3, #9
 800d496:	d802      	bhi.n	800d49e <__hexdig_fun+0xe>
 800d498:	3820      	subs	r0, #32
 800d49a:	b2c0      	uxtb	r0, r0
 800d49c:	4770      	bx	lr
 800d49e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d4a2:	2b05      	cmp	r3, #5
 800d4a4:	d801      	bhi.n	800d4aa <__hexdig_fun+0x1a>
 800d4a6:	3847      	subs	r0, #71	@ 0x47
 800d4a8:	e7f7      	b.n	800d49a <__hexdig_fun+0xa>
 800d4aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d4ae:	2b05      	cmp	r3, #5
 800d4b0:	d801      	bhi.n	800d4b6 <__hexdig_fun+0x26>
 800d4b2:	3827      	subs	r0, #39	@ 0x27
 800d4b4:	e7f1      	b.n	800d49a <__hexdig_fun+0xa>
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	4770      	bx	lr
	...

0800d4bc <__gethex>:
 800d4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c0:	b085      	sub	sp, #20
 800d4c2:	468a      	mov	sl, r1
 800d4c4:	9302      	str	r3, [sp, #8]
 800d4c6:	680b      	ldr	r3, [r1, #0]
 800d4c8:	9001      	str	r0, [sp, #4]
 800d4ca:	4690      	mov	r8, r2
 800d4cc:	1c9c      	adds	r4, r3, #2
 800d4ce:	46a1      	mov	r9, r4
 800d4d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d4d4:	2830      	cmp	r0, #48	@ 0x30
 800d4d6:	d0fa      	beq.n	800d4ce <__gethex+0x12>
 800d4d8:	eba9 0303 	sub.w	r3, r9, r3
 800d4dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800d4e0:	f7ff ffd6 	bl	800d490 <__hexdig_fun>
 800d4e4:	4605      	mov	r5, r0
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d168      	bne.n	800d5bc <__gethex+0x100>
 800d4ea:	49a0      	ldr	r1, [pc, #640]	@ (800d76c <__gethex+0x2b0>)
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	4648      	mov	r0, r9
 800d4f0:	f7ff ff2e 	bl	800d350 <strncmp>
 800d4f4:	4607      	mov	r7, r0
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d167      	bne.n	800d5ca <__gethex+0x10e>
 800d4fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d4fe:	4626      	mov	r6, r4
 800d500:	f7ff ffc6 	bl	800d490 <__hexdig_fun>
 800d504:	2800      	cmp	r0, #0
 800d506:	d062      	beq.n	800d5ce <__gethex+0x112>
 800d508:	4623      	mov	r3, r4
 800d50a:	7818      	ldrb	r0, [r3, #0]
 800d50c:	2830      	cmp	r0, #48	@ 0x30
 800d50e:	4699      	mov	r9, r3
 800d510:	f103 0301 	add.w	r3, r3, #1
 800d514:	d0f9      	beq.n	800d50a <__gethex+0x4e>
 800d516:	f7ff ffbb 	bl	800d490 <__hexdig_fun>
 800d51a:	fab0 f580 	clz	r5, r0
 800d51e:	096d      	lsrs	r5, r5, #5
 800d520:	f04f 0b01 	mov.w	fp, #1
 800d524:	464a      	mov	r2, r9
 800d526:	4616      	mov	r6, r2
 800d528:	3201      	adds	r2, #1
 800d52a:	7830      	ldrb	r0, [r6, #0]
 800d52c:	f7ff ffb0 	bl	800d490 <__hexdig_fun>
 800d530:	2800      	cmp	r0, #0
 800d532:	d1f8      	bne.n	800d526 <__gethex+0x6a>
 800d534:	498d      	ldr	r1, [pc, #564]	@ (800d76c <__gethex+0x2b0>)
 800d536:	2201      	movs	r2, #1
 800d538:	4630      	mov	r0, r6
 800d53a:	f7ff ff09 	bl	800d350 <strncmp>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d13f      	bne.n	800d5c2 <__gethex+0x106>
 800d542:	b944      	cbnz	r4, 800d556 <__gethex+0x9a>
 800d544:	1c74      	adds	r4, r6, #1
 800d546:	4622      	mov	r2, r4
 800d548:	4616      	mov	r6, r2
 800d54a:	3201      	adds	r2, #1
 800d54c:	7830      	ldrb	r0, [r6, #0]
 800d54e:	f7ff ff9f 	bl	800d490 <__hexdig_fun>
 800d552:	2800      	cmp	r0, #0
 800d554:	d1f8      	bne.n	800d548 <__gethex+0x8c>
 800d556:	1ba4      	subs	r4, r4, r6
 800d558:	00a7      	lsls	r7, r4, #2
 800d55a:	7833      	ldrb	r3, [r6, #0]
 800d55c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d560:	2b50      	cmp	r3, #80	@ 0x50
 800d562:	d13e      	bne.n	800d5e2 <__gethex+0x126>
 800d564:	7873      	ldrb	r3, [r6, #1]
 800d566:	2b2b      	cmp	r3, #43	@ 0x2b
 800d568:	d033      	beq.n	800d5d2 <__gethex+0x116>
 800d56a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d56c:	d034      	beq.n	800d5d8 <__gethex+0x11c>
 800d56e:	1c71      	adds	r1, r6, #1
 800d570:	2400      	movs	r4, #0
 800d572:	7808      	ldrb	r0, [r1, #0]
 800d574:	f7ff ff8c 	bl	800d490 <__hexdig_fun>
 800d578:	1e43      	subs	r3, r0, #1
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b18      	cmp	r3, #24
 800d57e:	d830      	bhi.n	800d5e2 <__gethex+0x126>
 800d580:	f1a0 0210 	sub.w	r2, r0, #16
 800d584:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d588:	f7ff ff82 	bl	800d490 <__hexdig_fun>
 800d58c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d590:	fa5f fc8c 	uxtb.w	ip, ip
 800d594:	f1bc 0f18 	cmp.w	ip, #24
 800d598:	f04f 030a 	mov.w	r3, #10
 800d59c:	d91e      	bls.n	800d5dc <__gethex+0x120>
 800d59e:	b104      	cbz	r4, 800d5a2 <__gethex+0xe6>
 800d5a0:	4252      	negs	r2, r2
 800d5a2:	4417      	add	r7, r2
 800d5a4:	f8ca 1000 	str.w	r1, [sl]
 800d5a8:	b1ed      	cbz	r5, 800d5e6 <__gethex+0x12a>
 800d5aa:	f1bb 0f00 	cmp.w	fp, #0
 800d5ae:	bf0c      	ite	eq
 800d5b0:	2506      	moveq	r5, #6
 800d5b2:	2500      	movne	r5, #0
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	b005      	add	sp, #20
 800d5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5bc:	2500      	movs	r5, #0
 800d5be:	462c      	mov	r4, r5
 800d5c0:	e7b0      	b.n	800d524 <__gethex+0x68>
 800d5c2:	2c00      	cmp	r4, #0
 800d5c4:	d1c7      	bne.n	800d556 <__gethex+0x9a>
 800d5c6:	4627      	mov	r7, r4
 800d5c8:	e7c7      	b.n	800d55a <__gethex+0x9e>
 800d5ca:	464e      	mov	r6, r9
 800d5cc:	462f      	mov	r7, r5
 800d5ce:	2501      	movs	r5, #1
 800d5d0:	e7c3      	b.n	800d55a <__gethex+0x9e>
 800d5d2:	2400      	movs	r4, #0
 800d5d4:	1cb1      	adds	r1, r6, #2
 800d5d6:	e7cc      	b.n	800d572 <__gethex+0xb6>
 800d5d8:	2401      	movs	r4, #1
 800d5da:	e7fb      	b.n	800d5d4 <__gethex+0x118>
 800d5dc:	fb03 0002 	mla	r0, r3, r2, r0
 800d5e0:	e7ce      	b.n	800d580 <__gethex+0xc4>
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	e7de      	b.n	800d5a4 <__gethex+0xe8>
 800d5e6:	eba6 0309 	sub.w	r3, r6, r9
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	2b07      	cmp	r3, #7
 800d5f0:	dc0a      	bgt.n	800d608 <__gethex+0x14c>
 800d5f2:	9801      	ldr	r0, [sp, #4]
 800d5f4:	f7fe f956 	bl	800b8a4 <_Balloc>
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	b940      	cbnz	r0, 800d60e <__gethex+0x152>
 800d5fc:	4b5c      	ldr	r3, [pc, #368]	@ (800d770 <__gethex+0x2b4>)
 800d5fe:	4602      	mov	r2, r0
 800d600:	21e4      	movs	r1, #228	@ 0xe4
 800d602:	485c      	ldr	r0, [pc, #368]	@ (800d774 <__gethex+0x2b8>)
 800d604:	f7ff fec0 	bl	800d388 <__assert_func>
 800d608:	3101      	adds	r1, #1
 800d60a:	105b      	asrs	r3, r3, #1
 800d60c:	e7ef      	b.n	800d5ee <__gethex+0x132>
 800d60e:	f100 0a14 	add.w	sl, r0, #20
 800d612:	2300      	movs	r3, #0
 800d614:	4655      	mov	r5, sl
 800d616:	469b      	mov	fp, r3
 800d618:	45b1      	cmp	r9, r6
 800d61a:	d337      	bcc.n	800d68c <__gethex+0x1d0>
 800d61c:	f845 bb04 	str.w	fp, [r5], #4
 800d620:	eba5 050a 	sub.w	r5, r5, sl
 800d624:	10ad      	asrs	r5, r5, #2
 800d626:	6125      	str	r5, [r4, #16]
 800d628:	4658      	mov	r0, fp
 800d62a:	f7fe fa2d 	bl	800ba88 <__hi0bits>
 800d62e:	016d      	lsls	r5, r5, #5
 800d630:	f8d8 6000 	ldr.w	r6, [r8]
 800d634:	1a2d      	subs	r5, r5, r0
 800d636:	42b5      	cmp	r5, r6
 800d638:	dd54      	ble.n	800d6e4 <__gethex+0x228>
 800d63a:	1bad      	subs	r5, r5, r6
 800d63c:	4629      	mov	r1, r5
 800d63e:	4620      	mov	r0, r4
 800d640:	f7fe fdc1 	bl	800c1c6 <__any_on>
 800d644:	4681      	mov	r9, r0
 800d646:	b178      	cbz	r0, 800d668 <__gethex+0x1ac>
 800d648:	1e6b      	subs	r3, r5, #1
 800d64a:	1159      	asrs	r1, r3, #5
 800d64c:	f003 021f 	and.w	r2, r3, #31
 800d650:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d654:	f04f 0901 	mov.w	r9, #1
 800d658:	fa09 f202 	lsl.w	r2, r9, r2
 800d65c:	420a      	tst	r2, r1
 800d65e:	d003      	beq.n	800d668 <__gethex+0x1ac>
 800d660:	454b      	cmp	r3, r9
 800d662:	dc36      	bgt.n	800d6d2 <__gethex+0x216>
 800d664:	f04f 0902 	mov.w	r9, #2
 800d668:	4629      	mov	r1, r5
 800d66a:	4620      	mov	r0, r4
 800d66c:	f7ff febe 	bl	800d3ec <rshift>
 800d670:	442f      	add	r7, r5
 800d672:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d676:	42bb      	cmp	r3, r7
 800d678:	da42      	bge.n	800d700 <__gethex+0x244>
 800d67a:	9801      	ldr	r0, [sp, #4]
 800d67c:	4621      	mov	r1, r4
 800d67e:	f7fe f951 	bl	800b924 <_Bfree>
 800d682:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d684:	2300      	movs	r3, #0
 800d686:	6013      	str	r3, [r2, #0]
 800d688:	25a3      	movs	r5, #163	@ 0xa3
 800d68a:	e793      	b.n	800d5b4 <__gethex+0xf8>
 800d68c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d690:	2a2e      	cmp	r2, #46	@ 0x2e
 800d692:	d012      	beq.n	800d6ba <__gethex+0x1fe>
 800d694:	2b20      	cmp	r3, #32
 800d696:	d104      	bne.n	800d6a2 <__gethex+0x1e6>
 800d698:	f845 bb04 	str.w	fp, [r5], #4
 800d69c:	f04f 0b00 	mov.w	fp, #0
 800d6a0:	465b      	mov	r3, fp
 800d6a2:	7830      	ldrb	r0, [r6, #0]
 800d6a4:	9303      	str	r3, [sp, #12]
 800d6a6:	f7ff fef3 	bl	800d490 <__hexdig_fun>
 800d6aa:	9b03      	ldr	r3, [sp, #12]
 800d6ac:	f000 000f 	and.w	r0, r0, #15
 800d6b0:	4098      	lsls	r0, r3
 800d6b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d6b6:	3304      	adds	r3, #4
 800d6b8:	e7ae      	b.n	800d618 <__gethex+0x15c>
 800d6ba:	45b1      	cmp	r9, r6
 800d6bc:	d8ea      	bhi.n	800d694 <__gethex+0x1d8>
 800d6be:	492b      	ldr	r1, [pc, #172]	@ (800d76c <__gethex+0x2b0>)
 800d6c0:	9303      	str	r3, [sp, #12]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f7ff fe43 	bl	800d350 <strncmp>
 800d6ca:	9b03      	ldr	r3, [sp, #12]
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d1e1      	bne.n	800d694 <__gethex+0x1d8>
 800d6d0:	e7a2      	b.n	800d618 <__gethex+0x15c>
 800d6d2:	1ea9      	subs	r1, r5, #2
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f7fe fd76 	bl	800c1c6 <__any_on>
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d0c2      	beq.n	800d664 <__gethex+0x1a8>
 800d6de:	f04f 0903 	mov.w	r9, #3
 800d6e2:	e7c1      	b.n	800d668 <__gethex+0x1ac>
 800d6e4:	da09      	bge.n	800d6fa <__gethex+0x23e>
 800d6e6:	1b75      	subs	r5, r6, r5
 800d6e8:	4621      	mov	r1, r4
 800d6ea:	9801      	ldr	r0, [sp, #4]
 800d6ec:	462a      	mov	r2, r5
 800d6ee:	f7fe fb31 	bl	800bd54 <__lshift>
 800d6f2:	1b7f      	subs	r7, r7, r5
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	f100 0a14 	add.w	sl, r0, #20
 800d6fa:	f04f 0900 	mov.w	r9, #0
 800d6fe:	e7b8      	b.n	800d672 <__gethex+0x1b6>
 800d700:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d704:	42bd      	cmp	r5, r7
 800d706:	dd6f      	ble.n	800d7e8 <__gethex+0x32c>
 800d708:	1bed      	subs	r5, r5, r7
 800d70a:	42ae      	cmp	r6, r5
 800d70c:	dc34      	bgt.n	800d778 <__gethex+0x2bc>
 800d70e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d712:	2b02      	cmp	r3, #2
 800d714:	d022      	beq.n	800d75c <__gethex+0x2a0>
 800d716:	2b03      	cmp	r3, #3
 800d718:	d024      	beq.n	800d764 <__gethex+0x2a8>
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d115      	bne.n	800d74a <__gethex+0x28e>
 800d71e:	42ae      	cmp	r6, r5
 800d720:	d113      	bne.n	800d74a <__gethex+0x28e>
 800d722:	2e01      	cmp	r6, #1
 800d724:	d10b      	bne.n	800d73e <__gethex+0x282>
 800d726:	9a02      	ldr	r2, [sp, #8]
 800d728:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d72c:	6013      	str	r3, [r2, #0]
 800d72e:	2301      	movs	r3, #1
 800d730:	6123      	str	r3, [r4, #16]
 800d732:	f8ca 3000 	str.w	r3, [sl]
 800d736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d738:	2562      	movs	r5, #98	@ 0x62
 800d73a:	601c      	str	r4, [r3, #0]
 800d73c:	e73a      	b.n	800d5b4 <__gethex+0xf8>
 800d73e:	1e71      	subs	r1, r6, #1
 800d740:	4620      	mov	r0, r4
 800d742:	f7fe fd40 	bl	800c1c6 <__any_on>
 800d746:	2800      	cmp	r0, #0
 800d748:	d1ed      	bne.n	800d726 <__gethex+0x26a>
 800d74a:	9801      	ldr	r0, [sp, #4]
 800d74c:	4621      	mov	r1, r4
 800d74e:	f7fe f8e9 	bl	800b924 <_Bfree>
 800d752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d754:	2300      	movs	r3, #0
 800d756:	6013      	str	r3, [r2, #0]
 800d758:	2550      	movs	r5, #80	@ 0x50
 800d75a:	e72b      	b.n	800d5b4 <__gethex+0xf8>
 800d75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1f3      	bne.n	800d74a <__gethex+0x28e>
 800d762:	e7e0      	b.n	800d726 <__gethex+0x26a>
 800d764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1dd      	bne.n	800d726 <__gethex+0x26a>
 800d76a:	e7ee      	b.n	800d74a <__gethex+0x28e>
 800d76c:	0800e328 	.word	0x0800e328
 800d770:	0800e1bd 	.word	0x0800e1bd
 800d774:	0800e4d6 	.word	0x0800e4d6
 800d778:	1e6f      	subs	r7, r5, #1
 800d77a:	f1b9 0f00 	cmp.w	r9, #0
 800d77e:	d130      	bne.n	800d7e2 <__gethex+0x326>
 800d780:	b127      	cbz	r7, 800d78c <__gethex+0x2d0>
 800d782:	4639      	mov	r1, r7
 800d784:	4620      	mov	r0, r4
 800d786:	f7fe fd1e 	bl	800c1c6 <__any_on>
 800d78a:	4681      	mov	r9, r0
 800d78c:	117a      	asrs	r2, r7, #5
 800d78e:	2301      	movs	r3, #1
 800d790:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d794:	f007 071f 	and.w	r7, r7, #31
 800d798:	40bb      	lsls	r3, r7
 800d79a:	4213      	tst	r3, r2
 800d79c:	4629      	mov	r1, r5
 800d79e:	4620      	mov	r0, r4
 800d7a0:	bf18      	it	ne
 800d7a2:	f049 0902 	orrne.w	r9, r9, #2
 800d7a6:	f7ff fe21 	bl	800d3ec <rshift>
 800d7aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d7ae:	1b76      	subs	r6, r6, r5
 800d7b0:	2502      	movs	r5, #2
 800d7b2:	f1b9 0f00 	cmp.w	r9, #0
 800d7b6:	d047      	beq.n	800d848 <__gethex+0x38c>
 800d7b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	d015      	beq.n	800d7ec <__gethex+0x330>
 800d7c0:	2b03      	cmp	r3, #3
 800d7c2:	d017      	beq.n	800d7f4 <__gethex+0x338>
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d109      	bne.n	800d7dc <__gethex+0x320>
 800d7c8:	f019 0f02 	tst.w	r9, #2
 800d7cc:	d006      	beq.n	800d7dc <__gethex+0x320>
 800d7ce:	f8da 3000 	ldr.w	r3, [sl]
 800d7d2:	ea49 0903 	orr.w	r9, r9, r3
 800d7d6:	f019 0f01 	tst.w	r9, #1
 800d7da:	d10e      	bne.n	800d7fa <__gethex+0x33e>
 800d7dc:	f045 0510 	orr.w	r5, r5, #16
 800d7e0:	e032      	b.n	800d848 <__gethex+0x38c>
 800d7e2:	f04f 0901 	mov.w	r9, #1
 800d7e6:	e7d1      	b.n	800d78c <__gethex+0x2d0>
 800d7e8:	2501      	movs	r5, #1
 800d7ea:	e7e2      	b.n	800d7b2 <__gethex+0x2f6>
 800d7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7ee:	f1c3 0301 	rsb	r3, r3, #1
 800d7f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d0f0      	beq.n	800d7dc <__gethex+0x320>
 800d7fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d7fe:	f104 0314 	add.w	r3, r4, #20
 800d802:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d806:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d80a:	f04f 0c00 	mov.w	ip, #0
 800d80e:	4618      	mov	r0, r3
 800d810:	f853 2b04 	ldr.w	r2, [r3], #4
 800d814:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d818:	d01b      	beq.n	800d852 <__gethex+0x396>
 800d81a:	3201      	adds	r2, #1
 800d81c:	6002      	str	r2, [r0, #0]
 800d81e:	2d02      	cmp	r5, #2
 800d820:	f104 0314 	add.w	r3, r4, #20
 800d824:	d13c      	bne.n	800d8a0 <__gethex+0x3e4>
 800d826:	f8d8 2000 	ldr.w	r2, [r8]
 800d82a:	3a01      	subs	r2, #1
 800d82c:	42b2      	cmp	r2, r6
 800d82e:	d109      	bne.n	800d844 <__gethex+0x388>
 800d830:	1171      	asrs	r1, r6, #5
 800d832:	2201      	movs	r2, #1
 800d834:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d838:	f006 061f 	and.w	r6, r6, #31
 800d83c:	fa02 f606 	lsl.w	r6, r2, r6
 800d840:	421e      	tst	r6, r3
 800d842:	d13a      	bne.n	800d8ba <__gethex+0x3fe>
 800d844:	f045 0520 	orr.w	r5, r5, #32
 800d848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d84a:	601c      	str	r4, [r3, #0]
 800d84c:	9b02      	ldr	r3, [sp, #8]
 800d84e:	601f      	str	r7, [r3, #0]
 800d850:	e6b0      	b.n	800d5b4 <__gethex+0xf8>
 800d852:	4299      	cmp	r1, r3
 800d854:	f843 cc04 	str.w	ip, [r3, #-4]
 800d858:	d8d9      	bhi.n	800d80e <__gethex+0x352>
 800d85a:	68a3      	ldr	r3, [r4, #8]
 800d85c:	459b      	cmp	fp, r3
 800d85e:	db17      	blt.n	800d890 <__gethex+0x3d4>
 800d860:	6861      	ldr	r1, [r4, #4]
 800d862:	9801      	ldr	r0, [sp, #4]
 800d864:	3101      	adds	r1, #1
 800d866:	f7fe f81d 	bl	800b8a4 <_Balloc>
 800d86a:	4681      	mov	r9, r0
 800d86c:	b918      	cbnz	r0, 800d876 <__gethex+0x3ba>
 800d86e:	4b1a      	ldr	r3, [pc, #104]	@ (800d8d8 <__gethex+0x41c>)
 800d870:	4602      	mov	r2, r0
 800d872:	2184      	movs	r1, #132	@ 0x84
 800d874:	e6c5      	b.n	800d602 <__gethex+0x146>
 800d876:	6922      	ldr	r2, [r4, #16]
 800d878:	3202      	adds	r2, #2
 800d87a:	f104 010c 	add.w	r1, r4, #12
 800d87e:	0092      	lsls	r2, r2, #2
 800d880:	300c      	adds	r0, #12
 800d882:	f7fd f964 	bl	800ab4e <memcpy>
 800d886:	4621      	mov	r1, r4
 800d888:	9801      	ldr	r0, [sp, #4]
 800d88a:	f7fe f84b 	bl	800b924 <_Bfree>
 800d88e:	464c      	mov	r4, r9
 800d890:	6923      	ldr	r3, [r4, #16]
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d898:	6122      	str	r2, [r4, #16]
 800d89a:	2201      	movs	r2, #1
 800d89c:	615a      	str	r2, [r3, #20]
 800d89e:	e7be      	b.n	800d81e <__gethex+0x362>
 800d8a0:	6922      	ldr	r2, [r4, #16]
 800d8a2:	455a      	cmp	r2, fp
 800d8a4:	dd0b      	ble.n	800d8be <__gethex+0x402>
 800d8a6:	2101      	movs	r1, #1
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f7ff fd9f 	bl	800d3ec <rshift>
 800d8ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8b2:	3701      	adds	r7, #1
 800d8b4:	42bb      	cmp	r3, r7
 800d8b6:	f6ff aee0 	blt.w	800d67a <__gethex+0x1be>
 800d8ba:	2501      	movs	r5, #1
 800d8bc:	e7c2      	b.n	800d844 <__gethex+0x388>
 800d8be:	f016 061f 	ands.w	r6, r6, #31
 800d8c2:	d0fa      	beq.n	800d8ba <__gethex+0x3fe>
 800d8c4:	4453      	add	r3, sl
 800d8c6:	f1c6 0620 	rsb	r6, r6, #32
 800d8ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d8ce:	f7fe f8db 	bl	800ba88 <__hi0bits>
 800d8d2:	42b0      	cmp	r0, r6
 800d8d4:	dbe7      	blt.n	800d8a6 <__gethex+0x3ea>
 800d8d6:	e7f0      	b.n	800d8ba <__gethex+0x3fe>
 800d8d8:	0800e1bd 	.word	0x0800e1bd

0800d8dc <L_shift>:
 800d8dc:	f1c2 0208 	rsb	r2, r2, #8
 800d8e0:	0092      	lsls	r2, r2, #2
 800d8e2:	b570      	push	{r4, r5, r6, lr}
 800d8e4:	f1c2 0620 	rsb	r6, r2, #32
 800d8e8:	6843      	ldr	r3, [r0, #4]
 800d8ea:	6804      	ldr	r4, [r0, #0]
 800d8ec:	fa03 f506 	lsl.w	r5, r3, r6
 800d8f0:	432c      	orrs	r4, r5
 800d8f2:	40d3      	lsrs	r3, r2
 800d8f4:	6004      	str	r4, [r0, #0]
 800d8f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d8fa:	4288      	cmp	r0, r1
 800d8fc:	d3f4      	bcc.n	800d8e8 <L_shift+0xc>
 800d8fe:	bd70      	pop	{r4, r5, r6, pc}

0800d900 <__match>:
 800d900:	b530      	push	{r4, r5, lr}
 800d902:	6803      	ldr	r3, [r0, #0]
 800d904:	3301      	adds	r3, #1
 800d906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d90a:	b914      	cbnz	r4, 800d912 <__match+0x12>
 800d90c:	6003      	str	r3, [r0, #0]
 800d90e:	2001      	movs	r0, #1
 800d910:	bd30      	pop	{r4, r5, pc}
 800d912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d916:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d91a:	2d19      	cmp	r5, #25
 800d91c:	bf98      	it	ls
 800d91e:	3220      	addls	r2, #32
 800d920:	42a2      	cmp	r2, r4
 800d922:	d0f0      	beq.n	800d906 <__match+0x6>
 800d924:	2000      	movs	r0, #0
 800d926:	e7f3      	b.n	800d910 <__match+0x10>

0800d928 <__hexnan>:
 800d928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	680b      	ldr	r3, [r1, #0]
 800d92e:	6801      	ldr	r1, [r0, #0]
 800d930:	115e      	asrs	r6, r3, #5
 800d932:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d936:	f013 031f 	ands.w	r3, r3, #31
 800d93a:	b087      	sub	sp, #28
 800d93c:	bf18      	it	ne
 800d93e:	3604      	addne	r6, #4
 800d940:	2500      	movs	r5, #0
 800d942:	1f37      	subs	r7, r6, #4
 800d944:	4682      	mov	sl, r0
 800d946:	4690      	mov	r8, r2
 800d948:	9301      	str	r3, [sp, #4]
 800d94a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d94e:	46b9      	mov	r9, r7
 800d950:	463c      	mov	r4, r7
 800d952:	9502      	str	r5, [sp, #8]
 800d954:	46ab      	mov	fp, r5
 800d956:	784a      	ldrb	r2, [r1, #1]
 800d958:	1c4b      	adds	r3, r1, #1
 800d95a:	9303      	str	r3, [sp, #12]
 800d95c:	b342      	cbz	r2, 800d9b0 <__hexnan+0x88>
 800d95e:	4610      	mov	r0, r2
 800d960:	9105      	str	r1, [sp, #20]
 800d962:	9204      	str	r2, [sp, #16]
 800d964:	f7ff fd94 	bl	800d490 <__hexdig_fun>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d151      	bne.n	800da10 <__hexnan+0xe8>
 800d96c:	9a04      	ldr	r2, [sp, #16]
 800d96e:	9905      	ldr	r1, [sp, #20]
 800d970:	2a20      	cmp	r2, #32
 800d972:	d818      	bhi.n	800d9a6 <__hexnan+0x7e>
 800d974:	9b02      	ldr	r3, [sp, #8]
 800d976:	459b      	cmp	fp, r3
 800d978:	dd13      	ble.n	800d9a2 <__hexnan+0x7a>
 800d97a:	454c      	cmp	r4, r9
 800d97c:	d206      	bcs.n	800d98c <__hexnan+0x64>
 800d97e:	2d07      	cmp	r5, #7
 800d980:	dc04      	bgt.n	800d98c <__hexnan+0x64>
 800d982:	462a      	mov	r2, r5
 800d984:	4649      	mov	r1, r9
 800d986:	4620      	mov	r0, r4
 800d988:	f7ff ffa8 	bl	800d8dc <L_shift>
 800d98c:	4544      	cmp	r4, r8
 800d98e:	d952      	bls.n	800da36 <__hexnan+0x10e>
 800d990:	2300      	movs	r3, #0
 800d992:	f1a4 0904 	sub.w	r9, r4, #4
 800d996:	f844 3c04 	str.w	r3, [r4, #-4]
 800d99a:	f8cd b008 	str.w	fp, [sp, #8]
 800d99e:	464c      	mov	r4, r9
 800d9a0:	461d      	mov	r5, r3
 800d9a2:	9903      	ldr	r1, [sp, #12]
 800d9a4:	e7d7      	b.n	800d956 <__hexnan+0x2e>
 800d9a6:	2a29      	cmp	r2, #41	@ 0x29
 800d9a8:	d157      	bne.n	800da5a <__hexnan+0x132>
 800d9aa:	3102      	adds	r1, #2
 800d9ac:	f8ca 1000 	str.w	r1, [sl]
 800d9b0:	f1bb 0f00 	cmp.w	fp, #0
 800d9b4:	d051      	beq.n	800da5a <__hexnan+0x132>
 800d9b6:	454c      	cmp	r4, r9
 800d9b8:	d206      	bcs.n	800d9c8 <__hexnan+0xa0>
 800d9ba:	2d07      	cmp	r5, #7
 800d9bc:	dc04      	bgt.n	800d9c8 <__hexnan+0xa0>
 800d9be:	462a      	mov	r2, r5
 800d9c0:	4649      	mov	r1, r9
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	f7ff ff8a 	bl	800d8dc <L_shift>
 800d9c8:	4544      	cmp	r4, r8
 800d9ca:	d936      	bls.n	800da3a <__hexnan+0x112>
 800d9cc:	f1a8 0204 	sub.w	r2, r8, #4
 800d9d0:	4623      	mov	r3, r4
 800d9d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d9d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d9da:	429f      	cmp	r7, r3
 800d9dc:	d2f9      	bcs.n	800d9d2 <__hexnan+0xaa>
 800d9de:	1b3b      	subs	r3, r7, r4
 800d9e0:	f023 0303 	bic.w	r3, r3, #3
 800d9e4:	3304      	adds	r3, #4
 800d9e6:	3401      	adds	r4, #1
 800d9e8:	3e03      	subs	r6, #3
 800d9ea:	42b4      	cmp	r4, r6
 800d9ec:	bf88      	it	hi
 800d9ee:	2304      	movhi	r3, #4
 800d9f0:	4443      	add	r3, r8
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f843 2b04 	str.w	r2, [r3], #4
 800d9f8:	429f      	cmp	r7, r3
 800d9fa:	d2fb      	bcs.n	800d9f4 <__hexnan+0xcc>
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	b91b      	cbnz	r3, 800da08 <__hexnan+0xe0>
 800da00:	4547      	cmp	r7, r8
 800da02:	d128      	bne.n	800da56 <__hexnan+0x12e>
 800da04:	2301      	movs	r3, #1
 800da06:	603b      	str	r3, [r7, #0]
 800da08:	2005      	movs	r0, #5
 800da0a:	b007      	add	sp, #28
 800da0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da10:	3501      	adds	r5, #1
 800da12:	2d08      	cmp	r5, #8
 800da14:	f10b 0b01 	add.w	fp, fp, #1
 800da18:	dd06      	ble.n	800da28 <__hexnan+0x100>
 800da1a:	4544      	cmp	r4, r8
 800da1c:	d9c1      	bls.n	800d9a2 <__hexnan+0x7a>
 800da1e:	2300      	movs	r3, #0
 800da20:	f844 3c04 	str.w	r3, [r4, #-4]
 800da24:	2501      	movs	r5, #1
 800da26:	3c04      	subs	r4, #4
 800da28:	6822      	ldr	r2, [r4, #0]
 800da2a:	f000 000f 	and.w	r0, r0, #15
 800da2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800da32:	6020      	str	r0, [r4, #0]
 800da34:	e7b5      	b.n	800d9a2 <__hexnan+0x7a>
 800da36:	2508      	movs	r5, #8
 800da38:	e7b3      	b.n	800d9a2 <__hexnan+0x7a>
 800da3a:	9b01      	ldr	r3, [sp, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d0dd      	beq.n	800d9fc <__hexnan+0xd4>
 800da40:	f1c3 0320 	rsb	r3, r3, #32
 800da44:	f04f 32ff 	mov.w	r2, #4294967295
 800da48:	40da      	lsrs	r2, r3
 800da4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800da4e:	4013      	ands	r3, r2
 800da50:	f846 3c04 	str.w	r3, [r6, #-4]
 800da54:	e7d2      	b.n	800d9fc <__hexnan+0xd4>
 800da56:	3f04      	subs	r7, #4
 800da58:	e7d0      	b.n	800d9fc <__hexnan+0xd4>
 800da5a:	2004      	movs	r0, #4
 800da5c:	e7d5      	b.n	800da0a <__hexnan+0xe2>

0800da5e <__ascii_mbtowc>:
 800da5e:	b082      	sub	sp, #8
 800da60:	b901      	cbnz	r1, 800da64 <__ascii_mbtowc+0x6>
 800da62:	a901      	add	r1, sp, #4
 800da64:	b142      	cbz	r2, 800da78 <__ascii_mbtowc+0x1a>
 800da66:	b14b      	cbz	r3, 800da7c <__ascii_mbtowc+0x1e>
 800da68:	7813      	ldrb	r3, [r2, #0]
 800da6a:	600b      	str	r3, [r1, #0]
 800da6c:	7812      	ldrb	r2, [r2, #0]
 800da6e:	1e10      	subs	r0, r2, #0
 800da70:	bf18      	it	ne
 800da72:	2001      	movne	r0, #1
 800da74:	b002      	add	sp, #8
 800da76:	4770      	bx	lr
 800da78:	4610      	mov	r0, r2
 800da7a:	e7fb      	b.n	800da74 <__ascii_mbtowc+0x16>
 800da7c:	f06f 0001 	mvn.w	r0, #1
 800da80:	e7f8      	b.n	800da74 <__ascii_mbtowc+0x16>

0800da82 <_realloc_r>:
 800da82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da86:	4680      	mov	r8, r0
 800da88:	4615      	mov	r5, r2
 800da8a:	460c      	mov	r4, r1
 800da8c:	b921      	cbnz	r1, 800da98 <_realloc_r+0x16>
 800da8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da92:	4611      	mov	r1, r2
 800da94:	f7fb bfae 	b.w	80099f4 <_malloc_r>
 800da98:	b92a      	cbnz	r2, 800daa6 <_realloc_r+0x24>
 800da9a:	f7fd feb9 	bl	800b810 <_free_r>
 800da9e:	2400      	movs	r4, #0
 800daa0:	4620      	mov	r0, r4
 800daa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa6:	f000 f840 	bl	800db2a <_malloc_usable_size_r>
 800daaa:	4285      	cmp	r5, r0
 800daac:	4606      	mov	r6, r0
 800daae:	d802      	bhi.n	800dab6 <_realloc_r+0x34>
 800dab0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dab4:	d8f4      	bhi.n	800daa0 <_realloc_r+0x1e>
 800dab6:	4629      	mov	r1, r5
 800dab8:	4640      	mov	r0, r8
 800daba:	f7fb ff9b 	bl	80099f4 <_malloc_r>
 800dabe:	4607      	mov	r7, r0
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d0ec      	beq.n	800da9e <_realloc_r+0x1c>
 800dac4:	42b5      	cmp	r5, r6
 800dac6:	462a      	mov	r2, r5
 800dac8:	4621      	mov	r1, r4
 800daca:	bf28      	it	cs
 800dacc:	4632      	movcs	r2, r6
 800dace:	f7fd f83e 	bl	800ab4e <memcpy>
 800dad2:	4621      	mov	r1, r4
 800dad4:	4640      	mov	r0, r8
 800dad6:	f7fd fe9b 	bl	800b810 <_free_r>
 800dada:	463c      	mov	r4, r7
 800dadc:	e7e0      	b.n	800daa0 <_realloc_r+0x1e>

0800dade <__ascii_wctomb>:
 800dade:	4603      	mov	r3, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	b141      	cbz	r1, 800daf6 <__ascii_wctomb+0x18>
 800dae4:	2aff      	cmp	r2, #255	@ 0xff
 800dae6:	d904      	bls.n	800daf2 <__ascii_wctomb+0x14>
 800dae8:	228a      	movs	r2, #138	@ 0x8a
 800daea:	601a      	str	r2, [r3, #0]
 800daec:	f04f 30ff 	mov.w	r0, #4294967295
 800daf0:	4770      	bx	lr
 800daf2:	700a      	strb	r2, [r1, #0]
 800daf4:	2001      	movs	r0, #1
 800daf6:	4770      	bx	lr

0800daf8 <fiprintf>:
 800daf8:	b40e      	push	{r1, r2, r3}
 800dafa:	b503      	push	{r0, r1, lr}
 800dafc:	4601      	mov	r1, r0
 800dafe:	ab03      	add	r3, sp, #12
 800db00:	4805      	ldr	r0, [pc, #20]	@ (800db18 <fiprintf+0x20>)
 800db02:	f853 2b04 	ldr.w	r2, [r3], #4
 800db06:	6800      	ldr	r0, [r0, #0]
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	f000 f83f 	bl	800db8c <_vfiprintf_r>
 800db0e:	b002      	add	sp, #8
 800db10:	f85d eb04 	ldr.w	lr, [sp], #4
 800db14:	b003      	add	sp, #12
 800db16:	4770      	bx	lr
 800db18:	20000118 	.word	0x20000118

0800db1c <abort>:
 800db1c:	b508      	push	{r3, lr}
 800db1e:	2006      	movs	r0, #6
 800db20:	f000 fa08 	bl	800df34 <raise>
 800db24:	2001      	movs	r0, #1
 800db26:	f7f3 fbe3 	bl	80012f0 <_exit>

0800db2a <_malloc_usable_size_r>:
 800db2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db2e:	1f18      	subs	r0, r3, #4
 800db30:	2b00      	cmp	r3, #0
 800db32:	bfbc      	itt	lt
 800db34:	580b      	ldrlt	r3, [r1, r0]
 800db36:	18c0      	addlt	r0, r0, r3
 800db38:	4770      	bx	lr

0800db3a <__sfputc_r>:
 800db3a:	6893      	ldr	r3, [r2, #8]
 800db3c:	3b01      	subs	r3, #1
 800db3e:	2b00      	cmp	r3, #0
 800db40:	b410      	push	{r4}
 800db42:	6093      	str	r3, [r2, #8]
 800db44:	da08      	bge.n	800db58 <__sfputc_r+0x1e>
 800db46:	6994      	ldr	r4, [r2, #24]
 800db48:	42a3      	cmp	r3, r4
 800db4a:	db01      	blt.n	800db50 <__sfputc_r+0x16>
 800db4c:	290a      	cmp	r1, #10
 800db4e:	d103      	bne.n	800db58 <__sfputc_r+0x1e>
 800db50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db54:	f000 b932 	b.w	800ddbc <__swbuf_r>
 800db58:	6813      	ldr	r3, [r2, #0]
 800db5a:	1c58      	adds	r0, r3, #1
 800db5c:	6010      	str	r0, [r2, #0]
 800db5e:	7019      	strb	r1, [r3, #0]
 800db60:	4608      	mov	r0, r1
 800db62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <__sfputs_r>:
 800db68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db6a:	4606      	mov	r6, r0
 800db6c:	460f      	mov	r7, r1
 800db6e:	4614      	mov	r4, r2
 800db70:	18d5      	adds	r5, r2, r3
 800db72:	42ac      	cmp	r4, r5
 800db74:	d101      	bne.n	800db7a <__sfputs_r+0x12>
 800db76:	2000      	movs	r0, #0
 800db78:	e007      	b.n	800db8a <__sfputs_r+0x22>
 800db7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db7e:	463a      	mov	r2, r7
 800db80:	4630      	mov	r0, r6
 800db82:	f7ff ffda 	bl	800db3a <__sfputc_r>
 800db86:	1c43      	adds	r3, r0, #1
 800db88:	d1f3      	bne.n	800db72 <__sfputs_r+0xa>
 800db8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db8c <_vfiprintf_r>:
 800db8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db90:	460d      	mov	r5, r1
 800db92:	b09d      	sub	sp, #116	@ 0x74
 800db94:	4614      	mov	r4, r2
 800db96:	4698      	mov	r8, r3
 800db98:	4606      	mov	r6, r0
 800db9a:	b118      	cbz	r0, 800dba4 <_vfiprintf_r+0x18>
 800db9c:	6a03      	ldr	r3, [r0, #32]
 800db9e:	b90b      	cbnz	r3, 800dba4 <_vfiprintf_r+0x18>
 800dba0:	f7fc feac 	bl	800a8fc <__sinit>
 800dba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dba6:	07d9      	lsls	r1, r3, #31
 800dba8:	d405      	bmi.n	800dbb6 <_vfiprintf_r+0x2a>
 800dbaa:	89ab      	ldrh	r3, [r5, #12]
 800dbac:	059a      	lsls	r2, r3, #22
 800dbae:	d402      	bmi.n	800dbb6 <_vfiprintf_r+0x2a>
 800dbb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbb2:	f7fc ffca 	bl	800ab4a <__retarget_lock_acquire_recursive>
 800dbb6:	89ab      	ldrh	r3, [r5, #12]
 800dbb8:	071b      	lsls	r3, r3, #28
 800dbba:	d501      	bpl.n	800dbc0 <_vfiprintf_r+0x34>
 800dbbc:	692b      	ldr	r3, [r5, #16]
 800dbbe:	b99b      	cbnz	r3, 800dbe8 <_vfiprintf_r+0x5c>
 800dbc0:	4629      	mov	r1, r5
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	f000 f938 	bl	800de38 <__swsetup_r>
 800dbc8:	b170      	cbz	r0, 800dbe8 <_vfiprintf_r+0x5c>
 800dbca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbcc:	07dc      	lsls	r4, r3, #31
 800dbce:	d504      	bpl.n	800dbda <_vfiprintf_r+0x4e>
 800dbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd4:	b01d      	add	sp, #116	@ 0x74
 800dbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbda:	89ab      	ldrh	r3, [r5, #12]
 800dbdc:	0598      	lsls	r0, r3, #22
 800dbde:	d4f7      	bmi.n	800dbd0 <_vfiprintf_r+0x44>
 800dbe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbe2:	f7fc ffb3 	bl	800ab4c <__retarget_lock_release_recursive>
 800dbe6:	e7f3      	b.n	800dbd0 <_vfiprintf_r+0x44>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbec:	2320      	movs	r3, #32
 800dbee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbf6:	2330      	movs	r3, #48	@ 0x30
 800dbf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dda8 <_vfiprintf_r+0x21c>
 800dbfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc00:	f04f 0901 	mov.w	r9, #1
 800dc04:	4623      	mov	r3, r4
 800dc06:	469a      	mov	sl, r3
 800dc08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc0c:	b10a      	cbz	r2, 800dc12 <_vfiprintf_r+0x86>
 800dc0e:	2a25      	cmp	r2, #37	@ 0x25
 800dc10:	d1f9      	bne.n	800dc06 <_vfiprintf_r+0x7a>
 800dc12:	ebba 0b04 	subs.w	fp, sl, r4
 800dc16:	d00b      	beq.n	800dc30 <_vfiprintf_r+0xa4>
 800dc18:	465b      	mov	r3, fp
 800dc1a:	4622      	mov	r2, r4
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f7ff ffa2 	bl	800db68 <__sfputs_r>
 800dc24:	3001      	adds	r0, #1
 800dc26:	f000 80a7 	beq.w	800dd78 <_vfiprintf_r+0x1ec>
 800dc2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc2c:	445a      	add	r2, fp
 800dc2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc30:	f89a 3000 	ldrb.w	r3, [sl]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f000 809f 	beq.w	800dd78 <_vfiprintf_r+0x1ec>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc44:	f10a 0a01 	add.w	sl, sl, #1
 800dc48:	9304      	str	r3, [sp, #16]
 800dc4a:	9307      	str	r3, [sp, #28]
 800dc4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc50:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc52:	4654      	mov	r4, sl
 800dc54:	2205      	movs	r2, #5
 800dc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc5a:	4853      	ldr	r0, [pc, #332]	@ (800dda8 <_vfiprintf_r+0x21c>)
 800dc5c:	f7f2 fad8 	bl	8000210 <memchr>
 800dc60:	9a04      	ldr	r2, [sp, #16]
 800dc62:	b9d8      	cbnz	r0, 800dc9c <_vfiprintf_r+0x110>
 800dc64:	06d1      	lsls	r1, r2, #27
 800dc66:	bf44      	itt	mi
 800dc68:	2320      	movmi	r3, #32
 800dc6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc6e:	0713      	lsls	r3, r2, #28
 800dc70:	bf44      	itt	mi
 800dc72:	232b      	movmi	r3, #43	@ 0x2b
 800dc74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc78:	f89a 3000 	ldrb.w	r3, [sl]
 800dc7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc7e:	d015      	beq.n	800dcac <_vfiprintf_r+0x120>
 800dc80:	9a07      	ldr	r2, [sp, #28]
 800dc82:	4654      	mov	r4, sl
 800dc84:	2000      	movs	r0, #0
 800dc86:	f04f 0c0a 	mov.w	ip, #10
 800dc8a:	4621      	mov	r1, r4
 800dc8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc90:	3b30      	subs	r3, #48	@ 0x30
 800dc92:	2b09      	cmp	r3, #9
 800dc94:	d94b      	bls.n	800dd2e <_vfiprintf_r+0x1a2>
 800dc96:	b1b0      	cbz	r0, 800dcc6 <_vfiprintf_r+0x13a>
 800dc98:	9207      	str	r2, [sp, #28]
 800dc9a:	e014      	b.n	800dcc6 <_vfiprintf_r+0x13a>
 800dc9c:	eba0 0308 	sub.w	r3, r0, r8
 800dca0:	fa09 f303 	lsl.w	r3, r9, r3
 800dca4:	4313      	orrs	r3, r2
 800dca6:	9304      	str	r3, [sp, #16]
 800dca8:	46a2      	mov	sl, r4
 800dcaa:	e7d2      	b.n	800dc52 <_vfiprintf_r+0xc6>
 800dcac:	9b03      	ldr	r3, [sp, #12]
 800dcae:	1d19      	adds	r1, r3, #4
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	9103      	str	r1, [sp, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	bfbb      	ittet	lt
 800dcb8:	425b      	neglt	r3, r3
 800dcba:	f042 0202 	orrlt.w	r2, r2, #2
 800dcbe:	9307      	strge	r3, [sp, #28]
 800dcc0:	9307      	strlt	r3, [sp, #28]
 800dcc2:	bfb8      	it	lt
 800dcc4:	9204      	strlt	r2, [sp, #16]
 800dcc6:	7823      	ldrb	r3, [r4, #0]
 800dcc8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcca:	d10a      	bne.n	800dce2 <_vfiprintf_r+0x156>
 800dccc:	7863      	ldrb	r3, [r4, #1]
 800dcce:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcd0:	d132      	bne.n	800dd38 <_vfiprintf_r+0x1ac>
 800dcd2:	9b03      	ldr	r3, [sp, #12]
 800dcd4:	1d1a      	adds	r2, r3, #4
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	9203      	str	r2, [sp, #12]
 800dcda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcde:	3402      	adds	r4, #2
 800dce0:	9305      	str	r3, [sp, #20]
 800dce2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ddb8 <_vfiprintf_r+0x22c>
 800dce6:	7821      	ldrb	r1, [r4, #0]
 800dce8:	2203      	movs	r2, #3
 800dcea:	4650      	mov	r0, sl
 800dcec:	f7f2 fa90 	bl	8000210 <memchr>
 800dcf0:	b138      	cbz	r0, 800dd02 <_vfiprintf_r+0x176>
 800dcf2:	9b04      	ldr	r3, [sp, #16]
 800dcf4:	eba0 000a 	sub.w	r0, r0, sl
 800dcf8:	2240      	movs	r2, #64	@ 0x40
 800dcfa:	4082      	lsls	r2, r0
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	3401      	adds	r4, #1
 800dd00:	9304      	str	r3, [sp, #16]
 800dd02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd06:	4829      	ldr	r0, [pc, #164]	@ (800ddac <_vfiprintf_r+0x220>)
 800dd08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd0c:	2206      	movs	r2, #6
 800dd0e:	f7f2 fa7f 	bl	8000210 <memchr>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d03f      	beq.n	800dd96 <_vfiprintf_r+0x20a>
 800dd16:	4b26      	ldr	r3, [pc, #152]	@ (800ddb0 <_vfiprintf_r+0x224>)
 800dd18:	bb1b      	cbnz	r3, 800dd62 <_vfiprintf_r+0x1d6>
 800dd1a:	9b03      	ldr	r3, [sp, #12]
 800dd1c:	3307      	adds	r3, #7
 800dd1e:	f023 0307 	bic.w	r3, r3, #7
 800dd22:	3308      	adds	r3, #8
 800dd24:	9303      	str	r3, [sp, #12]
 800dd26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd28:	443b      	add	r3, r7
 800dd2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd2c:	e76a      	b.n	800dc04 <_vfiprintf_r+0x78>
 800dd2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd32:	460c      	mov	r4, r1
 800dd34:	2001      	movs	r0, #1
 800dd36:	e7a8      	b.n	800dc8a <_vfiprintf_r+0xfe>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	3401      	adds	r4, #1
 800dd3c:	9305      	str	r3, [sp, #20]
 800dd3e:	4619      	mov	r1, r3
 800dd40:	f04f 0c0a 	mov.w	ip, #10
 800dd44:	4620      	mov	r0, r4
 800dd46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd4a:	3a30      	subs	r2, #48	@ 0x30
 800dd4c:	2a09      	cmp	r2, #9
 800dd4e:	d903      	bls.n	800dd58 <_vfiprintf_r+0x1cc>
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d0c6      	beq.n	800dce2 <_vfiprintf_r+0x156>
 800dd54:	9105      	str	r1, [sp, #20]
 800dd56:	e7c4      	b.n	800dce2 <_vfiprintf_r+0x156>
 800dd58:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e7f0      	b.n	800dd44 <_vfiprintf_r+0x1b8>
 800dd62:	ab03      	add	r3, sp, #12
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	462a      	mov	r2, r5
 800dd68:	4b12      	ldr	r3, [pc, #72]	@ (800ddb4 <_vfiprintf_r+0x228>)
 800dd6a:	a904      	add	r1, sp, #16
 800dd6c:	4630      	mov	r0, r6
 800dd6e:	f7fb ff6d 	bl	8009c4c <_printf_float>
 800dd72:	4607      	mov	r7, r0
 800dd74:	1c78      	adds	r0, r7, #1
 800dd76:	d1d6      	bne.n	800dd26 <_vfiprintf_r+0x19a>
 800dd78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd7a:	07d9      	lsls	r1, r3, #31
 800dd7c:	d405      	bmi.n	800dd8a <_vfiprintf_r+0x1fe>
 800dd7e:	89ab      	ldrh	r3, [r5, #12]
 800dd80:	059a      	lsls	r2, r3, #22
 800dd82:	d402      	bmi.n	800dd8a <_vfiprintf_r+0x1fe>
 800dd84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd86:	f7fc fee1 	bl	800ab4c <__retarget_lock_release_recursive>
 800dd8a:	89ab      	ldrh	r3, [r5, #12]
 800dd8c:	065b      	lsls	r3, r3, #25
 800dd8e:	f53f af1f 	bmi.w	800dbd0 <_vfiprintf_r+0x44>
 800dd92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd94:	e71e      	b.n	800dbd4 <_vfiprintf_r+0x48>
 800dd96:	ab03      	add	r3, sp, #12
 800dd98:	9300      	str	r3, [sp, #0]
 800dd9a:	462a      	mov	r2, r5
 800dd9c:	4b05      	ldr	r3, [pc, #20]	@ (800ddb4 <_vfiprintf_r+0x228>)
 800dd9e:	a904      	add	r1, sp, #16
 800dda0:	4630      	mov	r0, r6
 800dda2:	f7fc f9eb 	bl	800a17c <_printf_i>
 800dda6:	e7e4      	b.n	800dd72 <_vfiprintf_r+0x1e6>
 800dda8:	0800e481 	.word	0x0800e481
 800ddac:	0800e48b 	.word	0x0800e48b
 800ddb0:	08009c4d 	.word	0x08009c4d
 800ddb4:	0800db69 	.word	0x0800db69
 800ddb8:	0800e487 	.word	0x0800e487

0800ddbc <__swbuf_r>:
 800ddbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddbe:	460e      	mov	r6, r1
 800ddc0:	4614      	mov	r4, r2
 800ddc2:	4605      	mov	r5, r0
 800ddc4:	b118      	cbz	r0, 800ddce <__swbuf_r+0x12>
 800ddc6:	6a03      	ldr	r3, [r0, #32]
 800ddc8:	b90b      	cbnz	r3, 800ddce <__swbuf_r+0x12>
 800ddca:	f7fc fd97 	bl	800a8fc <__sinit>
 800ddce:	69a3      	ldr	r3, [r4, #24]
 800ddd0:	60a3      	str	r3, [r4, #8]
 800ddd2:	89a3      	ldrh	r3, [r4, #12]
 800ddd4:	071a      	lsls	r2, r3, #28
 800ddd6:	d501      	bpl.n	800dddc <__swbuf_r+0x20>
 800ddd8:	6923      	ldr	r3, [r4, #16]
 800ddda:	b943      	cbnz	r3, 800ddee <__swbuf_r+0x32>
 800dddc:	4621      	mov	r1, r4
 800ddde:	4628      	mov	r0, r5
 800dde0:	f000 f82a 	bl	800de38 <__swsetup_r>
 800dde4:	b118      	cbz	r0, 800ddee <__swbuf_r+0x32>
 800dde6:	f04f 37ff 	mov.w	r7, #4294967295
 800ddea:	4638      	mov	r0, r7
 800ddec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	6922      	ldr	r2, [r4, #16]
 800ddf2:	1a98      	subs	r0, r3, r2
 800ddf4:	6963      	ldr	r3, [r4, #20]
 800ddf6:	b2f6      	uxtb	r6, r6
 800ddf8:	4283      	cmp	r3, r0
 800ddfa:	4637      	mov	r7, r6
 800ddfc:	dc05      	bgt.n	800de0a <__swbuf_r+0x4e>
 800ddfe:	4621      	mov	r1, r4
 800de00:	4628      	mov	r0, r5
 800de02:	f7ff fa63 	bl	800d2cc <_fflush_r>
 800de06:	2800      	cmp	r0, #0
 800de08:	d1ed      	bne.n	800dde6 <__swbuf_r+0x2a>
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	3b01      	subs	r3, #1
 800de0e:	60a3      	str	r3, [r4, #8]
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	6022      	str	r2, [r4, #0]
 800de16:	701e      	strb	r6, [r3, #0]
 800de18:	6962      	ldr	r2, [r4, #20]
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d004      	beq.n	800de2a <__swbuf_r+0x6e>
 800de20:	89a3      	ldrh	r3, [r4, #12]
 800de22:	07db      	lsls	r3, r3, #31
 800de24:	d5e1      	bpl.n	800ddea <__swbuf_r+0x2e>
 800de26:	2e0a      	cmp	r6, #10
 800de28:	d1df      	bne.n	800ddea <__swbuf_r+0x2e>
 800de2a:	4621      	mov	r1, r4
 800de2c:	4628      	mov	r0, r5
 800de2e:	f7ff fa4d 	bl	800d2cc <_fflush_r>
 800de32:	2800      	cmp	r0, #0
 800de34:	d0d9      	beq.n	800ddea <__swbuf_r+0x2e>
 800de36:	e7d6      	b.n	800dde6 <__swbuf_r+0x2a>

0800de38 <__swsetup_r>:
 800de38:	b538      	push	{r3, r4, r5, lr}
 800de3a:	4b29      	ldr	r3, [pc, #164]	@ (800dee0 <__swsetup_r+0xa8>)
 800de3c:	4605      	mov	r5, r0
 800de3e:	6818      	ldr	r0, [r3, #0]
 800de40:	460c      	mov	r4, r1
 800de42:	b118      	cbz	r0, 800de4c <__swsetup_r+0x14>
 800de44:	6a03      	ldr	r3, [r0, #32]
 800de46:	b90b      	cbnz	r3, 800de4c <__swsetup_r+0x14>
 800de48:	f7fc fd58 	bl	800a8fc <__sinit>
 800de4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de50:	0719      	lsls	r1, r3, #28
 800de52:	d422      	bmi.n	800de9a <__swsetup_r+0x62>
 800de54:	06da      	lsls	r2, r3, #27
 800de56:	d407      	bmi.n	800de68 <__swsetup_r+0x30>
 800de58:	2209      	movs	r2, #9
 800de5a:	602a      	str	r2, [r5, #0]
 800de5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de60:	81a3      	strh	r3, [r4, #12]
 800de62:	f04f 30ff 	mov.w	r0, #4294967295
 800de66:	e033      	b.n	800ded0 <__swsetup_r+0x98>
 800de68:	0758      	lsls	r0, r3, #29
 800de6a:	d512      	bpl.n	800de92 <__swsetup_r+0x5a>
 800de6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de6e:	b141      	cbz	r1, 800de82 <__swsetup_r+0x4a>
 800de70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de74:	4299      	cmp	r1, r3
 800de76:	d002      	beq.n	800de7e <__swsetup_r+0x46>
 800de78:	4628      	mov	r0, r5
 800de7a:	f7fd fcc9 	bl	800b810 <_free_r>
 800de7e:	2300      	movs	r3, #0
 800de80:	6363      	str	r3, [r4, #52]	@ 0x34
 800de82:	89a3      	ldrh	r3, [r4, #12]
 800de84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800de88:	81a3      	strh	r3, [r4, #12]
 800de8a:	2300      	movs	r3, #0
 800de8c:	6063      	str	r3, [r4, #4]
 800de8e:	6923      	ldr	r3, [r4, #16]
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	89a3      	ldrh	r3, [r4, #12]
 800de94:	f043 0308 	orr.w	r3, r3, #8
 800de98:	81a3      	strh	r3, [r4, #12]
 800de9a:	6923      	ldr	r3, [r4, #16]
 800de9c:	b94b      	cbnz	r3, 800deb2 <__swsetup_r+0x7a>
 800de9e:	89a3      	ldrh	r3, [r4, #12]
 800dea0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dea8:	d003      	beq.n	800deb2 <__swsetup_r+0x7a>
 800deaa:	4621      	mov	r1, r4
 800deac:	4628      	mov	r0, r5
 800deae:	f000 f883 	bl	800dfb8 <__smakebuf_r>
 800deb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deb6:	f013 0201 	ands.w	r2, r3, #1
 800deba:	d00a      	beq.n	800ded2 <__swsetup_r+0x9a>
 800debc:	2200      	movs	r2, #0
 800debe:	60a2      	str	r2, [r4, #8]
 800dec0:	6962      	ldr	r2, [r4, #20]
 800dec2:	4252      	negs	r2, r2
 800dec4:	61a2      	str	r2, [r4, #24]
 800dec6:	6922      	ldr	r2, [r4, #16]
 800dec8:	b942      	cbnz	r2, 800dedc <__swsetup_r+0xa4>
 800deca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dece:	d1c5      	bne.n	800de5c <__swsetup_r+0x24>
 800ded0:	bd38      	pop	{r3, r4, r5, pc}
 800ded2:	0799      	lsls	r1, r3, #30
 800ded4:	bf58      	it	pl
 800ded6:	6962      	ldrpl	r2, [r4, #20]
 800ded8:	60a2      	str	r2, [r4, #8]
 800deda:	e7f4      	b.n	800dec6 <__swsetup_r+0x8e>
 800dedc:	2000      	movs	r0, #0
 800dede:	e7f7      	b.n	800ded0 <__swsetup_r+0x98>
 800dee0:	20000118 	.word	0x20000118

0800dee4 <_raise_r>:
 800dee4:	291f      	cmp	r1, #31
 800dee6:	b538      	push	{r3, r4, r5, lr}
 800dee8:	4605      	mov	r5, r0
 800deea:	460c      	mov	r4, r1
 800deec:	d904      	bls.n	800def8 <_raise_r+0x14>
 800deee:	2316      	movs	r3, #22
 800def0:	6003      	str	r3, [r0, #0]
 800def2:	f04f 30ff 	mov.w	r0, #4294967295
 800def6:	bd38      	pop	{r3, r4, r5, pc}
 800def8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800defa:	b112      	cbz	r2, 800df02 <_raise_r+0x1e>
 800defc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df00:	b94b      	cbnz	r3, 800df16 <_raise_r+0x32>
 800df02:	4628      	mov	r0, r5
 800df04:	f000 f830 	bl	800df68 <_getpid_r>
 800df08:	4622      	mov	r2, r4
 800df0a:	4601      	mov	r1, r0
 800df0c:	4628      	mov	r0, r5
 800df0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df12:	f000 b817 	b.w	800df44 <_kill_r>
 800df16:	2b01      	cmp	r3, #1
 800df18:	d00a      	beq.n	800df30 <_raise_r+0x4c>
 800df1a:	1c59      	adds	r1, r3, #1
 800df1c:	d103      	bne.n	800df26 <_raise_r+0x42>
 800df1e:	2316      	movs	r3, #22
 800df20:	6003      	str	r3, [r0, #0]
 800df22:	2001      	movs	r0, #1
 800df24:	e7e7      	b.n	800def6 <_raise_r+0x12>
 800df26:	2100      	movs	r1, #0
 800df28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df2c:	4620      	mov	r0, r4
 800df2e:	4798      	blx	r3
 800df30:	2000      	movs	r0, #0
 800df32:	e7e0      	b.n	800def6 <_raise_r+0x12>

0800df34 <raise>:
 800df34:	4b02      	ldr	r3, [pc, #8]	@ (800df40 <raise+0xc>)
 800df36:	4601      	mov	r1, r0
 800df38:	6818      	ldr	r0, [r3, #0]
 800df3a:	f7ff bfd3 	b.w	800dee4 <_raise_r>
 800df3e:	bf00      	nop
 800df40:	20000118 	.word	0x20000118

0800df44 <_kill_r>:
 800df44:	b538      	push	{r3, r4, r5, lr}
 800df46:	4d07      	ldr	r5, [pc, #28]	@ (800df64 <_kill_r+0x20>)
 800df48:	2300      	movs	r3, #0
 800df4a:	4604      	mov	r4, r0
 800df4c:	4608      	mov	r0, r1
 800df4e:	4611      	mov	r1, r2
 800df50:	602b      	str	r3, [r5, #0]
 800df52:	f7f3 f9bd 	bl	80012d0 <_kill>
 800df56:	1c43      	adds	r3, r0, #1
 800df58:	d102      	bne.n	800df60 <_kill_r+0x1c>
 800df5a:	682b      	ldr	r3, [r5, #0]
 800df5c:	b103      	cbz	r3, 800df60 <_kill_r+0x1c>
 800df5e:	6023      	str	r3, [r4, #0]
 800df60:	bd38      	pop	{r3, r4, r5, pc}
 800df62:	bf00      	nop
 800df64:	20019dfc 	.word	0x20019dfc

0800df68 <_getpid_r>:
 800df68:	f7f3 b9aa 	b.w	80012c0 <_getpid>

0800df6c <__swhatbuf_r>:
 800df6c:	b570      	push	{r4, r5, r6, lr}
 800df6e:	460c      	mov	r4, r1
 800df70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df74:	2900      	cmp	r1, #0
 800df76:	b096      	sub	sp, #88	@ 0x58
 800df78:	4615      	mov	r5, r2
 800df7a:	461e      	mov	r6, r3
 800df7c:	da0d      	bge.n	800df9a <__swhatbuf_r+0x2e>
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df84:	f04f 0100 	mov.w	r1, #0
 800df88:	bf14      	ite	ne
 800df8a:	2340      	movne	r3, #64	@ 0x40
 800df8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df90:	2000      	movs	r0, #0
 800df92:	6031      	str	r1, [r6, #0]
 800df94:	602b      	str	r3, [r5, #0]
 800df96:	b016      	add	sp, #88	@ 0x58
 800df98:	bd70      	pop	{r4, r5, r6, pc}
 800df9a:	466a      	mov	r2, sp
 800df9c:	f000 f848 	bl	800e030 <_fstat_r>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	dbec      	blt.n	800df7e <__swhatbuf_r+0x12>
 800dfa4:	9901      	ldr	r1, [sp, #4]
 800dfa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dfaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dfae:	4259      	negs	r1, r3
 800dfb0:	4159      	adcs	r1, r3
 800dfb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfb6:	e7eb      	b.n	800df90 <__swhatbuf_r+0x24>

0800dfb8 <__smakebuf_r>:
 800dfb8:	898b      	ldrh	r3, [r1, #12]
 800dfba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfbc:	079d      	lsls	r5, r3, #30
 800dfbe:	4606      	mov	r6, r0
 800dfc0:	460c      	mov	r4, r1
 800dfc2:	d507      	bpl.n	800dfd4 <__smakebuf_r+0x1c>
 800dfc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dfc8:	6023      	str	r3, [r4, #0]
 800dfca:	6123      	str	r3, [r4, #16]
 800dfcc:	2301      	movs	r3, #1
 800dfce:	6163      	str	r3, [r4, #20]
 800dfd0:	b003      	add	sp, #12
 800dfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfd4:	ab01      	add	r3, sp, #4
 800dfd6:	466a      	mov	r2, sp
 800dfd8:	f7ff ffc8 	bl	800df6c <__swhatbuf_r>
 800dfdc:	9f00      	ldr	r7, [sp, #0]
 800dfde:	4605      	mov	r5, r0
 800dfe0:	4639      	mov	r1, r7
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f7fb fd06 	bl	80099f4 <_malloc_r>
 800dfe8:	b948      	cbnz	r0, 800dffe <__smakebuf_r+0x46>
 800dfea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfee:	059a      	lsls	r2, r3, #22
 800dff0:	d4ee      	bmi.n	800dfd0 <__smakebuf_r+0x18>
 800dff2:	f023 0303 	bic.w	r3, r3, #3
 800dff6:	f043 0302 	orr.w	r3, r3, #2
 800dffa:	81a3      	strh	r3, [r4, #12]
 800dffc:	e7e2      	b.n	800dfc4 <__smakebuf_r+0xc>
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	6020      	str	r0, [r4, #0]
 800e002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e006:	81a3      	strh	r3, [r4, #12]
 800e008:	9b01      	ldr	r3, [sp, #4]
 800e00a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e00e:	b15b      	cbz	r3, 800e028 <__smakebuf_r+0x70>
 800e010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e014:	4630      	mov	r0, r6
 800e016:	f000 f81d 	bl	800e054 <_isatty_r>
 800e01a:	b128      	cbz	r0, 800e028 <__smakebuf_r+0x70>
 800e01c:	89a3      	ldrh	r3, [r4, #12]
 800e01e:	f023 0303 	bic.w	r3, r3, #3
 800e022:	f043 0301 	orr.w	r3, r3, #1
 800e026:	81a3      	strh	r3, [r4, #12]
 800e028:	89a3      	ldrh	r3, [r4, #12]
 800e02a:	431d      	orrs	r5, r3
 800e02c:	81a5      	strh	r5, [r4, #12]
 800e02e:	e7cf      	b.n	800dfd0 <__smakebuf_r+0x18>

0800e030 <_fstat_r>:
 800e030:	b538      	push	{r3, r4, r5, lr}
 800e032:	4d07      	ldr	r5, [pc, #28]	@ (800e050 <_fstat_r+0x20>)
 800e034:	2300      	movs	r3, #0
 800e036:	4604      	mov	r4, r0
 800e038:	4608      	mov	r0, r1
 800e03a:	4611      	mov	r1, r2
 800e03c:	602b      	str	r3, [r5, #0]
 800e03e:	f7f3 f9a7 	bl	8001390 <_fstat>
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	d102      	bne.n	800e04c <_fstat_r+0x1c>
 800e046:	682b      	ldr	r3, [r5, #0]
 800e048:	b103      	cbz	r3, 800e04c <_fstat_r+0x1c>
 800e04a:	6023      	str	r3, [r4, #0]
 800e04c:	bd38      	pop	{r3, r4, r5, pc}
 800e04e:	bf00      	nop
 800e050:	20019dfc 	.word	0x20019dfc

0800e054 <_isatty_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	4d06      	ldr	r5, [pc, #24]	@ (800e070 <_isatty_r+0x1c>)
 800e058:	2300      	movs	r3, #0
 800e05a:	4604      	mov	r4, r0
 800e05c:	4608      	mov	r0, r1
 800e05e:	602b      	str	r3, [r5, #0]
 800e060:	f7f3 f9a6 	bl	80013b0 <_isatty>
 800e064:	1c43      	adds	r3, r0, #1
 800e066:	d102      	bne.n	800e06e <_isatty_r+0x1a>
 800e068:	682b      	ldr	r3, [r5, #0]
 800e06a:	b103      	cbz	r3, 800e06e <_isatty_r+0x1a>
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	20019dfc 	.word	0x20019dfc

0800e074 <_init>:
 800e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e076:	bf00      	nop
 800e078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e07a:	bc08      	pop	{r3}
 800e07c:	469e      	mov	lr, r3
 800e07e:	4770      	bx	lr

0800e080 <_fini>:
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e082:	bf00      	nop
 800e084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e086:	bc08      	pop	{r3}
 800e088:	469e      	mov	lr, r3
 800e08a:	4770      	bx	lr


USB_IOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800b658  0800b658  0000c658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba40  0800ba40  0000d2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba40  0800ba40  0000ca40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba48  0800ba48  0000d2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba48  0800ba48  0000ca48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba4c  0800ba4c  0000ca4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800ba50  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019dac  200002c4  0800bd14  0000d2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a070  0800bd14  0000e070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f108  00000000  00000000  0000d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000320f  00000000  00000000  0001c3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0001f610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a1  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f6d  00000000  00000000  00020cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d38  00000000  00000000  00039c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a39  00000000  00000000  0004c97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d63b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  000d63fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000da74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b63c 	.word	0x0800b63c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800b63c 	.word	0x0800b63c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f000 fa2a 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f806 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 f86c 	bl	8000f90 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000eb8:	f007 fa52 	bl	8008360 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <main+0x14>

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	@ 0x50
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2230      	movs	r2, #48	@ 0x30
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f008 fc93 	bl	80097fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <SystemClock_Config+0xc8>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	4a26      	ldr	r2, [pc, #152]	@ (8000f88 <SystemClock_Config+0xc8>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef4:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <SystemClock_Config+0xc8>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <SystemClock_Config+0xcc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a20      	ldr	r2, [pc, #128]	@ (8000f8c <SystemClock_Config+0xcc>)
 8000f0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <SystemClock_Config+0xcc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f26:	2302      	movs	r3, #2
 8000f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f30:	2304      	movs	r3, #4
 8000f32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f34:	2360      	movs	r3, #96	@ 0x60
 8000f36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 ff9f 	bl	8002e88 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f50:	f000 f86e 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	230f      	movs	r3, #15
 8000f56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2103      	movs	r1, #3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fa01 	bl	8003378 <HAL_RCC_ClockConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f7c:	f000 f858 	bl	8001030 <Error_Handler>
  }
}
 8000f80:	bf00      	nop
 8000f82:	3750      	adds	r7, #80	@ 0x50
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <MX_GPIO_Init+0x98>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a1e      	ldr	r2, [pc, #120]	@ (8001028 <MX_GPIO_Init+0x98>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <MX_GPIO_Init+0x98>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <MX_GPIO_Init+0x98>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <MX_GPIO_Init+0x98>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <MX_GPIO_Init+0x98>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_GPIO_Init+0x98>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a10      	ldr	r2, [pc, #64]	@ (8001028 <MX_GPIO_Init+0x98>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_GPIO_Init+0x98>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	480b      	ldr	r0, [pc, #44]	@ (800102c <MX_GPIO_Init+0x9c>)
 8001000:	f000 fcac 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001004:	2301      	movs	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	4804      	ldr	r0, [pc, #16]	@ (800102c <MX_GPIO_Init+0x9c>)
 800101c:	f000 fb1a 	bl	8001654 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40020800 	.word	0x40020800

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <Error_Handler+0x8>

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <HAL_MspInit+0x4c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104a:	4a0f      	ldr	r2, [pc, #60]	@ (8001088 <HAL_MspInit+0x4c>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001050:	6453      	str	r3, [r2, #68]	@ 0x44
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <HAL_MspInit+0x4c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <HAL_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	4a08      	ldr	r2, [pc, #32]	@ (8001088 <HAL_MspInit+0x4c>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106c:	6413      	str	r3, [r2, #64]	@ 0x40
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_MspInit+0x4c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e2:	f000 f961 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <OTG_FS_IRQHandler+0x10>)
 80010f2:	f000 fd90 	bl	8001c16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200197c8 	.word	0x200197c8

08001100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return 1;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_kill>:

int _kill(int pid, int sig)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800111a:	f008 fbc1 	bl	80098a0 <__errno>
 800111e:	4603      	mov	r3, r0
 8001120:	2216      	movs	r2, #22
 8001122:	601a      	str	r2, [r3, #0]
  return -1;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_exit>:

void _exit (int status)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ffe7 	bl	8001110 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001142:	bf00      	nop
 8001144:	e7fd      	b.n	8001142 <_exit+0x12>

08001146 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e00a      	b.n	800116e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001158:	f3af 8000 	nop.w
 800115c:	4601      	mov	r1, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	60ba      	str	r2, [r7, #8]
 8001164:	b2ca      	uxtb	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbf0      	blt.n	8001158 <_read+0x12>
  }

  return len;
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e009      	b.n	80011a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	60ba      	str	r2, [r7, #8]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dbf1      	blt.n	8001192 <_write+0x12>
  }
  return len;
 80011ae:	687b      	ldr	r3, [r7, #4]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_close>:

int _close(int file)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e0:	605a      	str	r2, [r3, #4]
  return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_isatty>:

int _isatty(int file)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	@ (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f008 fb26 	bl	80098a0 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20020000 	.word	0x20020000
 8001280:	00000400 	.word	0x00000400
 8001284:	200002e0 	.word	0x200002e0
 8001288:	2001a070 	.word	0x2001a070

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012b4:	f7ff ffea 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	@ (80012ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	@ (80012f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	@ (80012fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012de:	f008 fae5 	bl	80098ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff fde1 	bl	8000ea8 <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80012f4:	0800ba50 	.word	0x0800ba50
  ldr r2, =_sbss
 80012f8:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80012fc:	2001a070 	.word	0x2001a070

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <HAL_Init+0x40>)
 800130e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <HAL_Init+0x40>)
 800131a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800131e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_Init+0x40>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 f94f 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	200f      	movs	r0, #15
 8001334:	f000 f808 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff fe80 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f967 	bl	800163a <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 f92f 	bl	80015e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	@ (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008
 80013cc:	200002e4 	.word	0x200002e4

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200002e4 	.word	0x200002e4

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff ffee 	bl	80013d0 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffde 	bl	80013d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4907      	ldr	r1, [pc, #28]	@ (80014cc <__NVIC_EnableIRQ+0x38>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	@ (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	@ (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	@ 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	@ 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f7ff ff8e 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff29 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff3e 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff8e 	bl	8001524 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5d 	bl	80014d0 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff31 	bl	8001494 <__NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa2 	bl	800158c <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	@ 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e159      	b.n	8001924 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 8148 	bne.w	800191e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d005      	beq.n	80016a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d130      	bne.n	8001708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d017      	beq.n	8001744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80a2 	beq.w	800191e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b57      	ldr	r3, [pc, #348]	@ (800193c <HAL_GPIO_Init+0x2e8>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	4a56      	ldr	r2, [pc, #344]	@ (800193c <HAL_GPIO_Init+0x2e8>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ea:	4b54      	ldr	r3, [pc, #336]	@ (800193c <HAL_GPIO_Init+0x2e8>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f6:	4a52      	ldr	r2, [pc, #328]	@ (8001940 <HAL_GPIO_Init+0x2ec>)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a49      	ldr	r2, [pc, #292]	@ (8001944 <HAL_GPIO_Init+0x2f0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x202>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a48      	ldr	r2, [pc, #288]	@ (8001948 <HAL_GPIO_Init+0x2f4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x1fe>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a47      	ldr	r2, [pc, #284]	@ (800194c <HAL_GPIO_Init+0x2f8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x1fa>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a46      	ldr	r2, [pc, #280]	@ (8001950 <HAL_GPIO_Init+0x2fc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x1f6>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a45      	ldr	r2, [pc, #276]	@ (8001954 <HAL_GPIO_Init+0x300>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x1f2>
 8001842:	2304      	movs	r3, #4
 8001844:	e008      	b.n	8001858 <HAL_GPIO_Init+0x204>
 8001846:	2307      	movs	r3, #7
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x204>
 800184a:	2303      	movs	r3, #3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x204>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x204>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x204>
 8001856:	2300      	movs	r3, #0
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f002 0203 	and.w	r2, r2, #3
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001868:	4935      	ldr	r1, [pc, #212]	@ (8001940 <HAL_GPIO_Init+0x2ec>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b38      	ldr	r3, [pc, #224]	@ (8001958 <HAL_GPIO_Init+0x304>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189a:	4a2f      	ldr	r2, [pc, #188]	@ (8001958 <HAL_GPIO_Init+0x304>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001958 <HAL_GPIO_Init+0x304>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c4:	4a24      	ldr	r2, [pc, #144]	@ (8001958 <HAL_GPIO_Init+0x304>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ca:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <HAL_GPIO_Init+0x304>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001958 <HAL_GPIO_Init+0x304>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <HAL_GPIO_Init+0x304>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001918:	4a0f      	ldr	r2, [pc, #60]	@ (8001958 <HAL_GPIO_Init+0x304>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b0f      	cmp	r3, #15
 8001928:	f67f aea2 	bls.w	8001670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3724      	adds	r7, #36	@ 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40013800 	.word	0x40013800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40020800 	.word	0x40020800
 8001950:	40020c00 	.word	0x40020c00
 8001954:	40021000 	.word	0x40021000
 8001958:	40013c00 	.word	0x40013c00

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001978:	e003      	b.n	8001982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af02      	add	r7, sp, #8
 8001994:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e101      	b.n	8001ba4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f006 fe88 	bl	80086d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2203      	movs	r2, #3
 80019c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019ce:	d102      	bne.n	80019d6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f001 ffdb 	bl	8003996 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7c1a      	ldrb	r2, [r3, #16]
 80019e8:	f88d 2000 	strb.w	r2, [sp]
 80019ec:	3304      	adds	r3, #4
 80019ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f0:	f001 feba 	bl	8003768 <USB_CoreInit>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2202      	movs	r2, #2
 80019fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0ce      	b.n	8001ba4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 ffd3 	bl	80039b8 <USB_SetCurrentMode>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0bf      	b.n	8001ba4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e04a      	b.n	8001ac0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3315      	adds	r3, #21
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3314      	adds	r3, #20
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	b298      	uxth	r0, r3
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	332e      	adds	r3, #46	@ 0x2e
 8001a66:	4602      	mov	r2, r0
 8001a68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	3318      	adds	r3, #24
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	331c      	adds	r3, #28
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3320      	adds	r3, #32
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3324      	adds	r3, #36	@ 0x24
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	3301      	adds	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	791b      	ldrb	r3, [r3, #4]
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d3af      	bcc.n	8001a2a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e044      	b.n	8001b5a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	3301      	adds	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	791b      	ldrb	r3, [r3, #4]
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d3b5      	bcc.n	8001ad0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7c1a      	ldrb	r2, [r3, #16]
 8001b6c:	f88d 2000 	strb.w	r2, [sp]
 8001b70:	3304      	adds	r3, #4
 8001b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b74:	f001 ff6c 	bl	8003a50 <USB_DevInit>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2202      	movs	r2, #2
 8001b82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00c      	b.n	8001ba4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 ffb0 	bl	8004b02 <USB_DevDisconnect>

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_PCD_Start+0x1c>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e022      	b.n	8001c0e <HAL_PCD_Start+0x62>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d009      	beq.n	8001bf0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 febd 	bl	8003974 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 ff5e 	bl	8004ac0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c16:	b590      	push	{r4, r7, lr}
 8001c18:	b08d      	sub	sp, #52	@ 0x34
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 f81c 	bl	8004c6a <USB_GetMode>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 848c 	bne.w	8002552 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 ff80 	bl	8004b44 <USB_ReadInterrupts>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8482 	beq.w	8002550 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 ff6d 	bl	8004b44 <USB_ReadInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d107      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f002 0202 	and.w	r2, r2, #2
 8001c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 ff5b 	bl	8004b44 <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d161      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0210 	bic.w	r2, r2, #16
 8001ca6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	f003 020f 	and.w	r2, r3, #15
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	0c5b      	lsrs	r3, r3, #17
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d124      	bne.n	8001d1e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d035      	beq.n	8001d4c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	6a38      	ldr	r0, [r7, #32]
 8001cf4:	f002 fd92 	bl	800481c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d04:	441a      	add	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d16:	441a      	add	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	e016      	b.n	8001d4c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	0c5b      	lsrs	r3, r3, #17
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d110      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d30:	2208      	movs	r2, #8
 8001d32:	4619      	mov	r1, r3
 8001d34:	6a38      	ldr	r0, [r7, #32]
 8001d36:	f002 fd71 	bl	800481c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d46:	441a      	add	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0210 	orr.w	r2, r2, #16
 8001d5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f002 feef 	bl	8004b44 <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001d70:	f040 80a7 	bne.w	8001ec2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f002 fef4 	bl	8004b6a <USB_ReadDevAllOutEpInterrupt>
 8001d82:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001d84:	e099      	b.n	8001eba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 808e 	beq.w	8001eae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 ff18 	bl	8004bd2 <USB_ReadDevOutEPInterrupt>
 8001da2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00c      	beq.n	8001dc8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fece 	bl	8002b64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dde:	461a      	mov	r2, r3
 8001de0:	2308      	movs	r3, #8
 8001de2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001de4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 ffa4 	bl	8002d34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e02:	461a      	mov	r2, r3
 8001e04:	2310      	movs	r3, #16
 8001e06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d030      	beq.n	8001e74 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1a:	2b80      	cmp	r3, #128	@ 0x80
 8001e1c:	d109      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e30:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	3304      	adds	r3, #4
 8001e46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	78db      	ldrb	r3, [r3, #3]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d108      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2200      	movs	r2, #0
 8001e54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f006 fd41 	bl	80088e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2302      	movs	r3, #2
 8001e72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d008      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f47f af62 	bne.w	8001d86 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fe3c 	bl	8004b44 <USB_ReadInterrupts>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ed2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001ed6:	f040 80db 	bne.w	8002090 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 fe5d 	bl	8004b9e <USB_ReadDevAllInEpInterrupt>
 8001ee4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001eea:	e0cd      	b.n	8002088 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80c2 	beq.w	800207c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 fe83 	bl	8004c0e <USB_ReadDevInEPInterrupt>
 8001f08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d057      	beq.n	8001fc4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69f9      	ldr	r1, [r7, #28]
 8001f30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f34:	4013      	ands	r3, r2
 8001f36:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f44:	461a      	mov	r2, r3
 8001f46:	2301      	movs	r3, #1
 8001f48:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	799b      	ldrb	r3, [r3, #6]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d132      	bne.n	8001fb8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	3320      	adds	r3, #32
 8001f62:	6819      	ldr	r1, [r3, #0]
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4403      	add	r3, r0
 8001f72:	331c      	adds	r3, #28
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4419      	add	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4403      	add	r3, r0
 8001f86:	3320      	adds	r3, #32
 8001f88:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d113      	bne.n	8001fb8 <HAL_PCD_IRQHandler+0x3a2>
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3324      	adds	r3, #36	@ 0x24
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	f002 fe8a 	bl	8004ccc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f006 fc15 	bl	80087ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2308      	movs	r3, #8
 8001fde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002012:	461a      	mov	r2, r3
 8002014:	2340      	movs	r3, #64	@ 0x40
 8002016:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d023      	beq.n	800206a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002022:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002024:	6a38      	ldr	r0, [r7, #32]
 8002026:	f001 fe77 	bl	8003d18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800202a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3310      	adds	r3, #16
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	78db      	ldrb	r3, [r3, #3]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d108      	bne.n	8002058 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2200      	movs	r2, #0
 800204a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4619      	mov	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f006 fc58 	bl	8008908 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	4413      	add	r3, r2
 8002060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002064:	461a      	mov	r2, r3
 8002066:	2302      	movs	r3, #2
 8002068:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002074:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fce8 	bl	8002a4c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	3301      	adds	r3, #1
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	f47f af2e 	bne.w	8001eec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f002 fd55 	bl	8004b44 <USB_ReadInterrupts>
 800209a:	4603      	mov	r3, r0
 800209c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020a4:	d122      	bne.n	80020ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d108      	bne.n	80020d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020cc:	2100      	movs	r1, #0
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fece 	bl	8002e70 <HAL_PCDEx_LPM_Callback>
 80020d4:	e002      	b.n	80020dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f006 fbf6 	bl	80088c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80020ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 fd27 	bl	8004b44 <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002100:	d112      	bne.n	8002128 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f006 fbb2 	bl	800887c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002126:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fd09 	bl	8004b44 <USB_ReadInterrupts>
 8002132:	4603      	mov	r3, r0
 8002134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800213c:	f040 80b7 	bne.w	80022ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2110      	movs	r1, #16
 800215a:	4618      	mov	r0, r3
 800215c:	f001 fddc 	bl	8003d18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002164:	e046      	b.n	80021f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002172:	461a      	mov	r2, r3
 8002174:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002178:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800217a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800218a:	0151      	lsls	r1, r2, #5
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	440a      	add	r2, r1
 8002190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002194:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002198:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800219a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a6:	461a      	mov	r2, r3
 80021a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80021ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021be:	0151      	lsls	r1, r2, #5
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	440a      	add	r2, r1
 80021c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80021c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80021cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021de:	0151      	lsls	r1, r2, #5
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	440a      	add	r2, r1
 80021e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80021e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80021ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f0:	3301      	adds	r3, #1
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	791b      	ldrb	r3, [r3, #4]
 80021f8:	461a      	mov	r2, r3
 80021fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d3b2      	bcc.n	8002166 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800220e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002212:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7bdb      	ldrb	r3, [r3, #15]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d016      	beq.n	800224a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800222c:	f043 030b 	orr.w	r3, r3, #11
 8002230:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800223a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002242:	f043 030b 	orr.w	r3, r3, #11
 8002246:	6453      	str	r3, [r2, #68]	@ 0x44
 8002248:	e015      	b.n	8002276 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002258:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800225c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002260:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002270:	f043 030b 	orr.w	r3, r3, #11
 8002274:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002284:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002288:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002298:	461a      	mov	r2, r3
 800229a:	f002 fd17 	bl	8004ccc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80022ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 fc46 	bl	8004b44 <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022c2:	d123      	bne.n	800230c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 fcdc 	bl	8004c86 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 fd99 	bl	8003e0a <USB_GetDevSpeed>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681c      	ldr	r4, [r3, #0]
 80022e4:	f001 fa34 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 80022e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022ee:	461a      	mov	r2, r3
 80022f0:	4620      	mov	r0, r4
 80022f2:	f001 fa9d 	bl	8003830 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f006 faa1 	bl	800883e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800230a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f002 fc17 	bl	8004b44 <USB_ReadInterrupts>
 8002316:	4603      	mov	r3, r0
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b08      	cmp	r3, #8
 800231e:	d10a      	bne.n	8002336 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f006 fa7e 	bl	8008822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f002 0208 	and.w	r2, r2, #8
 8002334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fc02 	bl	8004b44 <USB_ReadInterrupts>
 8002340:	4603      	mov	r3, r0
 8002342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002346:	2b80      	cmp	r3, #128	@ 0x80
 8002348:	d123      	bne.n	8002392 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002356:	2301      	movs	r3, #1
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
 800235a:	e014      	b.n	8002386 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d105      	bne.n	8002380 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fb08 	bl	8002990 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	3301      	adds	r3, #1
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	791b      	ldrb	r3, [r3, #4]
 800238a:	461a      	mov	r2, r3
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	4293      	cmp	r3, r2
 8002390:	d3e4      	bcc.n	800235c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f002 fbd4 	bl	8004b44 <USB_ReadInterrupts>
 800239c:	4603      	mov	r3, r0
 800239e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023a6:	d13c      	bne.n	8002422 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023a8:	2301      	movs	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ac:	e02b      	b.n	8002406 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	3318      	adds	r3, #24
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d115      	bne.n	8002400 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	da12      	bge.n	8002400 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	3317      	adds	r3, #23
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fac8 	bl	8002990 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	3301      	adds	r3, #1
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	791b      	ldrb	r3, [r3, #4]
 800240a:	461a      	mov	r2, r3
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	4293      	cmp	r3, r2
 8002410:	d3cd      	bcc.n	80023ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002420:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f002 fb8c 	bl	8004b44 <USB_ReadInterrupts>
 800242c:	4603      	mov	r3, r0
 800242e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002432:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002436:	d156      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002438:	2301      	movs	r3, #1
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
 800243c:	e045      	b.n	80024ca <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d12e      	bne.n	80024c4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002466:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002468:	2b00      	cmp	r3, #0
 800246a:	da2b      	bge.n	80024c4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002478:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800247c:	429a      	cmp	r2, r3
 800247e:	d121      	bne.n	80024c4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10a      	bne.n	80024c4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c0:	6053      	str	r3, [r2, #4]
            break;
 80024c2:	e008      	b.n	80024d6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	3301      	adds	r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	791b      	ldrb	r3, [r3, #4]
 80024ce:	461a      	mov	r2, r3
 80024d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d3b3      	bcc.n	800243e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80024e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f002 fb2a 	bl	8004b44 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024fa:	d10a      	bne.n	8002512 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f006 fa15 	bl	800892c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f002 fb14 	bl	8004b44 <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d115      	bne.n	8002552 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f006 fa05 	bl	8008948 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	e000      	b.n	8002552 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002550:	bf00      	nop
    }
  }
}
 8002552:	3734      	adds	r7, #52	@ 0x34
 8002554:	46bd      	mov	sp, r7
 8002556:	bd90      	pop	{r4, r7, pc}

08002558 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_PCD_SetAddress+0x1a>
 800256e:	2302      	movs	r3, #2
 8002570:	e012      	b.n	8002598 <HAL_PCD_SetAddress+0x40>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f002 fa73 	bl	8004a74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	70fb      	strb	r3, [r7, #3]
 80025b2:	460b      	mov	r3, r1
 80025b4:	803b      	strh	r3, [r7, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	da0f      	bge.n	80025e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	f003 020f 	and.w	r2, r3, #15
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	3310      	adds	r3, #16
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	705a      	strb	r2, [r3, #1]
 80025e4:	e00f      	b.n	8002606 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	f003 020f 	and.w	r2, r3, #15
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4413      	add	r3, r2
 80025fc:	3304      	adds	r3, #4
 80025fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	b2da      	uxtb	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002612:	883a      	ldrh	r2, [r7, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	78ba      	ldrb	r2, [r7, #2]
 800261c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002630:	78bb      	ldrb	r3, [r7, #2]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d102      	bne.n	800263c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_PCD_EP_Open+0xaa>
 8002646:	2302      	movs	r3, #2
 8002648:	e00e      	b.n	8002668 <HAL_PCD_EP_Open+0xc8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68f9      	ldr	r1, [r7, #12]
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fbfb 	bl	8003e54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002666:	7afb      	ldrb	r3, [r7, #11]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800267c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002680:	2b00      	cmp	r3, #0
 8002682:	da0f      	bge.n	80026a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	f003 020f 	and.w	r2, r3, #15
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	3310      	adds	r3, #16
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	3304      	adds	r3, #4
 800269a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	705a      	strb	r2, [r3, #1]
 80026a2:	e00f      	b.n	80026c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 020f 	and.w	r2, r3, #15
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	3304      	adds	r3, #4
 80026bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_PCD_EP_Close+0x6e>
 80026da:	2302      	movs	r3, #2
 80026dc:	e00e      	b.n	80026fc <HAL_PCD_EP_Close+0x8c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68f9      	ldr	r1, [r7, #12]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 fc39 	bl	8003f64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	460b      	mov	r3, r1
 8002712:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002714:	7afb      	ldrb	r3, [r7, #11]
 8002716:	f003 020f 	and.w	r2, r3, #15
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	3304      	adds	r3, #4
 800272c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2200      	movs	r2, #0
 800273e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2200      	movs	r2, #0
 8002744:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002746:	7afb      	ldrb	r3, [r7, #11]
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	b2da      	uxtb	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	799b      	ldrb	r3, [r3, #6]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d102      	bne.n	8002760 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	799b      	ldrb	r3, [r3, #6]
 8002768:	461a      	mov	r2, r3
 800276a:	6979      	ldr	r1, [r7, #20]
 800276c:	f001 fcd6 	bl	800411c <USB_EPStartXfer>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	f003 020f 	and.w	r2, r3, #15
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800279c:	681b      	ldr	r3, [r3, #0]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	460b      	mov	r3, r1
 80027b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ba:	7afb      	ldrb	r3, [r7, #11]
 80027bc:	f003 020f 	and.w	r2, r3, #15
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	3310      	adds	r3, #16
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2200      	movs	r2, #0
 80027e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2201      	movs	r2, #1
 80027e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ea:	7afb      	ldrb	r3, [r7, #11]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	799b      	ldrb	r3, [r3, #6]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	799b      	ldrb	r3, [r3, #6]
 800280c:	461a      	mov	r2, r3
 800280e:	6979      	ldr	r1, [r7, #20]
 8002810:	f001 fc84 	bl	800411c <USB_EPStartXfer>

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	7912      	ldrb	r2, [r2, #4]
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e04f      	b.n	80028dc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800283c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002840:	2b00      	cmp	r3, #0
 8002842:	da0f      	bge.n	8002864 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	f003 020f 	and.w	r2, r3, #15
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	3310      	adds	r3, #16
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	4413      	add	r3, r2
 8002858:	3304      	adds	r3, #4
 800285a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	705a      	strb	r2, [r3, #1]
 8002862:	e00d      	b.n	8002880 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	3304      	adds	r3, #4
 8002878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_PCD_EP_SetStall+0x82>
 800289c:	2302      	movs	r3, #2
 800289e:	e01d      	b.n	80028dc <HAL_PCD_EP_SetStall+0xbe>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 f80c 	bl	80048cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7999      	ldrb	r1, [r3, #6]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028cc:	461a      	mov	r2, r3
 80028ce:	f002 f9fd 	bl	8004ccc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	7912      	ldrb	r2, [r2, #4]
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e042      	b.n	8002988 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002906:	2b00      	cmp	r3, #0
 8002908:	da0f      	bge.n	800292a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	f003 020f 	and.w	r2, r3, #15
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	3310      	adds	r3, #16
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	3304      	adds	r3, #4
 8002920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	705a      	strb	r2, [r3, #1]
 8002928:	e00f      	b.n	800294a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	f003 020f 	and.w	r2, r3, #15
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	3304      	adds	r3, #4
 8002942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	b2da      	uxtb	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_PCD_EP_ClrStall+0x86>
 8002966:	2302      	movs	r3, #2
 8002968:	e00e      	b.n	8002988 <HAL_PCD_EP_ClrStall+0xa4>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68f9      	ldr	r1, [r7, #12]
 8002978:	4618      	mov	r0, r3
 800297a:	f002 f815 	bl	80049a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800299c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da0c      	bge.n	80029be <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	f003 020f 	and.w	r2, r3, #15
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	3310      	adds	r3, #16
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e00c      	b.n	80029d8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f003 020f 	and.w	r2, r3, #15
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 fe34 	bl	800464c <USB_EPStopXfer>
 80029e4:	4603      	mov	r3, r0
 80029e6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029e8:	7afb      	ldrb	r3, [r7, #11]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_PCD_EP_Flush+0x1a>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e01b      	b.n	8002a44 <HAL_PCD_EP_Flush+0x52>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8002a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	da09      	bge.n	8002a30 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f001 f975 	bl	8003d18 <USB_FlushTxFifo>
 8002a2e:	e004      	b.n	8002a3a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f9a1 	bl	8003d7c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	@ 0x28
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	3310      	adds	r3, #16
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	3304      	adds	r3, #4
 8002a72:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d901      	bls.n	8002a84 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e06b      	b.n	8002b5c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d902      	bls.n	8002aa0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	3303      	adds	r3, #3
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aa8:	e02a      	b.n	8002b00 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d902      	bls.n	8002ac6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3303      	adds	r3, #3
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	6978      	ldr	r0, [r7, #20]
 8002ae4:	f001 fe5c 	bl	80047a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	441a      	add	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	441a      	add	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d809      	bhi.n	8002b2a <PCD_WriteEmptyTxFifo+0xde>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d203      	bcs.n	8002b2a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1bf      	bne.n	8002aaa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d811      	bhi.n	8002b5a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	6939      	ldr	r1, [r7, #16]
 8002b52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b56:	4013      	ands	r3, r2
 8002b58:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	333c      	adds	r3, #60	@ 0x3c
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	799b      	ldrb	r3, [r3, #6]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d17b      	bne.n	8002c92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	4a61      	ldr	r2, [pc, #388]	@ (8002d2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	f240 80b9 	bls.w	8002d20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80b3 	beq.w	8002d20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bcc:	6093      	str	r3, [r2, #8]
 8002bce:	e0a7      	b.n	8002d20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be6:	461a      	mov	r2, r3
 8002be8:	2320      	movs	r3, #32
 8002bea:	6093      	str	r3, [r2, #8]
 8002bec:	e098      	b.n	8002d20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f040 8093 	bne.w	8002d20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8002d2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d90f      	bls.n	8002c22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c1e:	6093      	str	r3, [r2, #8]
 8002c20:	e07e      	b.n	8002d20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	3304      	adds	r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	0159      	lsls	r1, r3, #5
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	440b      	add	r3, r1
 8002c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4e:	1ad2      	subs	r2, r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d114      	bne.n	8002c84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2101      	movs	r1, #1
 8002c70:	f002 f82c 	bl	8004ccc <USB_EP0_OutStart>
 8002c74:	e006      	b.n	8002c84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	441a      	add	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f005 fd94 	bl	80087b8 <HAL_PCD_DataOutStageCallback>
 8002c90:	e046      	b.n	8002d20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	4a26      	ldr	r2, [pc, #152]	@ (8002d30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d124      	bne.n	8002ce4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cb6:	6093      	str	r3, [r2, #8]
 8002cb8:	e032      	b.n	8002d20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f005 fd6b 	bl	80087b8 <HAL_PCD_DataOutStageCallback>
 8002ce2:	e01d      	b.n	8002d20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d114      	bne.n	8002d14 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d108      	bne.n	8002d14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2100      	movs	r1, #0
 8002d10:	f001 ffdc 	bl	8004ccc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f005 fd4c 	bl	80087b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	4f54300a 	.word	0x4f54300a
 8002d30:	4f54310a 	.word	0x4f54310a

08002d34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	333c      	adds	r3, #60	@ 0x3c
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a15      	ldr	r2, [pc, #84]	@ (8002dbc <PCD_EP_OutSetupPacket_int+0x88>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d90e      	bls.n	8002d88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f005 fd03 	bl	8008794 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <PCD_EP_OutSetupPacket_int+0x88>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d90c      	bls.n	8002db0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	799b      	ldrb	r3, [r3, #6]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d108      	bne.n	8002db0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002da8:	461a      	mov	r2, r3
 8002daa:	2101      	movs	r1, #1
 8002dac:	f001 ff8e 	bl	8004ccc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	4f54300a 	.word	0x4f54300a

08002dc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002dde:	883b      	ldrh	r3, [r7, #0]
 8002de0:	0419      	lsls	r1, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dec:	e028      	b.n	8002e40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	4413      	add	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e00d      	b.n	8002e1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	3340      	adds	r3, #64	@ 0x40
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	4413      	add	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d3ec      	bcc.n	8002e02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e28:	883b      	ldrh	r3, [r7, #0]
 8002e2a:	0418      	lsls	r0, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	4302      	orrs	r2, r0
 8002e38:	3340      	adds	r3, #64	@ 0x40
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	887a      	ldrh	r2, [r7, #2]
 8002e60:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e267      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d075      	beq.n	8002f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ea6:	4b88      	ldr	r3, [pc, #544]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d00c      	beq.n	8002ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb2:	4b85      	ldr	r3, [pc, #532]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d112      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ebe:	4b82      	ldr	r3, [pc, #520]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	4b7e      	ldr	r3, [pc, #504]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d05b      	beq.n	8002f90 <HAL_RCC_OscConfig+0x108>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d157      	bne.n	8002f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e242      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eec:	d106      	bne.n	8002efc <HAL_RCC_OscConfig+0x74>
 8002eee:	4b76      	ldr	r3, [pc, #472]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a75      	ldr	r2, [pc, #468]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e01d      	b.n	8002f38 <HAL_RCC_OscConfig+0xb0>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x98>
 8002f06:	4b70      	ldr	r3, [pc, #448]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6f      	ldr	r2, [pc, #444]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b6d      	ldr	r3, [pc, #436]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a6c      	ldr	r2, [pc, #432]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0xb0>
 8002f20:	4b69      	ldr	r3, [pc, #420]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a68      	ldr	r2, [pc, #416]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b66      	ldr	r3, [pc, #408]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a65      	ldr	r2, [pc, #404]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d013      	beq.n	8002f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe fa46 	bl	80013d0 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fe fa42 	bl	80013d0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	@ 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e207      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0xc0>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fa32 	bl	80013d0 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe fa2e 	bl	80013d0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	@ 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e1f3      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	4b51      	ldr	r3, [pc, #324]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0xe8>
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d063      	beq.n	8003066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b47      	ldr	r3, [pc, #284]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d11c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb6:	4b44      	ldr	r3, [pc, #272]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	4b41      	ldr	r3, [pc, #260]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_RCC_OscConfig+0x152>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e1c7      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	4b3b      	ldr	r3, [pc, #236]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4937      	ldr	r1, [pc, #220]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	e03a      	b.n	8003066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff8:	4b34      	ldr	r3, [pc, #208]	@ (80030cc <HAL_RCC_OscConfig+0x244>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe f9e7 	bl	80013d0 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe f9e3 	bl	80013d0 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e1a8      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	4b2b      	ldr	r3, [pc, #172]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b28      	ldr	r3, [pc, #160]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4925      	ldr	r1, [pc, #148]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]
 8003038:	e015      	b.n	8003066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303a:	4b24      	ldr	r3, [pc, #144]	@ (80030cc <HAL_RCC_OscConfig+0x244>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe f9c6 	bl	80013d0 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003048:	f7fe f9c2 	bl	80013d0 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e187      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	4b1b      	ldr	r3, [pc, #108]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d036      	beq.n	80030e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307a:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <HAL_RCC_OscConfig+0x248>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe f9a6 	bl	80013d0 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003088:	f7fe f9a2 	bl	80013d0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e167      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_RCC_OscConfig+0x240>)
 800309c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x200>
 80030a6:	e01b      	b.n	80030e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a8:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <HAL_RCC_OscConfig+0x248>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7fe f98f 	bl	80013d0 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b4:	e00e      	b.n	80030d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b6:	f7fe f98b 	bl	80013d0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d907      	bls.n	80030d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e150      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
 80030c8:	40023800 	.word	0x40023800
 80030cc:	42470000 	.word	0x42470000
 80030d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	4b88      	ldr	r3, [pc, #544]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 80030d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ea      	bne.n	80030b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8097 	beq.w	800321c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b81      	ldr	r3, [pc, #516]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	4b7d      	ldr	r3, [pc, #500]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	4a7c      	ldr	r2, [pc, #496]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800310c:	6413      	str	r3, [r2, #64]	@ 0x40
 800310e:	4b7a      	ldr	r3, [pc, #488]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b77      	ldr	r3, [pc, #476]	@ (80032fc <HAL_RCC_OscConfig+0x474>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d118      	bne.n	800315c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312a:	4b74      	ldr	r3, [pc, #464]	@ (80032fc <HAL_RCC_OscConfig+0x474>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a73      	ldr	r2, [pc, #460]	@ (80032fc <HAL_RCC_OscConfig+0x474>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003136:	f7fe f94b 	bl	80013d0 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fe f947 	bl	80013d0 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e10c      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b6a      	ldr	r3, [pc, #424]	@ (80032fc <HAL_RCC_OscConfig+0x474>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x2ea>
 8003164:	4b64      	ldr	r3, [pc, #400]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003168:	4a63      	ldr	r2, [pc, #396]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003170:	e01c      	b.n	80031ac <HAL_RCC_OscConfig+0x324>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b05      	cmp	r3, #5
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x30c>
 800317a:	4b5f      	ldr	r3, [pc, #380]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317e:	4a5e      	ldr	r2, [pc, #376]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6713      	str	r3, [r2, #112]	@ 0x70
 8003186:	4b5c      	ldr	r3, [pc, #368]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318a:	4a5b      	ldr	r2, [pc, #364]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	@ 0x70
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0x324>
 8003194:	4b58      	ldr	r3, [pc, #352]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a57      	ldr	r2, [pc, #348]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a0:	4b55      	ldr	r3, [pc, #340]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a4:	4a54      	ldr	r2, [pc, #336]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 80031a6:	f023 0304 	bic.w	r3, r3, #4
 80031aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe f90c 	bl	80013d0 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe f908 	bl	80013d0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0cb      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d2:	4b49      	ldr	r3, [pc, #292]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ee      	beq.n	80031bc <HAL_RCC_OscConfig+0x334>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e0:	f7fe f8f6 	bl	80013d0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fe f8f2 	bl	80013d0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0b5      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fe:	4b3e      	ldr	r3, [pc, #248]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1ee      	bne.n	80031e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d105      	bne.n	800321c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003210:	4b39      	ldr	r3, [pc, #228]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	4a38      	ldr	r2, [pc, #224]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800321a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80a1 	beq.w	8003368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003226:	4b34      	ldr	r3, [pc, #208]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b08      	cmp	r3, #8
 8003230:	d05c      	beq.n	80032ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d141      	bne.n	80032be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323a:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <HAL_RCC_OscConfig+0x478>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe f8c6 	bl	80013d0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe f8c2 	bl	80013d0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e087      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	4b27      	ldr	r3, [pc, #156]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	019b      	lsls	r3, r3, #6
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	3b01      	subs	r3, #1
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	491b      	ldr	r1, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003290:	4b1b      	ldr	r3, [pc, #108]	@ (8003300 <HAL_RCC_OscConfig+0x478>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe f89b 	bl	80013d0 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329e:	f7fe f897 	bl	80013d0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e05c      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x416>
 80032bc:	e054      	b.n	8003368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <HAL_RCC_OscConfig+0x478>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe f884 	bl	80013d0 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe f880 	bl	80013d0 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e045      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_RCC_OscConfig+0x470>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x444>
 80032ea:	e03d      	b.n	8003368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e038      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000
 8003300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003304:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_RCC_OscConfig+0x4ec>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d028      	beq.n	8003364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d121      	bne.n	8003364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d11a      	bne.n	8003364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800333a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800333c:	4293      	cmp	r3, r2
 800333e:	d111      	bne.n	8003364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	3b01      	subs	r3, #1
 800334e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d107      	bne.n	8003364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800

08003378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0cc      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800338c:	4b68      	ldr	r3, [pc, #416]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d90c      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b65      	ldr	r3, [pc, #404]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b63      	ldr	r3, [pc, #396]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0b8      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033cc:	4b59      	ldr	r3, [pc, #356]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a58      	ldr	r2, [pc, #352]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e4:	4b53      	ldr	r3, [pc, #332]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a52      	ldr	r2, [pc, #328]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f0:	4b50      	ldr	r3, [pc, #320]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	494d      	ldr	r1, [pc, #308]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d044      	beq.n	8003498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b47      	ldr	r3, [pc, #284]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d119      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d003      	beq.n	8003436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003432:	2b03      	cmp	r3, #3
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003436:	4b3f      	ldr	r3, [pc, #252]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e06f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003446:	4b3b      	ldr	r3, [pc, #236]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e067      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003456:	4b37      	ldr	r3, [pc, #220]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4934      	ldr	r1, [pc, #208]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003468:	f7fd ffb2 	bl	80013d0 <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	e00a      	b.n	8003486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003470:	f7fd ffae 	bl	80013d0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e04f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 020c 	and.w	r2, r3, #12
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	429a      	cmp	r2, r3
 8003496:	d1eb      	bne.n	8003470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003498:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d20c      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b22      	ldr	r3, [pc, #136]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b20      	ldr	r3, [pc, #128]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e032      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4916      	ldr	r1, [pc, #88]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ea:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	490e      	ldr	r1, [pc, #56]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034fe:	f000 f821 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8003502:	4602      	mov	r2, r0
 8003504:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	490a      	ldr	r1, [pc, #40]	@ (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	5ccb      	ldrb	r3, [r1, r3]
 8003512:	fa22 f303 	lsr.w	r3, r2, r3
 8003516:	4a09      	ldr	r2, [pc, #36]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800351a:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd ff12 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023c00 	.word	0x40023c00
 8003534:	40023800 	.word	0x40023800
 8003538:	0800b69c 	.word	0x0800b69c
 800353c:	20000000 	.word	0x20000000
 8003540:	20000004 	.word	0x20000004

08003544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b094      	sub	sp, #80	@ 0x50
 800354a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003550:	2300      	movs	r3, #0
 8003552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003554:	2300      	movs	r3, #0
 8003556:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800355c:	4b79      	ldr	r3, [pc, #484]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	d00d      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x40>
 8003568:	2b08      	cmp	r3, #8
 800356a:	f200 80e1 	bhi.w	8003730 <HAL_RCC_GetSysClockFreq+0x1ec>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x34>
 8003572:	2b04      	cmp	r3, #4
 8003574:	d003      	beq.n	800357e <HAL_RCC_GetSysClockFreq+0x3a>
 8003576:	e0db      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003578:	4b73      	ldr	r3, [pc, #460]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x204>)
 800357a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800357c:	e0db      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800357e:	4b73      	ldr	r3, [pc, #460]	@ (800374c <HAL_RCC_GetSysClockFreq+0x208>)
 8003580:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003582:	e0d8      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003584:	4b6f      	ldr	r3, [pc, #444]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800358c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800358e:	4b6d      	ldr	r3, [pc, #436]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d063      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359a:	4b6a      	ldr	r3, [pc, #424]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	099b      	lsrs	r3, r3, #6
 80035a0:	2200      	movs	r2, #0
 80035a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ae:	2300      	movs	r3, #0
 80035b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035b6:	4622      	mov	r2, r4
 80035b8:	462b      	mov	r3, r5
 80035ba:	f04f 0000 	mov.w	r0, #0
 80035be:	f04f 0100 	mov.w	r1, #0
 80035c2:	0159      	lsls	r1, r3, #5
 80035c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c8:	0150      	lsls	r0, r2, #5
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4621      	mov	r1, r4
 80035d0:	1a51      	subs	r1, r2, r1
 80035d2:	6139      	str	r1, [r7, #16]
 80035d4:	4629      	mov	r1, r5
 80035d6:	eb63 0301 	sbc.w	r3, r3, r1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035e8:	4659      	mov	r1, fp
 80035ea:	018b      	lsls	r3, r1, #6
 80035ec:	4651      	mov	r1, sl
 80035ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035f2:	4651      	mov	r1, sl
 80035f4:	018a      	lsls	r2, r1, #6
 80035f6:	4651      	mov	r1, sl
 80035f8:	ebb2 0801 	subs.w	r8, r2, r1
 80035fc:	4659      	mov	r1, fp
 80035fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800360e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003616:	4690      	mov	r8, r2
 8003618:	4699      	mov	r9, r3
 800361a:	4623      	mov	r3, r4
 800361c:	eb18 0303 	adds.w	r3, r8, r3
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	462b      	mov	r3, r5
 8003624:	eb49 0303 	adc.w	r3, r9, r3
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003636:	4629      	mov	r1, r5
 8003638:	024b      	lsls	r3, r1, #9
 800363a:	4621      	mov	r1, r4
 800363c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003640:	4621      	mov	r1, r4
 8003642:	024a      	lsls	r2, r1, #9
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364a:	2200      	movs	r2, #0
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800364e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003654:	f7fd fab0 	bl	8000bb8 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003660:	e058      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003662:	4b38      	ldr	r3, [pc, #224]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	099b      	lsrs	r3, r3, #6
 8003668:	2200      	movs	r2, #0
 800366a:	4618      	mov	r0, r3
 800366c:	4611      	mov	r1, r2
 800366e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	2300      	movs	r3, #0
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
 8003678:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	f04f 0000 	mov.w	r0, #0
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	0159      	lsls	r1, r3, #5
 800368a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800368e:	0150      	lsls	r0, r2, #5
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4641      	mov	r1, r8
 8003696:	ebb2 0a01 	subs.w	sl, r2, r1
 800369a:	4649      	mov	r1, r9
 800369c:	eb63 0b01 	sbc.w	fp, r3, r1
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036b4:	ebb2 040a 	subs.w	r4, r2, sl
 80036b8:	eb63 050b 	sbc.w	r5, r3, fp
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	00eb      	lsls	r3, r5, #3
 80036c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ca:	00e2      	lsls	r2, r4, #3
 80036cc:	4614      	mov	r4, r2
 80036ce:	461d      	mov	r5, r3
 80036d0:	4643      	mov	r3, r8
 80036d2:	18e3      	adds	r3, r4, r3
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	464b      	mov	r3, r9
 80036d8:	eb45 0303 	adc.w	r3, r5, r3
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ea:	4629      	mov	r1, r5
 80036ec:	028b      	lsls	r3, r1, #10
 80036ee:	4621      	mov	r1, r4
 80036f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f4:	4621      	mov	r1, r4
 80036f6:	028a      	lsls	r2, r1, #10
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036fe:	2200      	movs	r2, #0
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	61fa      	str	r2, [r7, #28]
 8003704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003708:	f7fd fa56 	bl	8000bb8 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	3301      	adds	r3, #1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003724:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800372e:	e002      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4b05      	ldr	r3, [pc, #20]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x204>)
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003738:	4618      	mov	r0, r3
 800373a:	3750      	adds	r7, #80	@ 0x50
 800373c:	46bd      	mov	sp, r7
 800373e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	00f42400 	.word	0x00f42400
 800374c:	007a1200 	.word	0x007a1200

08003750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003754:	4b03      	ldr	r3, [pc, #12]	@ (8003764 <HAL_RCC_GetHCLKFreq+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000000 	.word	0x20000000

08003768 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003768:	b084      	sub	sp, #16
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	f107 001c 	add.w	r0, r7, #28
 8003776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800377a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800377e:	2b01      	cmp	r3, #1
 8003780:	d123      	bne.n	80037ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003786:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f001 fae2 	bl	8004d88 <USB_CoreReset>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	e01b      	b.n	8003802 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f001 fad6 	bl	8004d88 <USB_CoreReset>
 80037dc:	4603      	mov	r3, r0
 80037de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80037f4:	e005      	b.n	8003802 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003802:	7fbb      	ldrb	r3, [r7, #30]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10b      	bne.n	8003820 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f043 0206 	orr.w	r2, r3, #6
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800382c:	b004      	add	sp, #16
 800382e:	4770      	bx	lr

08003830 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d165      	bne.n	8003910 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a41      	ldr	r2, [pc, #260]	@ (800394c <USB_SetTurnaroundTime+0x11c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d906      	bls.n	800385a <USB_SetTurnaroundTime+0x2a>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a40      	ldr	r2, [pc, #256]	@ (8003950 <USB_SetTurnaroundTime+0x120>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d202      	bcs.n	800385a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003854:	230f      	movs	r3, #15
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e062      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4a3c      	ldr	r2, [pc, #240]	@ (8003950 <USB_SetTurnaroundTime+0x120>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d306      	bcc.n	8003870 <USB_SetTurnaroundTime+0x40>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4a3b      	ldr	r2, [pc, #236]	@ (8003954 <USB_SetTurnaroundTime+0x124>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d202      	bcs.n	8003870 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800386a:	230e      	movs	r3, #14
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e057      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4a38      	ldr	r2, [pc, #224]	@ (8003954 <USB_SetTurnaroundTime+0x124>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d306      	bcc.n	8003886 <USB_SetTurnaroundTime+0x56>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4a37      	ldr	r2, [pc, #220]	@ (8003958 <USB_SetTurnaroundTime+0x128>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d202      	bcs.n	8003886 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003880:	230d      	movs	r3, #13
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e04c      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4a33      	ldr	r2, [pc, #204]	@ (8003958 <USB_SetTurnaroundTime+0x128>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d306      	bcc.n	800389c <USB_SetTurnaroundTime+0x6c>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4a32      	ldr	r2, [pc, #200]	@ (800395c <USB_SetTurnaroundTime+0x12c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d802      	bhi.n	800389c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003896:	230c      	movs	r3, #12
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e041      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4a2f      	ldr	r2, [pc, #188]	@ (800395c <USB_SetTurnaroundTime+0x12c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d906      	bls.n	80038b2 <USB_SetTurnaroundTime+0x82>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003960 <USB_SetTurnaroundTime+0x130>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d802      	bhi.n	80038b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038ac:	230b      	movs	r3, #11
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e036      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003960 <USB_SetTurnaroundTime+0x130>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d906      	bls.n	80038c8 <USB_SetTurnaroundTime+0x98>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4a29      	ldr	r2, [pc, #164]	@ (8003964 <USB_SetTurnaroundTime+0x134>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d802      	bhi.n	80038c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038c2:	230a      	movs	r3, #10
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	e02b      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4a26      	ldr	r2, [pc, #152]	@ (8003964 <USB_SetTurnaroundTime+0x134>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d906      	bls.n	80038de <USB_SetTurnaroundTime+0xae>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4a25      	ldr	r2, [pc, #148]	@ (8003968 <USB_SetTurnaroundTime+0x138>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d202      	bcs.n	80038de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038d8:	2309      	movs	r3, #9
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e020      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4a21      	ldr	r2, [pc, #132]	@ (8003968 <USB_SetTurnaroundTime+0x138>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d306      	bcc.n	80038f4 <USB_SetTurnaroundTime+0xc4>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4a20      	ldr	r2, [pc, #128]	@ (800396c <USB_SetTurnaroundTime+0x13c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d802      	bhi.n	80038f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038ee:	2308      	movs	r3, #8
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e015      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4a1d      	ldr	r2, [pc, #116]	@ (800396c <USB_SetTurnaroundTime+0x13c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d906      	bls.n	800390a <USB_SetTurnaroundTime+0xda>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003970 <USB_SetTurnaroundTime+0x140>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d202      	bcs.n	800390a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003904:	2307      	movs	r3, #7
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e00a      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800390a:	2306      	movs	r3, #6
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e007      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003916:	2309      	movs	r3, #9
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	e001      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800391c:	2309      	movs	r3, #9
 800391e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	029b      	lsls	r3, r3, #10
 8003934:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003938:	431a      	orrs	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	00d8acbf 	.word	0x00d8acbf
 8003950:	00e4e1c0 	.word	0x00e4e1c0
 8003954:	00f42400 	.word	0x00f42400
 8003958:	01067380 	.word	0x01067380
 800395c:	011a499f 	.word	0x011a499f
 8003960:	01312cff 	.word	0x01312cff
 8003964:	014ca43f 	.word	0x014ca43f
 8003968:	016e3600 	.word	0x016e3600
 800396c:	01a6ab1f 	.word	0x01a6ab1f
 8003970:	01e84800 	.word	0x01e84800

08003974 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0201 	bic.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d115      	bne.n	8003a06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80039e6:	200a      	movs	r0, #10
 80039e8:	f7fd fcfe 	bl	80013e8 <HAL_Delay>
      ms += 10U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	330a      	adds	r3, #10
 80039f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f001 f939 	bl	8004c6a <USB_GetMode>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d01e      	beq.n	8003a3c <USB_SetCurrentMode+0x84>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a02:	d9f0      	bls.n	80039e6 <USB_SetCurrentMode+0x2e>
 8003a04:	e01a      	b.n	8003a3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d115      	bne.n	8003a38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a18:	200a      	movs	r0, #10
 8003a1a:	f7fd fce5 	bl	80013e8 <HAL_Delay>
      ms += 10U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	330a      	adds	r3, #10
 8003a22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f001 f920 	bl	8004c6a <USB_GetMode>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <USB_SetCurrentMode+0x84>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a34:	d9f0      	bls.n	8003a18 <USB_SetCurrentMode+0x60>
 8003a36:	e001      	b.n	8003a3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e005      	b.n	8003a48 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a40:	d101      	bne.n	8003a46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a50:	b084      	sub	sp, #16
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	e009      	b.n	8003a84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	3340      	adds	r3, #64	@ 0x40
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	3301      	adds	r3, #1
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b0e      	cmp	r3, #14
 8003a88:	d9f2      	bls.n	8003a70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11c      	bne.n	8003acc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003aa0:	f043 0302 	orr.w	r3, r3, #2
 8003aa4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aaa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003aca:	e00b      	b.n	8003ae4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003adc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003af0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10d      	bne.n	8003b14 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b00:	2100      	movs	r1, #0
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f968 	bl	8003dd8 <USB_SetDevSpeed>
 8003b08:	e008      	b.n	8003b1c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f963 	bl	8003dd8 <USB_SetDevSpeed>
 8003b12:	e003      	b.n	8003b1c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b14:	2103      	movs	r1, #3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f95e 	bl	8003dd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b1c:	2110      	movs	r1, #16
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8fa 	bl	8003d18 <USB_FlushTxFifo>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f924 	bl	8003d7c <USB_FlushRxFifo>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b44:	461a      	mov	r2, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e043      	b.n	8003bf0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b7e:	d118      	bne.n	8003bb2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b92:	461a      	mov	r2, r3
 8003b94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e013      	b.n	8003bc4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e008      	b.n	8003bc4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be2:	461a      	mov	r2, r3
 8003be4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003be8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	3301      	adds	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d3b5      	bcc.n	8003b68 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	e043      	b.n	8003c8a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c18:	d118      	bne.n	8003c4c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e013      	b.n	8003c5e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c42:	461a      	mov	r2, r3
 8003c44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e008      	b.n	8003c5e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	3301      	adds	r3, #1
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c8e:	461a      	mov	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d3b5      	bcc.n	8003c02 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003cb6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f043 0210 	orr.w	r2, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <USB_DevInit+0x2c4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f043 0208 	orr.w	r2, r3, #8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d107      	bne.n	8003d04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cfc:	f043 0304 	orr.w	r3, r3, #4
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d10:	b004      	add	sp, #16
 8003d12:	4770      	bx	lr
 8003d14:	803c3800 	.word	0x803c3800

08003d18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d32:	d901      	bls.n	8003d38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e01b      	b.n	8003d70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	daf2      	bge.n	8003d26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	019b      	lsls	r3, r3, #6
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3301      	adds	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d5c:	d901      	bls.n	8003d62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e006      	b.n	8003d70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d0f0      	beq.n	8003d50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d94:	d901      	bls.n	8003d9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e018      	b.n	8003dcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	daf2      	bge.n	8003d88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2210      	movs	r2, #16
 8003daa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3301      	adds	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003db8:	d901      	bls.n	8003dbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e006      	b.n	8003dcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d0f0      	beq.n	8003dac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b087      	sub	sp, #28
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0306 	and.w	r3, r3, #6
 8003e22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]
 8003e2e:	e00a      	b.n	8003e46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d002      	beq.n	8003e3c <USB_GetDevSpeed+0x32>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b06      	cmp	r3, #6
 8003e3a:	d102      	bne.n	8003e42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	75fb      	strb	r3, [r7, #23]
 8003e40:	e001      	b.n	8003e46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e42:	230f      	movs	r3, #15
 8003e44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d13a      	bne.n	8003ee6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	68f9      	ldr	r1, [r7, #12]
 8003e8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d155      	bne.n	8003f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	791b      	ldrb	r3, [r3, #4]
 8003ec2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	059b      	lsls	r3, r3, #22
 8003eca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	e036      	b.n	8003f54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	041b      	lsls	r3, r3, #16
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11a      	bne.n	8003f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	791b      	ldrb	r3, [r3, #4]
 8003f38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d161      	bne.n	8004044 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f96:	d11f      	bne.n	8003fd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	0151      	lsls	r1, r2, #5
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	440a      	add	r2, r1
 8003fae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	0151      	lsls	r1, r2, #5
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	440a      	add	r2, r1
 8003fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	b29b      	uxth	r3, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800401c:	4013      	ands	r3, r2
 800401e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	0159      	lsls	r1, r3, #5
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	440b      	add	r3, r1
 8004036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800403a:	4619      	mov	r1, r3
 800403c:	4b35      	ldr	r3, [pc, #212]	@ (8004114 <USB_DeactivateEndpoint+0x1b0>)
 800403e:	4013      	ands	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
 8004042:	e060      	b.n	8004106 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800405a:	d11f      	bne.n	800409c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	440a      	add	r2, r1
 8004072:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004076:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800407a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004096:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800409a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f303 	lsl.w	r3, r1, r3
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	43db      	mvns	r3, r3
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040bc:	4013      	ands	r3, r2
 80040be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	2101      	movs	r1, #1
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	43db      	mvns	r3, r3
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040e0:	4013      	ands	r3, r2
 80040e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	0159      	lsls	r1, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	440b      	add	r3, r1
 80040fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040fe:	4619      	mov	r1, r3
 8004100:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <USB_DeactivateEndpoint+0x1b4>)
 8004102:	4013      	ands	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	ec337800 	.word	0xec337800
 8004118:	eff37800 	.word	0xeff37800

0800411c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	@ 0x28
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	2b01      	cmp	r3, #1
 800413a:	f040 817a 	bne.w	8004432 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d132      	bne.n	80041ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004160:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004164:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004184:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041a4:	0cdb      	lsrs	r3, r3, #19
 80041a6:	04db      	lsls	r3, r3, #19
 80041a8:	6113      	str	r3, [r2, #16]
 80041aa:	e092      	b.n	80042d2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	0151      	lsls	r1, r2, #5
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	440a      	add	r2, r1
 80041c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041c6:	0cdb      	lsrs	r3, r3, #19
 80041c8:	04db      	lsls	r3, r3, #19
 80041ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80041ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80041ee:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11a      	bne.n	800422c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d903      	bls.n	800420a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	0151      	lsls	r1, r2, #5
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	440a      	add	r2, r1
 8004220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004224:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004228:	6113      	str	r3, [r2, #16]
 800422a:	e01b      	b.n	8004264 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004238:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6919      	ldr	r1, [r3, #16]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	440b      	add	r3, r1
 8004244:	1e59      	subs	r1, r3, #1
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	fbb1 f3f3 	udiv	r3, r1, r3
 800424e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004250:	4ba2      	ldr	r3, [pc, #648]	@ (80044dc <USB_EPStartXfer+0x3c0>)
 8004252:	400b      	ands	r3, r1
 8004254:	69b9      	ldr	r1, [r7, #24]
 8004256:	0148      	lsls	r0, r1, #5
 8004258:	69f9      	ldr	r1, [r7, #28]
 800425a:	4401      	add	r1, r0
 800425c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004260:	4313      	orrs	r3, r2
 8004262:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427a:	69b9      	ldr	r1, [r7, #24]
 800427c:	0148      	lsls	r0, r1, #5
 800427e:	69f9      	ldr	r1, [r7, #28]
 8004280:	4401      	add	r1, r0
 8004282:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004286:	4313      	orrs	r3, r2
 8004288:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	791b      	ldrb	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d11f      	bne.n	80042d2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042ac:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80042b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d14b      	bne.n	8004370 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ec:	461a      	mov	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	791b      	ldrb	r3, [r3, #4]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d128      	bne.n	800434e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d110      	bne.n	800432e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	0151      	lsls	r1, r2, #5
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	440a      	add	r2, r1
 8004322:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004326:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	e00f      	b.n	800434e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	0151      	lsls	r1, r2, #5
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	440a      	add	r2, r1
 8004344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800434c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	440a      	add	r2, r1
 8004364:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004368:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e165      	b.n	800463c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	0151      	lsls	r1, r2, #5
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	440a      	add	r2, r1
 8004386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800438a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800438e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	791b      	ldrb	r3, [r3, #4]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d015      	beq.n	80043c4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 814d 	beq.w	800463c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	2101      	movs	r1, #1
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	69f9      	ldr	r1, [r7, #28]
 80043ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043be:	4313      	orrs	r3, r2
 80043c0:	634b      	str	r3, [r1, #52]	@ 0x34
 80043c2:	e13b      	b.n	800463c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d110      	bne.n	80043f6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	e00f      	b.n	8004416 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	0151      	lsls	r1, r2, #5
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	440a      	add	r2, r1
 800440c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004414:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	68d9      	ldr	r1, [r3, #12]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	b298      	uxth	r0, r3
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	4603      	mov	r3, r0
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f9b8 	bl	80047a0 <USB_WritePacket>
 8004430:	e104      	b.n	800463c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800444c:	0cdb      	lsrs	r3, r3, #19
 800444e:	04db      	lsls	r3, r3, #19
 8004450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800446c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004470:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004474:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d131      	bne.n	80044e0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	0148      	lsls	r0, r1, #5
 80044ae:	69f9      	ldr	r1, [r7, #28]
 80044b0:	4401      	add	r1, r0
 80044b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044b6:	4313      	orrs	r3, r2
 80044b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044d8:	6113      	str	r3, [r2, #16]
 80044da:	e061      	b.n	80045a0 <USB_EPStartXfer+0x484>
 80044dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d123      	bne.n	8004530 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fe:	69b9      	ldr	r1, [r7, #24]
 8004500:	0148      	lsls	r0, r1, #5
 8004502:	69f9      	ldr	r1, [r7, #28]
 8004504:	4401      	add	r1, r0
 8004506:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800450a:	4313      	orrs	r3, r2
 800450c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004528:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800452c:	6113      	str	r3, [r2, #16]
 800452e:	e037      	b.n	80045a0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4413      	add	r3, r2
 800453a:	1e5a      	subs	r2, r3, #1
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	8afa      	ldrh	r2, [r7, #22]
 800454c:	fb03 f202 	mul.w	r2, r3, r2
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	8afb      	ldrh	r3, [r7, #22]
 8004564:	04d9      	lsls	r1, r3, #19
 8004566:	4b38      	ldr	r3, [pc, #224]	@ (8004648 <USB_EPStartXfer+0x52c>)
 8004568:	400b      	ands	r3, r1
 800456a:	69b9      	ldr	r1, [r7, #24]
 800456c:	0148      	lsls	r0, r1, #5
 800456e:	69f9      	ldr	r1, [r7, #28]
 8004570:	4401      	add	r1, r0
 8004572:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004576:	4313      	orrs	r3, r2
 8004578:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004590:	69b9      	ldr	r1, [r7, #24]
 8004592:	0148      	lsls	r0, r1, #5
 8004594:	69f9      	ldr	r1, [r7, #28]
 8004596:	4401      	add	r1, r0
 8004598:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800459c:	4313      	orrs	r3, r2
 800459e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d10d      	bne.n	80045c2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	68d9      	ldr	r1, [r3, #12]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045be:	460a      	mov	r2, r1
 80045c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	791b      	ldrb	r3, [r3, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d128      	bne.n	800461c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d110      	bne.n	80045fc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00f      	b.n	800461c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800461a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004636:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800463a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	1ff80000 	.word	0x1ff80000

0800464c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d14a      	bne.n	8004700 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800467e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004682:	f040 8086 	bne.w	8004792 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	0151      	lsls	r1, r2, #5
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	440a      	add	r2, r1
 80046c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80046da:	4293      	cmp	r3, r2
 80046dc:	d902      	bls.n	80046e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	75fb      	strb	r3, [r7, #23]
          break;
 80046e2:	e056      	b.n	8004792 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046fc:	d0e7      	beq.n	80046ce <USB_EPStopXfer+0x82>
 80046fe:	e048      	b.n	8004792 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004718:	d13b      	bne.n	8004792 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004738:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800473c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800475c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004760:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800476e:	4293      	cmp	r3, r2
 8004770:	d902      	bls.n	8004778 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
          break;
 8004776:	e00c      	b.n	8004792 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800478c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004790:	d0e7      	beq.n	8004762 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004792:	7dfb      	ldrb	r3, [r7, #23]
}
 8004794:	4618      	mov	r0, r3
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	@ 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4611      	mov	r1, r2
 80047ac:	461a      	mov	r2, r3
 80047ae:	460b      	mov	r3, r1
 80047b0:	71fb      	strb	r3, [r7, #7]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d123      	bne.n	800480e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047c6:	88bb      	ldrh	r3, [r7, #4]
 80047c8:	3303      	adds	r3, #3
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	e018      	b.n	8004806 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	031a      	lsls	r2, r3, #12
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e0:	461a      	mov	r2, r3
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3301      	adds	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3301      	adds	r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	3301      	adds	r3, #1
 80047fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	3301      	adds	r3, #1
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	429a      	cmp	r2, r3
 800480c:	d3e2      	bcc.n	80047d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3724      	adds	r7, #36	@ 0x24
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800481c:	b480      	push	{r7}
 800481e:	b08b      	sub	sp, #44	@ 0x2c
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	089b      	lsrs	r3, r3, #2
 8004836:	b29b      	uxth	r3, r3
 8004838:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004842:	2300      	movs	r3, #0
 8004844:	623b      	str	r3, [r7, #32]
 8004846:	e014      	b.n	8004872 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	601a      	str	r2, [r3, #0]
    pDest++;
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	3301      	adds	r3, #1
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	3301      	adds	r3, #1
 800485e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	3301      	adds	r3, #1
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	3301      	adds	r3, #1
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	3301      	adds	r3, #1
 8004870:	623b      	str	r3, [r7, #32]
 8004872:	6a3a      	ldr	r2, [r7, #32]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	429a      	cmp	r2, r3
 8004878:	d3e6      	bcc.n	8004848 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800487a:	8bfb      	ldrh	r3, [r7, #30]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01e      	beq.n	80048be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800488a:	461a      	mov	r2, r3
 800488c:	f107 0310 	add.w	r3, r7, #16
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	701a      	strb	r2, [r3, #0]
      i++;
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	3301      	adds	r3, #1
 80048aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	3301      	adds	r3, #1
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80048b2:	8bfb      	ldrh	r3, [r7, #30]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048b8:	8bfb      	ldrh	r3, [r7, #30]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ea      	bne.n	8004894 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	372c      	adds	r7, #44	@ 0x2c
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	785b      	ldrb	r3, [r3, #1]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d12c      	bne.n	8004942 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	db12      	blt.n	8004920 <USB_EPSetStall+0x54>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00f      	beq.n	8004920 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800491a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800491e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800493a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e02b      	b.n	800499a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	db12      	blt.n	800497a <USB_EPSetStall+0xae>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00f      	beq.n	800497a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004974:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004978:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004994:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004998:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	785b      	ldrb	r3, [r3, #1]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d128      	bne.n	8004a16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	791b      	ldrb	r3, [r3, #4]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d003      	beq.n	80049f4 <USB_EPClearStall+0x4c>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	791b      	ldrb	r3, [r3, #4]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d138      	bne.n	8004a66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e027      	b.n	8004a66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	791b      	ldrb	r3, [r3, #4]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d003      	beq.n	8004a46 <USB_EPClearStall+0x9e>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	791b      	ldrb	r3, [r3, #4]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d10f      	bne.n	8004a66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a92:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aee:	f023 0302 	bic.w	r3, r3, #2
 8004af2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b1c:	f023 0303 	bic.w	r3, r3, #3
 8004b20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b30:	f043 0302 	orr.w	r3, r3, #2
 8004b34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	0c1b      	lsrs	r3, r3, #16
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	b29b      	uxth	r3, r3
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c00:	68bb      	ldr	r3, [r7, #8]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b087      	sub	sp, #28
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	01db      	lsls	r3, r3, #7
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0301 	and.w	r3, r3, #1
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b085      	sub	sp, #20
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ca4:	f023 0307 	bic.w	r3, r3, #7
 8004ca8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	333c      	adds	r3, #60	@ 0x3c
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4a26      	ldr	r2, [pc, #152]	@ (8004d84 <USB_EP0_OutStart+0xb8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d90a      	bls.n	8004d06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d00:	d101      	bne.n	8004d06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e037      	b.n	8004d76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	2300      	movs	r3, #0
 8004d10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d34:	f043 0318 	orr.w	r3, r3, #24
 8004d38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d48:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004d4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d4e:	7afb      	ldrb	r3, [r7, #11]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10f      	bne.n	8004d74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d6e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004d72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	4f54300a 	.word	0x4f54300a

08004d88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004da0:	d901      	bls.n	8004da6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e01b      	b.n	8004dde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	daf2      	bge.n	8004d94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f043 0201 	orr.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dca:	d901      	bls.n	8004dd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e006      	b.n	8004dde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d0f0      	beq.n	8004dbe <USB_CoreReset+0x36>

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004df8:	f44f 701d 	mov.w	r0, #628	@ 0x274
 8004dfc:	f003 ff5c 	bl	8008cb8 <USBD_static_malloc>
 8004e00:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	32b0      	adds	r2, #176	@ 0xb0
 8004e12:	2100      	movs	r1, #0
 8004e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e06e      	b.n	8004efa <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	32b0      	adds	r2, #176	@ 0xb0
 8004e26:	68f9      	ldr	r1, [r7, #12]
 8004e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	32b0      	adds	r2, #176	@ 0xb0
 8004e36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	7c1b      	ldrb	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d12b      	bne.n	8004ea0 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004e48:	4b2e      	ldr	r3, [pc, #184]	@ (8004f04 <USBD_MSC_Init+0x118>)
 8004e4a:	7819      	ldrb	r1, [r3, #0]
 8004e4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e50:	2202      	movs	r2, #2
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f003 fded 	bl	8008a32 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8004e58:	4b2a      	ldr	r3, [pc, #168]	@ (8004f04 <USBD_MSC_Init+0x118>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 020f 	and.w	r2, r3, #15
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e70:	2201      	movs	r2, #1
 8004e72:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004e74:	4b24      	ldr	r3, [pc, #144]	@ (8004f08 <USBD_MSC_Init+0x11c>)
 8004e76:	7819      	ldrb	r1, [r3, #0]
 8004e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f003 fdd7 	bl	8008a32 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004e84:	4b20      	ldr	r3, [pc, #128]	@ (8004f08 <USBD_MSC_Init+0x11c>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	f003 020f 	and.w	r2, r3, #15
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	3324      	adds	r3, #36	@ 0x24
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e028      	b.n	8004ef2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004ea0:	4b18      	ldr	r3, [pc, #96]	@ (8004f04 <USBD_MSC_Init+0x118>)
 8004ea2:	7819      	ldrb	r1, [r3, #0]
 8004ea4:	2340      	movs	r3, #64	@ 0x40
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f003 fdc2 	bl	8008a32 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8004eae:	4b15      	ldr	r3, [pc, #84]	@ (8004f04 <USBD_MSC_Init+0x118>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	f003 020f 	and.w	r2, r3, #15
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004eca:	4b0f      	ldr	r3, [pc, #60]	@ (8004f08 <USBD_MSC_Init+0x11c>)
 8004ecc:	7819      	ldrb	r1, [r3, #0]
 8004ece:	2340      	movs	r3, #64	@ 0x40
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f003 fdad 	bl	8008a32 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f08 <USBD_MSC_Init+0x11c>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f003 020f 	and.w	r2, r3, #15
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3324      	adds	r3, #36	@ 0x24
 8004eee:	2201      	movs	r2, #1
 8004ef0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fa2c 	bl	8005350 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	2000006f 	.word	0x2000006f
 8004f08:	2000006e 	.word	0x2000006e

08004f0c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8004f18:	4b26      	ldr	r3, [pc, #152]	@ (8004fb4 <USBD_MSC_DeInit+0xa8>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f003 fdad 	bl	8008a7e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8004f24:	4b23      	ldr	r3, [pc, #140]	@ (8004fb4 <USBD_MSC_DeInit+0xa8>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	f003 020f 	and.w	r2, r3, #15
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8004f40:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb8 <USBD_MSC_DeInit+0xac>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f003 fd99 	bl	8008a7e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb8 <USBD_MSC_DeInit+0xac>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f003 020f 	and.w	r2, r3, #15
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	3324      	adds	r3, #36	@ 0x24
 8004f62:	2200      	movs	r2, #0
 8004f64:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	32b0      	adds	r2, #176	@ 0xb0
 8004f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d018      	beq.n	8004faa <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fa67 	bl	800544c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	32b0      	adds	r2, #176	@ 0xb0
 8004f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f003 fea1 	bl	8008cd4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	32b0      	adds	r2, #176	@ 0xb0
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	2000006f 	.word	0x2000006f
 8004fb8:	2000006e 	.word	0x2000006e

08004fbc <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	32b0      	adds	r2, #176	@ 0xb0
 8004fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e0e1      	b.n	80051ac <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d053      	beq.n	800509c <USBD_MSC_Setup+0xe0>
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	f040 80d1 	bne.w	800519c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2bfe      	cmp	r3, #254	@ 0xfe
 8005000:	d002      	beq.n	8005008 <USBD_MSC_Setup+0x4c>
 8005002:	2bff      	cmp	r3, #255	@ 0xff
 8005004:	d02a      	beq.n	800505c <USBD_MSC_Setup+0xa0>
 8005006:	e041      	b.n	800508c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	885b      	ldrh	r3, [r3, #2]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11e      	bne.n	800504e <USBD_MSC_Setup+0x92>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	88db      	ldrh	r3, [r3, #6]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d11a      	bne.n	800504e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800501e:	2b00      	cmp	r3, #0
 8005020:	da15      	bge.n	800504e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	33b0      	adds	r3, #176	@ 0xb0
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	4798      	blx	r3
 8005036:	4603      	mov	r3, r0
 8005038:	461a      	mov	r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2201      	movs	r2, #1
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f003 f927 	bl	8008298 <USBD_CtlSendData>
 800504a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800504c:	e025      	b.n	800509a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f003 f8b0 	bl	80081b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005056:	2303      	movs	r3, #3
 8005058:	75fb      	strb	r3, [r7, #23]
          break;
 800505a:	e01e      	b.n	800509a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	885b      	ldrh	r3, [r3, #2]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10c      	bne.n	800507e <USBD_MSC_Setup+0xc2>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	88db      	ldrh	r3, [r3, #6]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d108      	bne.n	800507e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005072:	2b00      	cmp	r3, #0
 8005074:	db03      	blt.n	800507e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f9b4 	bl	80053e4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800507c:	e00d      	b.n	800509a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f003 f898 	bl	80081b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005086:	2303      	movs	r3, #3
 8005088:	75fb      	strb	r3, [r7, #23]
          break;
 800508a:	e006      	b.n	800509a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800508c:	6839      	ldr	r1, [r7, #0]
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f003 f891 	bl	80081b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005094:	2303      	movs	r3, #3
 8005096:	75fb      	strb	r3, [r7, #23]
          break;
 8005098:	bf00      	nop
      }
      break;
 800509a:	e086      	b.n	80051aa <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b0b      	cmp	r3, #11
 80050a2:	d872      	bhi.n	800518a <USBD_MSC_Setup+0x1ce>
 80050a4:	a201      	add	r2, pc, #4	@ (adr r2, 80050ac <USBD_MSC_Setup+0xf0>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050dd 	.word	0x080050dd
 80050b0:	08005159 	.word	0x08005159
 80050b4:	0800518b 	.word	0x0800518b
 80050b8:	0800518b 	.word	0x0800518b
 80050bc:	0800518b 	.word	0x0800518b
 80050c0:	0800518b 	.word	0x0800518b
 80050c4:	0800518b 	.word	0x0800518b
 80050c8:	0800518b 	.word	0x0800518b
 80050cc:	0800518b 	.word	0x0800518b
 80050d0:	0800518b 	.word	0x0800518b
 80050d4:	08005107 	.word	0x08005107
 80050d8:	08005131 	.word	0x08005131
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d107      	bne.n	80050f8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80050e8:	f107 030e 	add.w	r3, r7, #14
 80050ec:	2202      	movs	r2, #2
 80050ee:	4619      	mov	r1, r3
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f003 f8d1 	bl	8008298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050f6:	e050      	b.n	800519a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f003 f85b 	bl	80081b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005100:	2303      	movs	r3, #3
 8005102:	75fb      	strb	r3, [r7, #23]
          break;
 8005104:	e049      	b.n	800519a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b03      	cmp	r3, #3
 8005110:	d107      	bne.n	8005122 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3304      	adds	r3, #4
 8005116:	2201      	movs	r2, #1
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f003 f8bc 	bl	8008298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005120:	e03b      	b.n	800519a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f003 f846 	bl	80081b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800512a:	2303      	movs	r3, #3
 800512c:	75fb      	strb	r3, [r7, #23]
          break;
 800512e:	e034      	b.n	800519a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b03      	cmp	r3, #3
 800513a:	d106      	bne.n	800514a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	885b      	ldrh	r3, [r3, #2]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005148:	e027      	b.n	800519a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800514a:	6839      	ldr	r1, [r7, #0]
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f003 f832 	bl	80081b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005152:	2303      	movs	r3, #3
 8005154:	75fb      	strb	r3, [r7, #23]
          break;
 8005156:	e020      	b.n	800519a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b03      	cmp	r3, #3
 8005162:	d119      	bne.n	8005198 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	885b      	ldrh	r3, [r3, #2]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d115      	bne.n	8005198 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	889b      	ldrh	r3, [r3, #4]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f003 fca1 	bl	8008abc <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	889b      	ldrh	r3, [r3, #4]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fb2e 	bl	80057e4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8005188:	e006      	b.n	8005198 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f003 f812 	bl	80081b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005192:	2303      	movs	r3, #3
 8005194:	75fb      	strb	r3, [r7, #23]
          break;
 8005196:	e000      	b.n	800519a <USBD_MSC_Setup+0x1de>
          break;
 8005198:	bf00      	nop
      }
      break;
 800519a:	e006      	b.n	80051aa <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f003 f809 	bl	80081b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80051a4:	2303      	movs	r3, #3
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f959 	bl	800547c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f983 	bl	80054f0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80051fc:	2181      	movs	r1, #129	@ 0x81
 80051fe:	4812      	ldr	r0, [pc, #72]	@ (8005248 <USBD_MSC_GetHSCfgDesc+0x54>)
 8005200:	f002 f9a4 	bl	800754c <USBD_GetEpDesc>
 8005204:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005206:	2101      	movs	r1, #1
 8005208:	480f      	ldr	r0, [pc, #60]	@ (8005248 <USBD_MSC_GetHSCfgDesc+0x54>)
 800520a:	f002 f99f 	bl	800754c <USBD_GetEpDesc>
 800520e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d006      	beq.n	8005224 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	711a      	strb	r2, [r3, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f042 0202 	orr.w	r2, r2, #2
 8005222:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d006      	beq.n	8005238 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	711a      	strb	r2, [r3, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f042 0202 	orr.w	r2, r2, #2
 8005236:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800523e:	4b02      	ldr	r3, [pc, #8]	@ (8005248 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000044 	.word	0x20000044

0800524c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8005254:	2181      	movs	r1, #129	@ 0x81
 8005256:	4812      	ldr	r0, [pc, #72]	@ (80052a0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8005258:	f002 f978 	bl	800754c <USBD_GetEpDesc>
 800525c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800525e:	2101      	movs	r1, #1
 8005260:	480f      	ldr	r0, [pc, #60]	@ (80052a0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8005262:	f002 f973 	bl	800754c <USBD_GetEpDesc>
 8005266:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d006      	beq.n	800527c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005276:	711a      	strb	r2, [r3, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d006      	beq.n	8005290 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2200      	movs	r2, #0
 8005286:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800528a:	711a      	strb	r2, [r3, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8005296:	4b02      	ldr	r3, [pc, #8]	@ (80052a0 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000044 	.word	0x20000044

080052a4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80052ac:	2181      	movs	r1, #129	@ 0x81
 80052ae:	4812      	ldr	r0, [pc, #72]	@ (80052f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80052b0:	f002 f94c 	bl	800754c <USBD_GetEpDesc>
 80052b4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80052b6:	2101      	movs	r1, #1
 80052b8:	480f      	ldr	r0, [pc, #60]	@ (80052f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80052ba:	f002 f947 	bl	800754c <USBD_GetEpDesc>
 80052be:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d006      	beq.n	80052d4 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052ce:	711a      	strb	r2, [r3, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d006      	beq.n	80052e8 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2200      	movs	r2, #0
 80052de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052e2:	711a      	strb	r2, [r3, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80052ee:	4b02      	ldr	r3, [pc, #8]	@ (80052f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20000044 	.word	0x20000044

080052fc <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	220a      	movs	r2, #10
 8005308:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800530a:	4b03      	ldr	r3, [pc, #12]	@ (8005318 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	20000064 	.word	0x20000064

0800531c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800532c:	2303      	movs	r3, #3
 800532e:	e009      	b.n	8005344 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	33b0      	adds	r3, #176	@ 0xb0
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	32b0      	adds	r2, #176	@ 0xb0
 8005362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005366:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d032      	beq.n	80053d4 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	33b0      	adds	r3, #176	@ 0xb0
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2000      	movs	r0, #0
 80053a6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80053a8:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <MSC_BOT_Init+0x8c>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f003 fb84 	bl	8008abc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80053b4:	4b0a      	ldr	r3, [pc, #40]	@ (80053e0 <MSC_BOT_Init+0x90>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f003 fb7e 	bl	8008abc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80053c0:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <MSC_BOT_Init+0x8c>)
 80053c2:	7819      	ldrb	r1, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80053ca:	231f      	movs	r3, #31
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f003 fc3e 	bl	8008c4e <USBD_LL_PrepareReceive>
 80053d2:	e000      	b.n	80053d6 <MSC_BOT_Init+0x86>
    return;
 80053d4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	2000006f 	.word	0x2000006f
 80053e0:	2000006e 	.word	0x2000006e

080053e4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	32b0      	adds	r2, #176	@ 0xb0
 80053f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01b      	beq.n	800543a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800540e:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <MSC_BOT_Reset+0x60>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f003 fb8f 	bl	8008b38 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800541a:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <MSC_BOT_Reset+0x64>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f003 fb89 	bl	8008b38 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005426:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <MSC_BOT_Reset+0x64>)
 8005428:	7819      	ldrb	r1, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005430:	231f      	movs	r3, #31
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f003 fc0b 	bl	8008c4e <USBD_LL_PrepareReceive>
 8005438:	e000      	b.n	800543c <MSC_BOT_Reset+0x58>
    return;
 800543a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	2000006e 	.word	0x2000006e
 8005448:	2000006f 	.word	0x2000006f

0800544c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	32b0      	adds	r2, #176	@ 0xb0
 800545e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005462:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	721a      	strb	r2, [r3, #8]
  }
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	32b0      	adds	r2, #176	@ 0xb0
 8005492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005496:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d020      	beq.n	80054e0 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	7a1b      	ldrb	r3, [r3, #8]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d005      	beq.n	80054b2 <MSC_BOT_DataIn+0x36>
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	db1c      	blt.n	80054e4 <MSC_BOT_DataIn+0x68>
 80054aa:	3b03      	subs	r3, #3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d819      	bhi.n	80054e4 <MSC_BOT_DataIn+0x68>
 80054b0:	e011      	b.n	80054d6 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80054be:	461a      	mov	r2, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f9c9 	bl	8005858 <SCSI_ProcessCmd>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	da0d      	bge.n	80054e8 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80054cc:	2101      	movs	r1, #1
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f90c 	bl	80056ec <MSC_BOT_SendCSW>
      }
      break;
 80054d4:	e008      	b.n	80054e8 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80054d6:	2100      	movs	r1, #0
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f907 	bl	80056ec <MSC_BOT_SendCSW>
      break;
 80054de:	e004      	b.n	80054ea <MSC_BOT_DataIn+0x6e>
    return;
 80054e0:	bf00      	nop
 80054e2:	e002      	b.n	80054ea <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80054e4:	bf00      	nop
 80054e6:	e000      	b.n	80054ea <MSC_BOT_DataIn+0x6e>
      break;
 80054e8:	bf00      	nop
  }
}
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	32b0      	adds	r2, #176	@ 0xb0
 8005506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01c      	beq.n	800554c <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	7a1b      	ldrb	r3, [r3, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <MSC_BOT_DataOut+0x30>
 800551a:	2b01      	cmp	r3, #1
 800551c:	d004      	beq.n	8005528 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800551e:	e018      	b.n	8005552 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f819 	bl	8005558 <MSC_BOT_CBW_Decode>
      break;
 8005526:	e014      	b.n	8005552 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8005534:	461a      	mov	r2, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f98e 	bl	8005858 <SCSI_ProcessCmd>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	da06      	bge.n	8005550 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005542:	2101      	movs	r1, #1
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f8d1 	bl	80056ec <MSC_BOT_SendCSW>
      break;
 800554a:	e001      	b.n	8005550 <MSC_BOT_DataOut+0x60>
    return;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <MSC_BOT_DataOut+0x62>
      break;
 8005550:	bf00      	nop
  }
}
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	32b0      	adds	r2, #176	@ 0xb0
 800556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d079      	beq.n	800566a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800558e:	4b3a      	ldr	r3, [pc, #232]	@ (8005678 <MSC_BOT_CBW_Decode+0x120>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f003 fb7b 	bl	8008c90 <USBD_LL_GetRxDataSize>
 800559a:	4603      	mov	r3, r0
 800559c:	2b1f      	cmp	r3, #31
 800559e:	d114      	bne.n	80055ca <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80055a6:	4a35      	ldr	r2, [pc, #212]	@ (800567c <MSC_BOT_CBW_Decode+0x124>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d10e      	bne.n	80055ca <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d809      	bhi.n	80055ca <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d004      	beq.n	80055ca <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80055c6:	2b10      	cmp	r3, #16
 80055c8:	d90e      	bls.n	80055e8 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80055d0:	2320      	movs	r3, #32
 80055d2:	2205      	movs	r2, #5
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fe54 	bl	8006282 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2202      	movs	r2, #2
 80055de:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f8bd 	bl	8005760 <MSC_BOT_Abort>
 80055e6:	e043      	b.n	8005670 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80055f4:	461a      	mov	r2, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f92e 	bl	8005858 <SCSI_ProcessCmd>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	da0c      	bge.n	800561c <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	7a1b      	ldrb	r3, [r3, #8]
 8005606:	2b05      	cmp	r3, #5
 8005608:	d104      	bne.n	8005614 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800560a:	2101      	movs	r1, #1
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f86d 	bl	80056ec <MSC_BOT_SendCSW>
 8005612:	e02d      	b.n	8005670 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f8a3 	bl	8005760 <MSC_BOT_Abort>
 800561a:	e029      	b.n	8005670 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	7a1b      	ldrb	r3, [r3, #8]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d024      	beq.n	800566e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005628:	2b01      	cmp	r3, #1
 800562a:	d020      	beq.n	800566e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005630:	2b03      	cmp	r3, #3
 8005632:	d01c      	beq.n	800566e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f103 0110 	add.w	r1, r3, #16
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	461a      	mov	r2, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f819 	bl	8005680 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800564e:	e00f      	b.n	8005670 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005658:	2100      	movs	r1, #0
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f846 	bl	80056ec <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005660:	e006      	b.n	8005670 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f87c 	bl	8005760 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005668:	e002      	b.n	8005670 <MSC_BOT_CBW_Decode+0x118>
    return;
 800566a:	bf00      	nop
 800566c:	e000      	b.n	8005670 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800566e:	bf00      	nop
    }
  }
}
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	2000006f 	.word	0x2000006f
 800567c:	43425355 	.word	0x43425355

08005680 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	32b0      	adds	r2, #176	@ 0xb0
 8005696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01e      	beq.n	80056e0 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	4293      	cmp	r3, r2
 80056ac:	bf28      	it	cs
 80056ae:	4613      	movcs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	1ad2      	subs	r2, r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2204      	movs	r2, #4
 80056ce:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80056d0:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <MSC_BOT_SendData+0x68>)
 80056d2:	7819      	ldrb	r1, [r3, #0]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f003 fa97 	bl	8008c0c <USBD_LL_Transmit>
 80056de:	e000      	b.n	80056e2 <MSC_BOT_SendData+0x62>
    return;
 80056e0:	bf00      	nop
}
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	2000006e 	.word	0x2000006e

080056ec <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	32b0      	adds	r2, #176	@ 0xb0
 8005702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005706:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01d      	beq.n	800574a <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a10      	ldr	r2, [pc, #64]	@ (8005754 <MSC_BOT_SendCSW+0x68>)
 8005712:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	78fa      	ldrb	r2, [r7, #3]
 800571a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8005724:	4b0c      	ldr	r3, [pc, #48]	@ (8005758 <MSC_BOT_SendCSW+0x6c>)
 8005726:	7819      	ldrb	r1, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800572e:	230d      	movs	r3, #13
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f003 fa6b 	bl	8008c0c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005736:	4b09      	ldr	r3, [pc, #36]	@ (800575c <MSC_BOT_SendCSW+0x70>)
 8005738:	7819      	ldrb	r1, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005740:	231f      	movs	r3, #31
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f003 fa83 	bl	8008c4e <USBD_LL_PrepareReceive>
 8005748:	e000      	b.n	800574c <MSC_BOT_SendCSW+0x60>
    return;
 800574a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	53425355 	.word	0x53425355
 8005758:	2000006e 	.word	0x2000006e
 800575c:	2000006f 	.word	0x2000006f

08005760 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	32b0      	adds	r2, #176	@ 0xb0
 8005772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005776:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d02a      	beq.n	80057d4 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10e      	bne.n	80057a6 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800579a:	4b10      	ldr	r3, [pc, #64]	@ (80057dc <MSC_BOT_Abort+0x7c>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f003 f9aa 	bl	8008afa <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80057a6:	4b0e      	ldr	r3, [pc, #56]	@ (80057e0 <MSC_BOT_Abort+0x80>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f003 f9a4 	bl	8008afa <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	7a5b      	ldrb	r3, [r3, #9]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d10d      	bne.n	80057d6 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80057ba:	4b09      	ldr	r3, [pc, #36]	@ (80057e0 <MSC_BOT_Abort+0x80>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f003 f99a 	bl	8008afa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80057c6:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <MSC_BOT_Abort+0x7c>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f003 f994 	bl	8008afa <USBD_LL_StallEP>
 80057d2:	e000      	b.n	80057d6 <MSC_BOT_Abort+0x76>
    return;
 80057d4:	bf00      	nop
  }
}
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	2000006f 	.word	0x2000006f
 80057e0:	2000006e 	.word	0x2000006e

080057e4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	32b0      	adds	r2, #176	@ 0xb0
 80057fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01d      	beq.n	8005842 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	7a5b      	ldrb	r3, [r3, #9]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d10c      	bne.n	8005828 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800580e:	4b10      	ldr	r3, [pc, #64]	@ (8005850 <MSC_BOT_CplClrFeature+0x6c>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f003 f970 	bl	8008afa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800581a:	4b0e      	ldr	r3, [pc, #56]	@ (8005854 <MSC_BOT_CplClrFeature+0x70>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f003 f96a 	bl	8008afa <USBD_LL_StallEP>
 8005826:	e00f      	b.n	8005848 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800582c:	2b00      	cmp	r3, #0
 800582e:	da0a      	bge.n	8005846 <MSC_BOT_CplClrFeature+0x62>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	7a5b      	ldrb	r3, [r3, #9]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d006      	beq.n	8005846 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005838:	2101      	movs	r1, #1
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ff56 	bl	80056ec <MSC_BOT_SendCSW>
 8005840:	e002      	b.n	8005848 <MSC_BOT_CplClrFeature+0x64>
    return;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8005846:	bf00      	nop
  }
}
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	2000006e 	.word	0x2000006e
 8005854:	2000006f 	.word	0x2000006f

08005858 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	460b      	mov	r3, r1
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	32b0      	adds	r2, #176	@ 0xb0
 8005870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005874:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800587c:	f04f 33ff 	mov.w	r3, #4294967295
 8005880:	e168      	b.n	8005b54 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2baa      	cmp	r3, #170	@ 0xaa
 8005888:	f000 8144 	beq.w	8005b14 <SCSI_ProcessCmd+0x2bc>
 800588c:	2baa      	cmp	r3, #170	@ 0xaa
 800588e:	f300 8153 	bgt.w	8005b38 <SCSI_ProcessCmd+0x2e0>
 8005892:	2ba8      	cmp	r3, #168	@ 0xa8
 8005894:	f000 812c 	beq.w	8005af0 <SCSI_ProcessCmd+0x298>
 8005898:	2ba8      	cmp	r3, #168	@ 0xa8
 800589a:	f300 814d 	bgt.w	8005b38 <SCSI_ProcessCmd+0x2e0>
 800589e:	2b5a      	cmp	r3, #90	@ 0x5a
 80058a0:	f300 80c0 	bgt.w	8005a24 <SCSI_ProcessCmd+0x1cc>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f2c0 8147 	blt.w	8005b38 <SCSI_ProcessCmd+0x2e0>
 80058aa:	2b5a      	cmp	r3, #90	@ 0x5a
 80058ac:	f200 8144 	bhi.w	8005b38 <SCSI_ProcessCmd+0x2e0>
 80058b0:	a201      	add	r2, pc, #4	@ (adr r2, 80058b8 <SCSI_ProcessCmd+0x60>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	08005a2b 	.word	0x08005a2b
 80058bc:	08005b39 	.word	0x08005b39
 80058c0:	08005b39 	.word	0x08005b39
 80058c4:	08005a3d 	.word	0x08005a3d
 80058c8:	08005b39 	.word	0x08005b39
 80058cc:	08005b39 	.word	0x08005b39
 80058d0:	08005b39 	.word	0x08005b39
 80058d4:	08005b39 	.word	0x08005b39
 80058d8:	08005b39 	.word	0x08005b39
 80058dc:	08005b39 	.word	0x08005b39
 80058e0:	08005b39 	.word	0x08005b39
 80058e4:	08005b39 	.word	0x08005b39
 80058e8:	08005b39 	.word	0x08005b39
 80058ec:	08005b39 	.word	0x08005b39
 80058f0:	08005b39 	.word	0x08005b39
 80058f4:	08005b39 	.word	0x08005b39
 80058f8:	08005b39 	.word	0x08005b39
 80058fc:	08005b39 	.word	0x08005b39
 8005900:	08005a4f 	.word	0x08005a4f
 8005904:	08005b39 	.word	0x08005b39
 8005908:	08005b39 	.word	0x08005b39
 800590c:	08005b39 	.word	0x08005b39
 8005910:	08005b39 	.word	0x08005b39
 8005914:	08005b39 	.word	0x08005b39
 8005918:	08005b39 	.word	0x08005b39
 800591c:	08005b39 	.word	0x08005b39
 8005920:	08005a85 	.word	0x08005a85
 8005924:	08005a61 	.word	0x08005a61
 8005928:	08005b39 	.word	0x08005b39
 800592c:	08005b39 	.word	0x08005b39
 8005930:	08005a73 	.word	0x08005a73
 8005934:	08005b39 	.word	0x08005b39
 8005938:	08005b39 	.word	0x08005b39
 800593c:	08005b39 	.word	0x08005b39
 8005940:	08005b39 	.word	0x08005b39
 8005944:	08005aa9 	.word	0x08005aa9
 8005948:	08005b39 	.word	0x08005b39
 800594c:	08005abb 	.word	0x08005abb
 8005950:	08005b39 	.word	0x08005b39
 8005954:	08005b39 	.word	0x08005b39
 8005958:	08005adf 	.word	0x08005adf
 800595c:	08005b39 	.word	0x08005b39
 8005960:	08005b03 	.word	0x08005b03
 8005964:	08005b39 	.word	0x08005b39
 8005968:	08005b39 	.word	0x08005b39
 800596c:	08005b39 	.word	0x08005b39
 8005970:	08005b39 	.word	0x08005b39
 8005974:	08005b27 	.word	0x08005b27
 8005978:	08005b39 	.word	0x08005b39
 800597c:	08005b39 	.word	0x08005b39
 8005980:	08005b39 	.word	0x08005b39
 8005984:	08005b39 	.word	0x08005b39
 8005988:	08005b39 	.word	0x08005b39
 800598c:	08005b39 	.word	0x08005b39
 8005990:	08005b39 	.word	0x08005b39
 8005994:	08005b39 	.word	0x08005b39
 8005998:	08005b39 	.word	0x08005b39
 800599c:	08005b39 	.word	0x08005b39
 80059a0:	08005b39 	.word	0x08005b39
 80059a4:	08005b39 	.word	0x08005b39
 80059a8:	08005b39 	.word	0x08005b39
 80059ac:	08005b39 	.word	0x08005b39
 80059b0:	08005b39 	.word	0x08005b39
 80059b4:	08005b39 	.word	0x08005b39
 80059b8:	08005b39 	.word	0x08005b39
 80059bc:	08005b39 	.word	0x08005b39
 80059c0:	08005b39 	.word	0x08005b39
 80059c4:	08005b39 	.word	0x08005b39
 80059c8:	08005b39 	.word	0x08005b39
 80059cc:	08005b39 	.word	0x08005b39
 80059d0:	08005b39 	.word	0x08005b39
 80059d4:	08005b39 	.word	0x08005b39
 80059d8:	08005b39 	.word	0x08005b39
 80059dc:	08005b39 	.word	0x08005b39
 80059e0:	08005b39 	.word	0x08005b39
 80059e4:	08005b39 	.word	0x08005b39
 80059e8:	08005b39 	.word	0x08005b39
 80059ec:	08005b39 	.word	0x08005b39
 80059f0:	08005b39 	.word	0x08005b39
 80059f4:	08005b39 	.word	0x08005b39
 80059f8:	08005b39 	.word	0x08005b39
 80059fc:	08005b39 	.word	0x08005b39
 8005a00:	08005b39 	.word	0x08005b39
 8005a04:	08005b39 	.word	0x08005b39
 8005a08:	08005b39 	.word	0x08005b39
 8005a0c:	08005b39 	.word	0x08005b39
 8005a10:	08005b39 	.word	0x08005b39
 8005a14:	08005b39 	.word	0x08005b39
 8005a18:	08005b39 	.word	0x08005b39
 8005a1c:	08005b39 	.word	0x08005b39
 8005a20:	08005a97 	.word	0x08005a97
 8005a24:	2b9e      	cmp	r3, #158	@ 0x9e
 8005a26:	d051      	beq.n	8005acc <SCSI_ProcessCmd+0x274>
 8005a28:	e086      	b.n	8005b38 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8005a2a:	7afb      	ldrb	r3, [r7, #11]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f893 	bl	8005b5c <SCSI_TestUnitReady>
 8005a36:	4603      	mov	r3, r0
 8005a38:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3a:	e089      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8005a3c:	7afb      	ldrb	r3, [r7, #11]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4619      	mov	r1, r3
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fb9a 	bl	800617c <SCSI_RequestSense>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a4c:	e080      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	4619      	mov	r1, r3
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f8db 	bl	8005c10 <SCSI_Inquiry>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5e:	e077      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	4619      	mov	r1, r3
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fc56 	bl	8006318 <SCSI_StartStopUnit>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a70:	e06e      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8005a72:	7afb      	ldrb	r3, [r7, #11]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4619      	mov	r1, r3
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 fca2 	bl	80063c2 <SCSI_AllowPreventRemovable>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	75fb      	strb	r3, [r7, #23]
      break;
 8005a82:	e065      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8005a84:	7afb      	ldrb	r3, [r7, #11]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 faea 	bl	8006064 <SCSI_ModeSense6>
 8005a90:	4603      	mov	r3, r0
 8005a92:	75fb      	strb	r3, [r7, #23]
      break;
 8005a94:	e05c      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8005a96:	7afb      	ldrb	r3, [r7, #11]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fb27 	bl	80060f0 <SCSI_ModeSense10>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa6:	e053      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005aa8:	7afb      	ldrb	r3, [r7, #11]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4619      	mov	r1, r3
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fa5c 	bl	8005f6c <SCSI_ReadFormatCapacity>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab8:	e04a      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f921 	bl	8005d08 <SCSI_ReadCapacity10>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aca:	e041      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8005acc:	7afb      	ldrb	r3, [r7, #11]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f996 	bl	8005e04 <SCSI_ReadCapacity16>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	75fb      	strb	r3, [r7, #23]
      break;
 8005adc:	e038      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8005ade:	7afb      	ldrb	r3, [r7, #11]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fc99 	bl	800641c <SCSI_Read10>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75fb      	strb	r3, [r7, #23]
      break;
 8005aee:	e02f      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8005af0:	7afb      	ldrb	r3, [r7, #11]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	4619      	mov	r1, r3
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fd3a 	bl	8006570 <SCSI_Read12>
 8005afc:	4603      	mov	r3, r0
 8005afe:	75fb      	strb	r3, [r7, #23]
      break;
 8005b00:	e026      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8005b02:	7afb      	ldrb	r3, [r7, #11]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	4619      	mov	r1, r3
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fde5 	bl	80066d8 <SCSI_Write10>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	75fb      	strb	r3, [r7, #23]
      break;
 8005b12:	e01d      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8005b14:	7afb      	ldrb	r3, [r7, #11]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 feb2 	bl	8006884 <SCSI_Write12>
 8005b20:	4603      	mov	r3, r0
 8005b22:	75fb      	strb	r3, [r7, #23]
      break;
 8005b24:	e014      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8005b26:	7afb      	ldrb	r3, [r7, #11]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 ff8f 	bl	8006a50 <SCSI_Verify10>
 8005b32:	4603      	mov	r3, r0
 8005b34:	75fb      	strb	r3, [r7, #23]
      break;
 8005b36:	e00b      	b.n	8005b50 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005b38:	7af9      	ldrb	r1, [r7, #11]
 8005b3a:	2320      	movs	r3, #32
 8005b3c:	2205      	movs	r2, #5
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fb9f 	bl	8006282 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2202      	movs	r2, #2
 8005b48:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8005b4a:	23ff      	movs	r3, #255	@ 0xff
 8005b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b4e:	bf00      	nop
  }

  return ret;
 8005b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	460b      	mov	r3, r1
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	32b0      	adds	r2, #176	@ 0xb0
 8005b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b78:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8005b80:	f04f 33ff 	mov.w	r3, #4294967295
 8005b84:	e03f      	b.n	8005c06 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005b96:	2320      	movs	r3, #32
 8005b98:	2205      	movs	r2, #5
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 fb71 	bl	8006282 <SCSI_SenseCode>

    return -1;
 8005ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba4:	e02f      	b.n	8005c06 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d10b      	bne.n	8005bc8 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005bb0:	7af9      	ldrb	r1, [r7, #11]
 8005bb2:	233a      	movs	r3, #58	@ 0x3a
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fb63 	bl	8006282 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2205      	movs	r2, #5
 8005bc0:	721a      	strb	r2, [r3, #8]
    return -1;
 8005bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc6:	e01e      	b.n	8005c06 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	33b0      	adds	r3, #176	@ 0xb0
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	7afa      	ldrb	r2, [r7, #11]
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4798      	blx	r3
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005be6:	7af9      	ldrb	r1, [r7, #11]
 8005be8:	233a      	movs	r3, #58	@ 0x3a
 8005bea:	2202      	movs	r2, #2
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fb48 	bl	8006282 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2205      	movs	r2, #5
 8005bf6:	721a      	strb	r2, [r3, #8]

    return -1;
 8005bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfc:	e003      	b.n	8005c06 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2200      	movs	r2, #0
 8005c02:	60da      	str	r2, [r3, #12]

  return 0;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	32b0      	adds	r2, #176	@ 0xb0
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8005c34:	f04f 33ff 	mov.w	r3, #4294967295
 8005c38:	e05e      	b.n	8005cf8 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005c4a:	2320      	movs	r3, #32
 8005c4c:	2205      	movs	r2, #5
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fb17 	bl	8006282 <SCSI_SenseCode>
    return -1;
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295
 8005c58:	e04e      	b.n	8005cf8 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d020      	beq.n	8005caa <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d105      	bne.n	8005c7e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005c72:	2206      	movs	r2, #6
 8005c74:	4922      	ldr	r1, [pc, #136]	@ (8005d00 <SCSI_Inquiry+0xf0>)
 8005c76:	69b8      	ldr	r0, [r7, #24]
 8005c78:	f001 f870 	bl	8006d5c <SCSI_UpdateBotData>
 8005c7c:	e03b      	b.n	8005cf6 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3302      	adds	r3, #2
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b80      	cmp	r3, #128	@ 0x80
 8005c86:	d105      	bne.n	8005c94 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005c88:	2208      	movs	r2, #8
 8005c8a:	491e      	ldr	r1, [pc, #120]	@ (8005d04 <SCSI_Inquiry+0xf4>)
 8005c8c:	69b8      	ldr	r0, [r7, #24]
 8005c8e:	f001 f865 	bl	8006d5c <SCSI_UpdateBotData>
 8005c92:	e030      	b.n	8005cf6 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005c9a:	2324      	movs	r3, #36	@ 0x24
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 faef 	bl	8006282 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca8:	e026      	b.n	8005cf8 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	33b0      	adds	r3, #176	@ 0xb0
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	7afa      	ldrb	r2, [r7, #11]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8005cc6:	440b      	add	r3, r1
 8005cc8:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	3305      	adds	r3, #5
 8005cd2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	8bfb      	ldrh	r3, [r7, #30]
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d303      	bcc.n	8005cea <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8005cea:	8bfb      	ldrh	r3, [r7, #30]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6979      	ldr	r1, [r7, #20]
 8005cf0:	69b8      	ldr	r0, [r7, #24]
 8005cf2:	f001 f833 	bl	8006d5c <SCSI_UpdateBotData>
  }

  return 0;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000070 	.word	0x20000070
 8005d04:	20000078 	.word	0x20000078

08005d08 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	460b      	mov	r3, r1
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	32b0      	adds	r2, #176	@ 0xb0
 8005d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d24:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d30:	e064      	b.n	8005dfc <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	33b0      	adds	r3, #176	@ 0xb0
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8005d50:	7af8      	ldrb	r0, [r7, #11]
 8005d52:	4798      	blx	r3
 8005d54:	4603      	mov	r3, r0
 8005d56:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005d58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d104      	bne.n	8005d6a <SCSI_ReadCapacity10+0x62>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d108      	bne.n	8005d7c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005d6a:	7af9      	ldrb	r1, [r7, #11]
 8005d6c:	233a      	movs	r3, #58	@ 0x3a
 8005d6e:	2202      	movs	r2, #2
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fa86 	bl	8006282 <SCSI_SenseCode>
    return -1;
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7a:	e03f      	b.n	8005dfc <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005d82:	3b01      	subs	r3, #1
 8005d84:	0e1b      	lsrs	r3, r3, #24
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005d92:	3b01      	subs	r3, #1
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005da2:	3b01      	subs	r3, #1
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005dc2:	161b      	asrs	r3, r3, #24
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005dd0:	141b      	asrs	r3, r3, #16
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2208      	movs	r2, #8
 8005df8:	60da      	str	r2, [r3, #12]

  return 0;
 8005dfa:	2300      	movs	r3, #0

}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	32b0      	adds	r2, #176	@ 0xb0
 8005e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e20:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d102      	bne.n	8005e2e <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8005e28:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2c:	e09a      	b.n	8005f64 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	33b0      	adds	r3, #176	@ 0xb0
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8005e4c:	7af8      	ldrb	r0, [r7, #11]
 8005e4e:	4798      	blx	r3
 8005e50:	4603      	mov	r3, r0
 8005e52:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <SCSI_ReadCapacity16+0x62>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d108      	bne.n	8005e78 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e66:	7af9      	ldrb	r1, [r7, #11]
 8005e68:	233a      	movs	r3, #58	@ 0x3a
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 fa08 	bl	8006282 <SCSI_SenseCode>
    return -1;
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295
 8005e76:	e075      	b.n	8005f64 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	330a      	adds	r3, #10
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	330b      	adds	r3, #11
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e88:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005e92:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	320d      	adds	r2, #13
 8005e98:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005e9a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	e008      	b.n	8005eb8 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	3310      	adds	r3, #16
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d3f1      	bcc.n	8005ea6 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	0e1b      	lsrs	r3, r3, #24
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	0c1b      	lsrs	r3, r3, #16
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005f08:	161b      	asrs	r3, r3, #24
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005f16:	141b      	asrs	r3, r3, #16
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005f24:	0a1b      	lsrs	r3, r3, #8
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	330a      	adds	r3, #10
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	330b      	adds	r3, #11
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005f4a:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	330c      	adds	r3, #12
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005f54:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	320d      	adds	r2, #13
 8005f5a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005f5c:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	60da      	str	r2, [r3, #12]

  return 0;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	460b      	mov	r3, r1
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	32b0      	adds	r2, #176	@ 0xb0
 8005f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f88:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8005f90:	f04f 33ff 	mov.w	r3, #4294967295
 8005f94:	e061      	b.n	800605a <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	33b0      	adds	r3, #176	@ 0xb0
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f107 0214 	add.w	r2, r7, #20
 8005fac:	f107 0110 	add.w	r1, r7, #16
 8005fb0:	7af8      	ldrb	r0, [r7, #11]
 8005fb2:	4798      	blx	r3
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <SCSI_ReadFormatCapacity+0x5e>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d108      	bne.n	8005fdc <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005fca:	7af9      	ldrb	r1, [r7, #11]
 8005fcc:	233a      	movs	r3, #58	@ 0x3a
 8005fce:	2202      	movs	r2, #2
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f956 	bl	8006282 <SCSI_SenseCode>
    return -1;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fda:	e03e      	b.n	800605a <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	83fb      	strh	r3, [r7, #30]
 8005fe0:	e007      	b.n	8005ff2 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8005fe2:	8bfb      	ldrh	r3, [r7, #30]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	2200      	movs	r2, #0
 8005fea:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8005fec:	8bfb      	ldrh	r3, [r7, #30]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	83fb      	strh	r3, [r7, #30]
 8005ff2:	8bfb      	ldrh	r3, [r7, #30]
 8005ff4:	2b0b      	cmp	r3, #11
 8005ff6:	d9f4      	bls.n	8005fe2 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2208      	movs	r2, #8
 8005ffc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3b01      	subs	r3, #1
 8006002:	0e1b      	lsrs	r3, r3, #24
 8006004:	b2da      	uxtb	r2, r3
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	3b01      	subs	r3, #1
 800600e:	0c1b      	lsrs	r3, r3, #16
 8006010:	b2da      	uxtb	r2, r3
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	3b01      	subs	r3, #1
 800601a:	0a1b      	lsrs	r3, r3, #8
 800601c:	b2da      	uxtb	r2, r3
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b2da      	uxtb	r2, r3
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2202      	movs	r2, #2
 8006032:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006034:	8abb      	ldrh	r3, [r7, #20]
 8006036:	141b      	asrs	r3, r3, #16
 8006038:	b2da      	uxtb	r2, r3
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800603e:	8abb      	ldrh	r3, [r7, #20]
 8006040:	0a1b      	lsrs	r3, r3, #8
 8006042:	b29b      	uxth	r3, r3
 8006044:	b2da      	uxtb	r2, r3
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800604a:	8abb      	ldrh	r3, [r7, #20]
 800604c:	b2da      	uxtb	r2, r3
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	220c      	movs	r2, #12
 8006056:	60da      	str	r2, [r3, #12]

  return 0;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	460b      	mov	r3, r1
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	32b0      	adds	r2, #176	@ 0xb0
 800607c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006080:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8006082:	2304      	movs	r3, #4
 8006084:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800608c:	f04f 33ff 	mov.w	r3, #4294967295
 8006090:	e027      	b.n	80060e2 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	33b0      	adds	r3, #176	@ 0xb0
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	7afa      	ldrb	r2, [r7, #11]
 80060a6:	4610      	mov	r0, r2
 80060a8:	4798      	blx	r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d006      	beq.n	80060be <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 80060b0:	4b0e      	ldr	r3, [pc, #56]	@ (80060ec <SCSI_ModeSense6+0x88>)
 80060b2:	789b      	ldrb	r3, [r3, #2]
 80060b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	4b0c      	ldr	r3, [pc, #48]	@ (80060ec <SCSI_ModeSense6+0x88>)
 80060bc:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3304      	adds	r3, #4
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	8afb      	ldrh	r3, [r7, #22]
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d303      	bcc.n	80060d4 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3304      	adds	r3, #4
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80060d4:	8afb      	ldrh	r3, [r7, #22]
 80060d6:	461a      	mov	r2, r3
 80060d8:	4904      	ldr	r1, [pc, #16]	@ (80060ec <SCSI_ModeSense6+0x88>)
 80060da:	6938      	ldr	r0, [r7, #16]
 80060dc:	f000 fe3e 	bl	8006d5c <SCSI_UpdateBotData>

  return 0;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000080 	.word	0x20000080

080060f0 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	460b      	mov	r3, r1
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	32b0      	adds	r2, #176	@ 0xb0
 8006108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800610e:	2308      	movs	r3, #8
 8006110:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8006118:	f04f 33ff 	mov.w	r3, #4294967295
 800611c:	e027      	b.n	800616e <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	33b0      	adds	r3, #176	@ 0xb0
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	7afa      	ldrb	r2, [r7, #11]
 8006132:	4610      	mov	r0, r2
 8006134:	4798      	blx	r3
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d006      	beq.n	800614a <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800613c:	4b0e      	ldr	r3, [pc, #56]	@ (8006178 <SCSI_ModeSense10+0x88>)
 800613e:	78db      	ldrb	r3, [r3, #3]
 8006140:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b0c      	ldr	r3, [pc, #48]	@ (8006178 <SCSI_ModeSense10+0x88>)
 8006148:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3308      	adds	r3, #8
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	8afb      	ldrh	r3, [r7, #22]
 8006154:	4293      	cmp	r3, r2
 8006156:	d303      	bcc.n	8006160 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3308      	adds	r3, #8
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8006160:	8afb      	ldrh	r3, [r7, #22]
 8006162:	461a      	mov	r2, r3
 8006164:	4904      	ldr	r1, [pc, #16]	@ (8006178 <SCSI_ModeSense10+0x88>)
 8006166:	6938      	ldr	r0, [r7, #16]
 8006168:	f000 fdf8 	bl	8006d5c <SCSI_UpdateBotData>

  return 0;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000084 	.word	0x20000084

0800617c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	460b      	mov	r3, r1
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	32b0      	adds	r2, #176	@ 0xb0
 8006194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006198:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <SCSI_RequestSense+0x2a>
  {
    return -1;
 80061a0:	f04f 33ff 	mov.w	r3, #4294967295
 80061a4:	e069      	b.n	800627a <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80061b6:	2320      	movs	r3, #32
 80061b8:	2205      	movs	r2, #5
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f861 	bl	8006282 <SCSI_SenseCode>
    return -1;
 80061c0:	f04f 33ff 	mov.w	r3, #4294967295
 80061c4:	e059      	b.n	800627a <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]
 80061ca:	e007      	b.n	80061dc <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	2200      	movs	r2, #0
 80061d4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	3301      	adds	r3, #1
 80061da:	75fb      	strb	r3, [r7, #23]
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
 80061de:	2b11      	cmp	r3, #17
 80061e0:	d9f4      	bls.n	80061cc <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2270      	movs	r2, #112	@ 0x70
 80061e6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	220c      	movs	r2, #12
 80061ec:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d02e      	beq.n	800625c <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006204:	461a      	mov	r2, r3
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	3248      	adds	r2, #72	@ 0x48
 800620a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	3348      	adds	r3, #72	@ 0x48
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	4413      	add	r3, r2
 8006220:	791a      	ldrb	r2, [r3, #4]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	3348      	adds	r3, #72	@ 0x48
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	795a      	ldrb	r2, [r3, #5]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006240:	3301      	adds	r3, #1
 8006242:	b2da      	uxtb	r2, r3
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006250:	2b04      	cmp	r3, #4
 8006252:	d103      	bne.n	800625c <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2212      	movs	r2, #18
 8006260:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3304      	adds	r3, #4
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b12      	cmp	r3, #18
 800626a:	d805      	bhi.n	8006278 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	4608      	mov	r0, r1
 800628c:	4611      	mov	r1, r2
 800628e:	461a      	mov	r2, r3
 8006290:	4603      	mov	r3, r0
 8006292:	70fb      	strb	r3, [r7, #3]
 8006294:	460b      	mov	r3, r1
 8006296:	70bb      	strb	r3, [r7, #2]
 8006298:	4613      	mov	r3, r2
 800629a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	32b0      	adds	r2, #176	@ 0xb0
 80062a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062aa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d02c      	beq.n	800630c <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80062b8:	461a      	mov	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3248      	adds	r2, #72	@ 0x48
 80062be:	78b9      	ldrb	r1, [r7, #2]
 80062c0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	3348      	adds	r3, #72	@ 0x48
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4413      	add	r3, r2
 80062d2:	787a      	ldrb	r2, [r7, #1]
 80062d4:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	3348      	adds	r3, #72	@ 0x48
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	2200      	movs	r2, #0
 80062e6:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80062ee:	3301      	adds	r3, #1
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d105      	bne.n	800630e <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800630a:	e000      	b.n	800630e <SCSI_SenseCode+0x8c>
    return;
 800630c:	bf00      	nop
  }
}
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	460b      	mov	r3, r1
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	32b0      	adds	r2, #176	@ 0xb0
 8006330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006334:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800633c:	f04f 33ff 	mov.w	r3, #4294967295
 8006340:	e03b      	b.n	80063ba <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006348:	2b01      	cmp	r3, #1
 800634a:	d10f      	bne.n	800636c <SCSI_StartStopUnit+0x54>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d108      	bne.n	800636c <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800635a:	7af9      	ldrb	r1, [r7, #11]
 800635c:	2324      	movs	r3, #36	@ 0x24
 800635e:	2205      	movs	r2, #5
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff ff8e 	bl	8006282 <SCSI_SenseCode>

    return -1;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	e026      	b.n	80063ba <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b01      	cmp	r3, #1
 8006378:	d104      	bne.n	8006384 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8006382:	e016      	b.n	80063b2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d104      	bne.n	800639c <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2202      	movs	r2, #2
 8006396:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800639a:	e00a      	b.n	80063b2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3304      	adds	r3, #4
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d103      	bne.n	80063b2 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	60da      	str	r2, [r3, #12]

  return 0;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b087      	sub	sp, #28
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	460b      	mov	r3, r1
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	32b0      	adds	r2, #176	@ 0xb0
 80063da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063de:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 80063e6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ea:	e011      	b.n	8006410 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3304      	adds	r3, #4
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80063fe:	e003      	b.n	8006408 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2200      	movs	r2, #0
 800640c:	60da      	str	r2, [r3, #12]

  return 0;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	460b      	mov	r3, r1
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	32b0      	adds	r2, #176	@ 0xb0
 8006434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006438:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <SCSI_Read10+0x2a>
  {
    return -1;
 8006440:	f04f 33ff 	mov.w	r3, #4294967295
 8006444:	e090      	b.n	8006568 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	7a1b      	ldrb	r3, [r3, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 8082 	bne.w	8006554 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8006456:	b25b      	sxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	db0a      	blt.n	8006472 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006462:	2320      	movs	r3, #32
 8006464:	2205      	movs	r2, #5
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff ff0b 	bl	8006282 <SCSI_SenseCode>
      return -1;
 800646c:	f04f 33ff 	mov.w	r3, #4294967295
 8006470:	e07a      	b.n	8006568 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006478:	2b02      	cmp	r3, #2
 800647a:	d108      	bne.n	800648e <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800647c:	7af9      	ldrb	r1, [r7, #11]
 800647e:	233a      	movs	r3, #58	@ 0x3a
 8006480:	2202      	movs	r2, #2
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7ff fefd 	bl	8006282 <SCSI_SenseCode>

      return -1;
 8006488:	f04f 33ff 	mov.w	r3, #4294967295
 800648c:	e06c      	b.n	8006568 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	33b0      	adds	r3, #176	@ 0xb0
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	7afa      	ldrb	r2, [r7, #11]
 80064a2:	4610      	mov	r0, r2
 80064a4:	4798      	blx	r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d008      	beq.n	80064be <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80064ac:	7af9      	ldrb	r1, [r7, #11]
 80064ae:	233a      	movs	r3, #58	@ 0x3a
 80064b0:	2202      	movs	r2, #2
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f7ff fee5 	bl	8006282 <SCSI_SenseCode>
      return -1;
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295
 80064bc:	e054      	b.n	8006568 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3302      	adds	r3, #2
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3303      	adds	r3, #3
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80064ce:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3304      	adds	r3, #4
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80064d8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	3205      	adds	r2, #5
 80064de:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80064e0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3307      	adds	r3, #7
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	021b      	lsls	r3, r3, #8
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	3208      	adds	r2, #8
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	431a      	orrs	r2, r3
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800650a:	7af9      	ldrb	r1, [r7, #11]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 fadc 	bl	8006aca <SCSI_CheckAddressRange>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	da02      	bge.n	800651e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
 800651c:	e024      	b.n	8006568 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800652a:	6979      	ldr	r1, [r7, #20]
 800652c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8006530:	fb01 f303 	mul.w	r3, r1, r3
 8006534:	429a      	cmp	r2, r3
 8006536:	d00a      	beq.n	800654e <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800653e:	2320      	movs	r3, #32
 8006540:	2205      	movs	r2, #5
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f7ff fe9d 	bl	8006282 <SCSI_SenseCode>
      return -1;
 8006548:	f04f 33ff 	mov.w	r3, #4294967295
 800654c:	e00c      	b.n	8006568 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2202      	movs	r2, #2
 8006552:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800655a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800655c:	7afb      	ldrb	r3, [r7, #11]
 800655e:	4619      	mov	r1, r3
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fadf 	bl	8006b24 <SCSI_ProcessRead>
 8006566:	4603      	mov	r3, r0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	460b      	mov	r3, r1
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	32b0      	adds	r2, #176	@ 0xb0
 8006588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <SCSI_Read12+0x2a>
  {
    return -1;
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
 8006598:	e09a      	b.n	80066d0 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	7a1b      	ldrb	r3, [r3, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 808c 	bne.w	80066bc <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80065aa:	b25b      	sxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	db0a      	blt.n	80065c6 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80065b6:	2320      	movs	r3, #32
 80065b8:	2205      	movs	r2, #5
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f7ff fe61 	bl	8006282 <SCSI_SenseCode>
      return -1;
 80065c0:	f04f 33ff 	mov.w	r3, #4294967295
 80065c4:	e084      	b.n	80066d0 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d108      	bne.n	80065e2 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80065d0:	7af9      	ldrb	r1, [r7, #11]
 80065d2:	233a      	movs	r3, #58	@ 0x3a
 80065d4:	2202      	movs	r2, #2
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f7ff fe53 	bl	8006282 <SCSI_SenseCode>
      return -1;
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295
 80065e0:	e076      	b.n	80066d0 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	33b0      	adds	r3, #176	@ 0xb0
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	7afa      	ldrb	r2, [r7, #11]
 80065f6:	4610      	mov	r0, r2
 80065f8:	4798      	blx	r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d008      	beq.n	8006612 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006600:	7af9      	ldrb	r1, [r7, #11]
 8006602:	233a      	movs	r3, #58	@ 0x3a
 8006604:	2202      	movs	r2, #2
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff fe3b 	bl	8006282 <SCSI_SenseCode>
      return -1;
 800660c:	f04f 33ff 	mov.w	r3, #4294967295
 8006610:	e05e      	b.n	80066d0 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3302      	adds	r3, #2
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3303      	adds	r3, #3
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006622:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3304      	adds	r3, #4
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800662c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	3205      	adds	r2, #5
 8006632:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006634:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3306      	adds	r3, #6
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3307      	adds	r3, #7
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800664c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3308      	adds	r3, #8
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006656:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	3209      	adds	r2, #9
 800665c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800665e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006672:	7af9      	ldrb	r1, [r7, #11]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fa28 	bl	8006aca <SCSI_CheckAddressRange>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	da02      	bge.n	8006686 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006680:	f04f 33ff 	mov.w	r3, #4294967295
 8006684:	e024      	b.n	80066d0 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006692:	6979      	ldr	r1, [r7, #20]
 8006694:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	429a      	cmp	r2, r3
 800669e:	d00a      	beq.n	80066b6 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80066a6:	2320      	movs	r3, #32
 80066a8:	2205      	movs	r2, #5
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f7ff fde9 	bl	8006282 <SCSI_SenseCode>
      return -1;
 80066b0:	f04f 33ff 	mov.w	r3, #4294967295
 80066b4:	e00c      	b.n	80066d0 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2202      	movs	r2, #2
 80066ba:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066c2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80066c4:	7afb      	ldrb	r3, [r7, #11]
 80066c6:	4619      	mov	r1, r3
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fa2b 	bl	8006b24 <SCSI_ProcessRead>
 80066ce:	4603      	mov	r3, r0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	460b      	mov	r3, r1
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	32b0      	adds	r2, #176	@ 0xb0
 80066f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <SCSI_Write10+0x2a>
  {
    return -1;
 80066fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006700:	e0ba      	b.n	8006878 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	7a1b      	ldrb	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f040 80b0 	bne.w	800686c <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800671c:	2320      	movs	r3, #32
 800671e:	2205      	movs	r2, #5
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff fdae 	bl	8006282 <SCSI_SenseCode>
      return -1;
 8006726:	f04f 33ff 	mov.w	r3, #4294967295
 800672a:	e0a5      	b.n	8006878 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8006732:	b25b      	sxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	da0a      	bge.n	800674e <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800673e:	2320      	movs	r3, #32
 8006740:	2205      	movs	r2, #5
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f7ff fd9d 	bl	8006282 <SCSI_SenseCode>
      return -1;
 8006748:	f04f 33ff 	mov.w	r3, #4294967295
 800674c:	e094      	b.n	8006878 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	33b0      	adds	r3, #176	@ 0xb0
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	7afa      	ldrb	r2, [r7, #11]
 8006762:	4610      	mov	r0, r2
 8006764:	4798      	blx	r3
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d008      	beq.n	800677e <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800676c:	7af9      	ldrb	r1, [r7, #11]
 800676e:	233a      	movs	r3, #58	@ 0x3a
 8006770:	2202      	movs	r2, #2
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff fd85 	bl	8006282 <SCSI_SenseCode>
      return -1;
 8006778:	f04f 33ff 	mov.w	r3, #4294967295
 800677c:	e07c      	b.n	8006878 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	33b0      	adds	r3, #176	@ 0xb0
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	7afa      	ldrb	r2, [r7, #11]
 8006792:	4610      	mov	r0, r2
 8006794:	4798      	blx	r3
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800679c:	7af9      	ldrb	r1, [r7, #11]
 800679e:	2327      	movs	r3, #39	@ 0x27
 80067a0:	2202      	movs	r2, #2
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7ff fd6d 	bl	8006282 <SCSI_SenseCode>
      return -1;
 80067a8:	f04f 33ff 	mov.w	r3, #4294967295
 80067ac:	e064      	b.n	8006878 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3302      	adds	r3, #2
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3303      	adds	r3, #3
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80067be:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80067c8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	3205      	adds	r2, #5
 80067ce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80067d0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3307      	adds	r3, #7
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	3208      	adds	r2, #8
 80067e4:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80067e6:	431a      	orrs	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80067fa:	7af9      	ldrb	r1, [r7, #11]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f964 	bl	8006aca <SCSI_CheckAddressRange>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	da02      	bge.n	800680e <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006808:	f04f 33ff 	mov.w	r3, #4294967295
 800680c:	e034      	b.n	8006878 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	429a      	cmp	r2, r3
 800682a:	d00a      	beq.n	8006842 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006832:	2320      	movs	r3, #32
 8006834:	2205      	movs	r2, #5
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7ff fd23 	bl	8006282 <SCSI_SenseCode>
      return -1;
 800683c:	f04f 33ff 	mov.w	r3, #4294967295
 8006840:	e01a      	b.n	8006878 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006848:	bf28      	it	cs
 800684a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800684e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2201      	movs	r2, #1
 8006854:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006856:	4b0a      	ldr	r3, [pc, #40]	@ (8006880 <SCSI_Write10+0x1a8>)
 8006858:	7819      	ldrb	r1, [r3, #0]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f103 0210 	add.w	r2, r3, #16
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f002 f9f3 	bl	8008c4e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006868:	2300      	movs	r3, #0
 800686a:	e005      	b.n	8006878 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800686c:	7afb      	ldrb	r3, [r7, #11]
 800686e:	4619      	mov	r1, r3
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f9dd 	bl	8006c30 <SCSI_ProcessWrite>
 8006876:	4603      	mov	r3, r0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	2000006f 	.word	0x2000006f

08006884 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	460b      	mov	r3, r1
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	32b0      	adds	r2, #176	@ 0xb0
 800689c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d102      	bne.n	80068ae <SCSI_Write12+0x2a>
  {
    return -1;
 80068a8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ac:	e0ca      	b.n	8006a44 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	7a1b      	ldrb	r3, [r3, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f040 80c0 	bne.w	8006a38 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80068c8:	2320      	movs	r3, #32
 80068ca:	2205      	movs	r2, #5
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f7ff fcd8 	bl	8006282 <SCSI_SenseCode>
      return -1;
 80068d2:	f04f 33ff 	mov.w	r3, #4294967295
 80068d6:	e0b5      	b.n	8006a44 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80068de:	b25b      	sxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	da0a      	bge.n	80068fa <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80068ea:	2320      	movs	r3, #32
 80068ec:	2205      	movs	r2, #5
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff fcc7 	bl	8006282 <SCSI_SenseCode>
      return -1;
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295
 80068f8:	e0a4      	b.n	8006a44 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	33b0      	adds	r3, #176	@ 0xb0
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	7afa      	ldrb	r2, [r7, #11]
 800690e:	4610      	mov	r0, r2
 8006910:	4798      	blx	r3
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006918:	7af9      	ldrb	r1, [r7, #11]
 800691a:	233a      	movs	r3, #58	@ 0x3a
 800691c:	2202      	movs	r2, #2
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff fcaf 	bl	8006282 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2205      	movs	r2, #5
 8006928:	721a      	strb	r2, [r3, #8]
      return -1;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	e089      	b.n	8006a44 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	33b0      	adds	r3, #176	@ 0xb0
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	7afa      	ldrb	r2, [r7, #11]
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800694e:	7af9      	ldrb	r1, [r7, #11]
 8006950:	2327      	movs	r3, #39	@ 0x27
 8006952:	2202      	movs	r2, #2
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7ff fc94 	bl	8006282 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2205      	movs	r2, #5
 800695e:	721a      	strb	r2, [r3, #8]
      return -1;
 8006960:	f04f 33ff 	mov.w	r3, #4294967295
 8006964:	e06e      	b.n	8006a44 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3302      	adds	r3, #2
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3303      	adds	r3, #3
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006976:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006980:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	3205      	adds	r2, #5
 8006986:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006988:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3306      	adds	r3, #6
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3307      	adds	r3, #7
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80069a0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3308      	adds	r3, #8
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80069aa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	3209      	adds	r2, #9
 80069b0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80069b2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80069c6:	7af9      	ldrb	r1, [r7, #11]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f87e 	bl	8006aca <SCSI_CheckAddressRange>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	da02      	bge.n	80069da <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80069d4:	f04f 33ff 	mov.w	r3, #4294967295
 80069d8:	e034      	b.n	8006a44 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80069e6:	fb02 f303 	mul.w	r3, r2, r3
 80069ea:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d00a      	beq.n	8006a0e <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80069fe:	2320      	movs	r3, #32
 8006a00:	2205      	movs	r2, #5
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff fc3d 	bl	8006282 <SCSI_SenseCode>
      return -1;
 8006a08:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0c:	e01a      	b.n	8006a44 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a14:	bf28      	it	cs
 8006a16:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006a1a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006a22:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <SCSI_Write12+0x1c8>)
 8006a24:	7819      	ldrb	r1, [r3, #0]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f103 0210 	add.w	r2, r3, #16
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f002 f90d 	bl	8008c4e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e005      	b.n	8006a44 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f8f7 	bl	8006c30 <SCSI_ProcessWrite>
 8006a42:	4603      	mov	r3, r0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	2000006f 	.word	0x2000006f

08006a50 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	32b0      	adds	r2, #176	@ 0xb0
 8006a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <SCSI_Verify10+0x2a>
  {
    return -1;
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295
 8006a78:	e023      	b.n	8006ac2 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8006a88:	7af9      	ldrb	r1, [r7, #11]
 8006a8a:	2324      	movs	r3, #36	@ 0x24
 8006a8c:	2205      	movs	r2, #5
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff fbf7 	bl	8006282 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8006a94:	f04f 33ff 	mov.w	r3, #4294967295
 8006a98:	e013      	b.n	8006ac2 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006aa6:	7af9      	ldrb	r1, [r7, #11]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f80e 	bl	8006aca <SCSI_CheckAddressRange>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	da02      	bge.n	8006aba <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8006ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab8:	e003      	b.n	8006ac2 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2200      	movs	r2, #0
 8006abe:	60da      	str	r2, [r3, #12]

  return 0;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b086      	sub	sp, #24
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	32b0      	adds	r2, #176	@ 0xb0
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295
 8006af4:	e011      	b.n	8006b1a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	441a      	add	r2, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d908      	bls.n	8006b18 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006b06:	7af9      	ldrb	r1, [r7, #11]
 8006b08:	2321      	movs	r3, #33	@ 0x21
 8006b0a:	2205      	movs	r2, #5
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff fbb8 	bl	8006282 <SCSI_SenseCode>
    return -1;
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295
 8006b16:	e000      	b.n	8006b1a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006b24:	b590      	push	{r4, r7, lr}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	32b0      	adds	r2, #176	@ 0xb0
 8006b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <SCSI_ProcessRead+0x28>
  {
    return -1;
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	e06a      	b.n	8006c22 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8006b58:	fb02 f303 	mul.w	r3, r2, r3
 8006b5c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b64:	bf28      	it	cs
 8006b66:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006b6a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	33b0      	adds	r3, #176	@ 0xb0
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	691c      	ldr	r4, [r3, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f103 0110 	add.w	r1, r3, #16
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006b90:	4618      	mov	r0, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	78f8      	ldrb	r0, [r7, #3]
 8006b9c:	47a0      	blx	r4
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	da08      	bge.n	8006bb6 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006ba4:	78f9      	ldrb	r1, [r7, #3]
 8006ba6:	2311      	movs	r3, #17
 8006ba8:	2204      	movs	r2, #4
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff fb69 	bl	8006282 <SCSI_SenseCode>
    return -1;
 8006bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb4:	e035      	b.n	8006c22 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8006bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c2c <SCSI_ProcessRead+0x108>)
 8006bb8:	7819      	ldrb	r1, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f103 0210 	add.w	r2, r3, #16
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f002 f822 	bl	8008c0c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bdc:	441a      	add	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bf8:	1ad2      	subs	r2, r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	1ad2      	subs	r2, r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d102      	bne.n	8006c20 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2203      	movs	r2, #3
 8006c1e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd90      	pop	{r4, r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	2000006e 	.word	0x2000006e

08006c30 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006c30:	b590      	push	{r4, r7, lr}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	32b0      	adds	r2, #176	@ 0xb0
 8006c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8006c52:	f04f 33ff 	mov.w	r3, #4294967295
 8006c56:	e07a      	b.n	8006d4e <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8006c64:	fb02 f303 	mul.w	r3, r2, r3
 8006c68:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c70:	bf28      	it	cs
 8006c72:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006c76:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	33b0      	adds	r3, #176	@ 0xb0
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	695c      	ldr	r4, [r3, #20]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f103 0110 	add.w	r1, r3, #16
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	78f8      	ldrb	r0, [r7, #3]
 8006ca8:	47a0      	blx	r4
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da08      	bge.n	8006cc2 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006cb0:	78f9      	ldrb	r1, [r7, #3]
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fae3 	bl	8006282 <SCSI_SenseCode>
    return -1;
 8006cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc0:	e045      	b.n	8006d4e <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006cce:	4619      	mov	r1, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cd6:	441a      	add	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006cea:	4619      	mov	r1, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cf2:	1ad2      	subs	r2, r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006d14:	2100      	movs	r1, #0
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fe fce8 	bl	80056ec <MSC_BOT_SendCSW>
 8006d1c:	e016      	b.n	8006d4c <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8006d2a:	fb02 f303 	mul.w	r3, r2, r3
 8006d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d32:	bf28      	it	cs
 8006d34:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006d38:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006d3a:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <SCSI_ProcessWrite+0x128>)
 8006d3c:	7819      	ldrb	r1, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f103 0210 	add.w	r2, r3, #16
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 ff81 	bl	8008c4e <USBD_LL_PrepareReceive>
  }

  return 0;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd90      	pop	{r4, r7, pc}
 8006d56:	bf00      	nop
 8006d58:	2000006f 	.word	0x2000006f

08006d5c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8006d74:	f04f 33ff 	mov.w	r3, #4294967295
 8006d78:	e013      	b.n	8006da2 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8006d7a:	8afa      	ldrh	r2, [r7, #22]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8006d80:	e00b      	b.n	8006d9a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8006d82:	8afb      	ldrh	r3, [r7, #22]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8006d88:	8afb      	ldrh	r3, [r7, #22]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	441a      	add	r2, r3
 8006d8e:	8afb      	ldrh	r3, [r7, #22]
 8006d90:	7811      	ldrb	r1, [r2, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4413      	add	r3, r2
 8006d96:	460a      	mov	r2, r1
 8006d98:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8006d9a:	8afb      	ldrh	r3, [r7, #22]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f0      	bne.n	8006d82 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b086      	sub	sp, #24
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	4613      	mov	r3, r2
 8006dba:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e01f      	b.n	8006e06 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	79fa      	ldrb	r2, [r7, #7]
 8006df8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f001 fdb2 	bl	8008964 <USBD_LL_Init>
 8006e00:	4603      	mov	r3, r0
 8006e02:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e025      	b.n	8006e72 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	32ae      	adds	r2, #174	@ 0xae
 8006e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00f      	beq.n	8006e62 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	32ae      	adds	r2, #174	@ 0xae
 8006e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e52:	f107 020e 	add.w	r2, r7, #14
 8006e56:	4610      	mov	r0, r2
 8006e58:	4798      	blx	r3
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 fdba 	bl	80089fc <USBD_LL_Start>
 8006e88:	4603      	mov	r3, r0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	78fa      	ldrb	r2, [r7, #3]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	4611      	mov	r1, r2
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f06:	2303      	movs	r3, #3
 8006f08:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 f90b 	bl	8008142 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d01a      	beq.n	8006f86 <USBD_LL_SetupStage+0x72>
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d822      	bhi.n	8006f9a <USBD_LL_SetupStage+0x86>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <USBD_LL_SetupStage+0x4a>
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d00a      	beq.n	8006f72 <USBD_LL_SetupStage+0x5e>
 8006f5c:	e01d      	b.n	8006f9a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fb62 	bl	8007630 <USBD_StdDevReq>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f70:	e020      	b.n	8006fb4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fbca 	bl	8007714 <USBD_StdItfReq>
 8006f80:	4603      	mov	r3, r0
 8006f82:	73fb      	strb	r3, [r7, #15]
      break;
 8006f84:	e016      	b.n	8006fb4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fc2c 	bl	80077ec <USBD_StdEPReq>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]
      break;
 8006f98:	e00c      	b.n	8006fb4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006fa0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 fda6 	bl	8008afa <USBD_LL_StallEP>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb2:	bf00      	nop
  }

  return ret;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b086      	sub	sp, #24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	607a      	str	r2, [r7, #4]
 8006fca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006fd0:	7afb      	ldrb	r3, [r7, #11]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d16e      	bne.n	80070b4 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006fdc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	f040 8098 	bne.w	800711a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d913      	bls.n	800701e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	4293      	cmp	r3, r2
 800700e:	bf28      	it	cs
 8007010:	4613      	movcs	r3, r2
 8007012:	461a      	mov	r2, r3
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f001 f96a 	bl	80082f0 <USBD_CtlContinueRx>
 800701c:	e07d      	b.n	800711a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	2b02      	cmp	r3, #2
 800702a:	d014      	beq.n	8007056 <USBD_LL_DataOutStage+0x98>
 800702c:	2b02      	cmp	r3, #2
 800702e:	d81d      	bhi.n	800706c <USBD_LL_DataOutStage+0xae>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <USBD_LL_DataOutStage+0x7c>
 8007034:	2b01      	cmp	r3, #1
 8007036:	d003      	beq.n	8007040 <USBD_LL_DataOutStage+0x82>
 8007038:	e018      	b.n	800706c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	75bb      	strb	r3, [r7, #22]
            break;
 800703e:	e018      	b.n	8007072 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007046:	b2db      	uxtb	r3, r3
 8007048:	4619      	mov	r1, r3
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 fa64 	bl	8007518 <USBD_CoreFindIF>
 8007050:	4603      	mov	r3, r0
 8007052:	75bb      	strb	r3, [r7, #22]
            break;
 8007054:	e00d      	b.n	8007072 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800705c:	b2db      	uxtb	r3, r3
 800705e:	4619      	mov	r1, r3
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 fa66 	bl	8007532 <USBD_CoreFindEP>
 8007066:	4603      	mov	r3, r0
 8007068:	75bb      	strb	r3, [r7, #22]
            break;
 800706a:	e002      	b.n	8007072 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	75bb      	strb	r3, [r7, #22]
            break;
 8007070:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007072:	7dbb      	ldrb	r3, [r7, #22]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d119      	bne.n	80070ac <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b03      	cmp	r3, #3
 8007082:	d113      	bne.n	80070ac <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007084:	7dba      	ldrb	r2, [r7, #22]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	32ae      	adds	r2, #174	@ 0xae
 800708a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007094:	7dba      	ldrb	r2, [r7, #22]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800709c:	7dba      	ldrb	r2, [r7, #22]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	32ae      	adds	r2, #174	@ 0xae
 80070a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f001 f930 	bl	8008312 <USBD_CtlSendStatus>
 80070b2:	e032      	b.n	800711a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	4619      	mov	r1, r3
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 fa37 	bl	8007532 <USBD_CoreFindEP>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070c8:	7dbb      	ldrb	r3, [r7, #22]
 80070ca:	2bff      	cmp	r3, #255	@ 0xff
 80070cc:	d025      	beq.n	800711a <USBD_LL_DataOutStage+0x15c>
 80070ce:	7dbb      	ldrb	r3, [r7, #22]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d122      	bne.n	800711a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d117      	bne.n	8007110 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80070e0:	7dba      	ldrb	r2, [r7, #22]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	32ae      	adds	r2, #174	@ 0xae
 80070e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00f      	beq.n	8007110 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80070f0:	7dba      	ldrb	r2, [r7, #22]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80070f8:	7dba      	ldrb	r2, [r7, #22]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	32ae      	adds	r2, #174	@ 0xae
 80070fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	7afa      	ldrb	r2, [r7, #11]
 8007106:	4611      	mov	r1, r2
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	4798      	blx	r3
 800710c:	4603      	mov	r3, r0
 800710e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	e000      	b.n	800711c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	460b      	mov	r3, r1
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d16f      	bne.n	8007218 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3314      	adds	r3, #20
 800713c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007144:	2b02      	cmp	r3, #2
 8007146:	d15a      	bne.n	80071fe <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	429a      	cmp	r2, r3
 8007152:	d914      	bls.n	800717e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	1ad2      	subs	r2, r2, r3
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	461a      	mov	r2, r3
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f001 f8af 	bl	80082ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007170:	2300      	movs	r3, #0
 8007172:	2200      	movs	r2, #0
 8007174:	2100      	movs	r1, #0
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f001 fd69 	bl	8008c4e <USBD_LL_PrepareReceive>
 800717c:	e03f      	b.n	80071fe <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	d11c      	bne.n	80071c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007192:	429a      	cmp	r2, r3
 8007194:	d316      	bcc.n	80071c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d20f      	bcs.n	80071c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071a4:	2200      	movs	r2, #0
 80071a6:	2100      	movs	r1, #0
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f001 f890 	bl	80082ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071b6:	2300      	movs	r3, #0
 80071b8:	2200      	movs	r2, #0
 80071ba:	2100      	movs	r1, #0
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f001 fd46 	bl	8008c4e <USBD_LL_PrepareReceive>
 80071c2:	e01c      	b.n	80071fe <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d10f      	bne.n	80071f0 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d009      	beq.n	80071f0 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071f0:	2180      	movs	r1, #128	@ 0x80
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f001 fc81 	bl	8008afa <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f001 f89d 	bl	8008338 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d03a      	beq.n	800727e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f7ff fe42 	bl	8006e92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007216:	e032      	b.n	800727e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800721e:	b2db      	uxtb	r3, r3
 8007220:	4619      	mov	r1, r3
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 f985 	bl	8007532 <USBD_CoreFindEP>
 8007228:	4603      	mov	r3, r0
 800722a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	2bff      	cmp	r3, #255	@ 0xff
 8007230:	d025      	beq.n	800727e <USBD_LL_DataInStage+0x15a>
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d122      	bne.n	800727e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b03      	cmp	r3, #3
 8007242:	d11c      	bne.n	800727e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007244:	7dfa      	ldrb	r2, [r7, #23]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	32ae      	adds	r2, #174	@ 0xae
 800724a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d014      	beq.n	800727e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007254:	7dfa      	ldrb	r2, [r7, #23]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800725c:	7dfa      	ldrb	r2, [r7, #23]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	32ae      	adds	r2, #174	@ 0xae
 8007262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	7afa      	ldrb	r2, [r7, #11]
 800726a:	4611      	mov	r1, r2
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	4798      	blx	r3
 8007270:	4603      	mov	r3, r0
 8007272:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007274:	7dbb      	ldrb	r3, [r7, #22]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800727a:	7dbb      	ldrb	r3, [r7, #22]
 800727c:	e000      	b.n	8007280 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d014      	beq.n	80072ee <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00e      	beq.n	80072ee <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6852      	ldr	r2, [r2, #4]
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	4611      	mov	r1, r2
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80072ea:	2303      	movs	r3, #3
 80072ec:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072ee:	2340      	movs	r3, #64	@ 0x40
 80072f0:	2200      	movs	r2, #0
 80072f2:	2100      	movs	r1, #0
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fb9c 	bl	8008a32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2240      	movs	r2, #64	@ 0x40
 8007306:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800730a:	2340      	movs	r3, #64	@ 0x40
 800730c:	2200      	movs	r2, #0
 800730e:	2180      	movs	r1, #128	@ 0x80
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 fb8e 	bl	8008a32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2240      	movs	r2, #64	@ 0x40
 8007320:	621a      	str	r2, [r3, #32]

  return ret;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	78fa      	ldrb	r2, [r7, #3]
 800733c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b04      	cmp	r3, #4
 800735e:	d006      	beq.n	800736e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007366:	b2da      	uxtb	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2204      	movs	r2, #4
 8007372:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b04      	cmp	r3, #4
 8007396:	d106      	bne.n	80073a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d110      	bne.n	80073ea <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	32ae      	adds	r2, #174	@ 0xae
 800740a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007412:	2303      	movs	r3, #3
 8007414:	e01c      	b.n	8007450 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b03      	cmp	r3, #3
 8007420:	d115      	bne.n	800744e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	32ae      	adds	r2, #174	@ 0xae
 800742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00b      	beq.n	800744e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	32ae      	adds	r2, #174	@ 0xae
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	78fa      	ldrb	r2, [r7, #3]
 8007448:	4611      	mov	r1, r2
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	32ae      	adds	r2, #174	@ 0xae
 800746e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007476:	2303      	movs	r3, #3
 8007478:	e01c      	b.n	80074b4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b03      	cmp	r3, #3
 8007484:	d115      	bne.n	80074b2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	32ae      	adds	r2, #174	@ 0xae
 8007490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	32ae      	adds	r2, #174	@ 0xae
 80074a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074aa:	78fa      	ldrb	r2, [r7, #3]
 80074ac:	4611      	mov	r1, r2
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00e      	beq.n	800750e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6852      	ldr	r2, [r2, #4]
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	4611      	mov	r1, r2
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	4798      	blx	r3
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800750a:	2303      	movs	r3, #3
 800750c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800750e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007524:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800753e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007560:	2300      	movs	r3, #0
 8007562:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	885b      	ldrh	r3, [r3, #2]
 8007568:	b29b      	uxth	r3, r3
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	4293      	cmp	r3, r2
 8007570:	d91f      	bls.n	80075b2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007578:	e013      	b.n	80075a2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800757a:	f107 030a 	add.w	r3, r7, #10
 800757e:	4619      	mov	r1, r3
 8007580:	6978      	ldr	r0, [r7, #20]
 8007582:	f000 f81b 	bl	80075bc <USBD_GetNextDesc>
 8007586:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b05      	cmp	r3, #5
 800758e:	d108      	bne.n	80075a2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	789b      	ldrb	r3, [r3, #2]
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	429a      	cmp	r2, r3
 800759c:	d008      	beq.n	80075b0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	885b      	ldrh	r3, [r3, #2]
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	897b      	ldrh	r3, [r7, #10]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d8e5      	bhi.n	800757a <USBD_GetEpDesc+0x2e>
 80075ae:	e000      	b.n	80075b2 <USBD_GetEpDesc+0x66>
          break;
 80075b0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80075b2:	693b      	ldr	r3, [r7, #16]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	7812      	ldrb	r2, [r2, #0]
 80075d2:	4413      	add	r3, r2
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4413      	add	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075e6:	68fb      	ldr	r3, [r7, #12]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	3301      	adds	r3, #1
 800760a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007612:	8a3b      	ldrh	r3, [r7, #16]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	b21a      	sxth	r2, r3
 8007618:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800761c:	4313      	orrs	r3, r2
 800761e:	b21b      	sxth	r3, r3
 8007620:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007622:	89fb      	ldrh	r3, [r7, #14]
}
 8007624:	4618      	mov	r0, r3
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007646:	2b40      	cmp	r3, #64	@ 0x40
 8007648:	d005      	beq.n	8007656 <USBD_StdDevReq+0x26>
 800764a:	2b40      	cmp	r3, #64	@ 0x40
 800764c:	d857      	bhi.n	80076fe <USBD_StdDevReq+0xce>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00f      	beq.n	8007672 <USBD_StdDevReq+0x42>
 8007652:	2b20      	cmp	r3, #32
 8007654:	d153      	bne.n	80076fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	32ae      	adds	r2, #174	@ 0xae
 8007660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]
      break;
 8007670:	e04a      	b.n	8007708 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b09      	cmp	r3, #9
 8007678:	d83b      	bhi.n	80076f2 <USBD_StdDevReq+0xc2>
 800767a:	a201      	add	r2, pc, #4	@ (adr r2, 8007680 <USBD_StdDevReq+0x50>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	080076d5 	.word	0x080076d5
 8007684:	080076e9 	.word	0x080076e9
 8007688:	080076f3 	.word	0x080076f3
 800768c:	080076df 	.word	0x080076df
 8007690:	080076f3 	.word	0x080076f3
 8007694:	080076b3 	.word	0x080076b3
 8007698:	080076a9 	.word	0x080076a9
 800769c:	080076f3 	.word	0x080076f3
 80076a0:	080076cb 	.word	0x080076cb
 80076a4:	080076bd 	.word	0x080076bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa3c 	bl	8007b28 <USBD_GetDescriptor>
          break;
 80076b0:	e024      	b.n	80076fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fba1 	bl	8007dfc <USBD_SetAddress>
          break;
 80076ba:	e01f      	b.n	80076fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fbe0 	bl	8007e84 <USBD_SetConfig>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]
          break;
 80076c8:	e018      	b.n	80076fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fc83 	bl	8007fd8 <USBD_GetConfig>
          break;
 80076d2:	e013      	b.n	80076fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fcb4 	bl	8008044 <USBD_GetStatus>
          break;
 80076dc:	e00e      	b.n	80076fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fce3 	bl	80080ac <USBD_SetFeature>
          break;
 80076e6:	e009      	b.n	80076fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fd07 	bl	80080fe <USBD_ClrFeature>
          break;
 80076f0:	e004      	b.n	80076fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fd5e 	bl	80081b6 <USBD_CtlError>
          break;
 80076fa:	bf00      	nop
      }
      break;
 80076fc:	e004      	b.n	8007708 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fd58 	bl	80081b6 <USBD_CtlError>
      break;
 8007706:	bf00      	nop
  }

  return ret;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop

08007714 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800772a:	2b40      	cmp	r3, #64	@ 0x40
 800772c:	d005      	beq.n	800773a <USBD_StdItfReq+0x26>
 800772e:	2b40      	cmp	r3, #64	@ 0x40
 8007730:	d852      	bhi.n	80077d8 <USBD_StdItfReq+0xc4>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <USBD_StdItfReq+0x26>
 8007736:	2b20      	cmp	r3, #32
 8007738:	d14e      	bne.n	80077d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007740:	b2db      	uxtb	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	2b02      	cmp	r3, #2
 8007746:	d840      	bhi.n	80077ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	889b      	ldrh	r3, [r3, #4]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	d836      	bhi.n	80077c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	889b      	ldrh	r3, [r3, #4]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff fedc 	bl	8007518 <USBD_CoreFindIF>
 8007760:	4603      	mov	r3, r0
 8007762:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	2bff      	cmp	r3, #255	@ 0xff
 8007768:	d01d      	beq.n	80077a6 <USBD_StdItfReq+0x92>
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d11a      	bne.n	80077a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007770:	7bba      	ldrb	r2, [r7, #14]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	32ae      	adds	r2, #174	@ 0xae
 8007776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00f      	beq.n	80077a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007780:	7bba      	ldrb	r2, [r7, #14]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007788:	7bba      	ldrb	r2, [r7, #14]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	32ae      	adds	r2, #174	@ 0xae
 800778e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800779e:	e004      	b.n	80077aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80077a0:	2303      	movs	r3, #3
 80077a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077a4:	e001      	b.n	80077aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80077a6:	2303      	movs	r3, #3
 80077a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	88db      	ldrh	r3, [r3, #6]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d110      	bne.n	80077d4 <USBD_StdItfReq+0xc0>
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10d      	bne.n	80077d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fdaa 	bl	8008312 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077be:	e009      	b.n	80077d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fcf7 	bl	80081b6 <USBD_CtlError>
          break;
 80077c8:	e004      	b.n	80077d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fcf2 	bl	80081b6 <USBD_CtlError>
          break;
 80077d2:	e000      	b.n	80077d6 <USBD_StdItfReq+0xc2>
          break;
 80077d4:	bf00      	nop
      }
      break;
 80077d6:	e004      	b.n	80077e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fceb 	bl	80081b6 <USBD_CtlError>
      break;
 80077e0:	bf00      	nop
  }

  return ret;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	889b      	ldrh	r3, [r3, #4]
 80077fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007808:	2b40      	cmp	r3, #64	@ 0x40
 800780a:	d007      	beq.n	800781c <USBD_StdEPReq+0x30>
 800780c:	2b40      	cmp	r3, #64	@ 0x40
 800780e:	f200 817f 	bhi.w	8007b10 <USBD_StdEPReq+0x324>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d02a      	beq.n	800786c <USBD_StdEPReq+0x80>
 8007816:	2b20      	cmp	r3, #32
 8007818:	f040 817a 	bne.w	8007b10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff fe86 	bl	8007532 <USBD_CoreFindEP>
 8007826:	4603      	mov	r3, r0
 8007828:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800782a:	7b7b      	ldrb	r3, [r7, #13]
 800782c:	2bff      	cmp	r3, #255	@ 0xff
 800782e:	f000 8174 	beq.w	8007b1a <USBD_StdEPReq+0x32e>
 8007832:	7b7b      	ldrb	r3, [r7, #13]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 8170 	bne.w	8007b1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800783a:	7b7a      	ldrb	r2, [r7, #13]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007842:	7b7a      	ldrb	r2, [r7, #13]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	32ae      	adds	r2, #174	@ 0xae
 8007848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 8163 	beq.w	8007b1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007854:	7b7a      	ldrb	r2, [r7, #13]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	32ae      	adds	r2, #174	@ 0xae
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800786a:	e156      	b.n	8007b1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	2b03      	cmp	r3, #3
 8007872:	d008      	beq.n	8007886 <USBD_StdEPReq+0x9a>
 8007874:	2b03      	cmp	r3, #3
 8007876:	f300 8145 	bgt.w	8007b04 <USBD_StdEPReq+0x318>
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 809b 	beq.w	80079b6 <USBD_StdEPReq+0x1ca>
 8007880:	2b01      	cmp	r3, #1
 8007882:	d03c      	beq.n	80078fe <USBD_StdEPReq+0x112>
 8007884:	e13e      	b.n	8007b04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d002      	beq.n	8007898 <USBD_StdEPReq+0xac>
 8007892:	2b03      	cmp	r3, #3
 8007894:	d016      	beq.n	80078c4 <USBD_StdEPReq+0xd8>
 8007896:	e02c      	b.n	80078f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00d      	beq.n	80078ba <USBD_StdEPReq+0xce>
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	2b80      	cmp	r3, #128	@ 0x80
 80078a2:	d00a      	beq.n	80078ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f926 	bl	8008afa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078ae:	2180      	movs	r1, #128	@ 0x80
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 f922 	bl	8008afa <USBD_LL_StallEP>
 80078b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078b8:	e020      	b.n	80078fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc7a 	bl	80081b6 <USBD_CtlError>
              break;
 80078c2:	e01b      	b.n	80078fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	885b      	ldrh	r3, [r3, #2]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10e      	bne.n	80078ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <USBD_StdEPReq+0xfe>
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b80      	cmp	r3, #128	@ 0x80
 80078d6:	d008      	beq.n	80078ea <USBD_StdEPReq+0xfe>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	88db      	ldrh	r3, [r3, #6]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d104      	bne.n	80078ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 f908 	bl	8008afa <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fd11 	bl	8008312 <USBD_CtlSendStatus>

              break;
 80078f0:	e004      	b.n	80078fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fc5e 	bl	80081b6 <USBD_CtlError>
              break;
 80078fa:	bf00      	nop
          }
          break;
 80078fc:	e107      	b.n	8007b0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d002      	beq.n	8007910 <USBD_StdEPReq+0x124>
 800790a:	2b03      	cmp	r3, #3
 800790c:	d016      	beq.n	800793c <USBD_StdEPReq+0x150>
 800790e:	e04b      	b.n	80079a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00d      	beq.n	8007932 <USBD_StdEPReq+0x146>
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b80      	cmp	r3, #128	@ 0x80
 800791a:	d00a      	beq.n	8007932 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f8ea 	bl	8008afa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007926:	2180      	movs	r1, #128	@ 0x80
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 f8e6 	bl	8008afa <USBD_LL_StallEP>
 800792e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007930:	e040      	b.n	80079b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fc3e 	bl	80081b6 <USBD_CtlError>
              break;
 800793a:	e03b      	b.n	80079b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	885b      	ldrh	r3, [r3, #2]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d136      	bne.n	80079b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 f8f0 	bl	8008b38 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fcda 	bl	8008312 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fde5 	bl	8007532 <USBD_CoreFindEP>
 8007968:	4603      	mov	r3, r0
 800796a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800796c:	7b7b      	ldrb	r3, [r7, #13]
 800796e:	2bff      	cmp	r3, #255	@ 0xff
 8007970:	d01f      	beq.n	80079b2 <USBD_StdEPReq+0x1c6>
 8007972:	7b7b      	ldrb	r3, [r7, #13]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d11c      	bne.n	80079b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007978:	7b7a      	ldrb	r2, [r7, #13]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007980:	7b7a      	ldrb	r2, [r7, #13]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	32ae      	adds	r2, #174	@ 0xae
 8007986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d010      	beq.n	80079b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007990:	7b7a      	ldrb	r2, [r7, #13]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	32ae      	adds	r2, #174	@ 0xae
 8007996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80079a6:	e004      	b.n	80079b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fc03 	bl	80081b6 <USBD_CtlError>
              break;
 80079b0:	e000      	b.n	80079b4 <USBD_StdEPReq+0x1c8>
              break;
 80079b2:	bf00      	nop
          }
          break;
 80079b4:	e0ab      	b.n	8007b0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d002      	beq.n	80079c8 <USBD_StdEPReq+0x1dc>
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d032      	beq.n	8007a2c <USBD_StdEPReq+0x240>
 80079c6:	e097      	b.n	8007af8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <USBD_StdEPReq+0x1f2>
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b80      	cmp	r3, #128	@ 0x80
 80079d2:	d004      	beq.n	80079de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fbed 	bl	80081b6 <USBD_CtlError>
                break;
 80079dc:	e091      	b.n	8007b02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	da0b      	bge.n	80079fe <USBD_StdEPReq+0x212>
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	3310      	adds	r3, #16
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	4413      	add	r3, r2
 80079fa:	3304      	adds	r3, #4
 80079fc:	e00b      	b.n	8007a16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	4413      	add	r3, r2
 8007a14:	3304      	adds	r3, #4
 8007a16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2202      	movs	r2, #2
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fc37 	bl	8008298 <USBD_CtlSendData>
              break;
 8007a2a:	e06a      	b.n	8007b02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	da11      	bge.n	8007a58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	f003 020f 	and.w	r2, r3, #15
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	3324      	adds	r3, #36	@ 0x24
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d117      	bne.n	8007a7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fbb0 	bl	80081b6 <USBD_CtlError>
                  break;
 8007a56:	e054      	b.n	8007b02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	f003 020f 	and.w	r2, r3, #15
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d104      	bne.n	8007a7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fb9d 	bl	80081b6 <USBD_CtlError>
                  break;
 8007a7c:	e041      	b.n	8007b02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	da0b      	bge.n	8007a9e <USBD_StdEPReq+0x2b2>
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	3310      	adds	r3, #16
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	e00b      	b.n	8007ab6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <USBD_StdEPReq+0x2d8>
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b80      	cmp	r3, #128	@ 0x80
 8007ac2:	d103      	bne.n	8007acc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	e00e      	b.n	8007aea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 f850 	bl	8008b76 <USBD_LL_IsStallEP>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	e002      	b.n	8007aea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2202      	movs	r2, #2
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fbd1 	bl	8008298 <USBD_CtlSendData>
              break;
 8007af6:	e004      	b.n	8007b02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fb5b 	bl	80081b6 <USBD_CtlError>
              break;
 8007b00:	bf00      	nop
          }
          break;
 8007b02:	e004      	b.n	8007b0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fb55 	bl	80081b6 <USBD_CtlError>
          break;
 8007b0c:	bf00      	nop
      }
      break;
 8007b0e:	e005      	b.n	8007b1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fb4f 	bl	80081b6 <USBD_CtlError>
      break;
 8007b18:	e000      	b.n	8007b1c <USBD_StdEPReq+0x330>
      break;
 8007b1a:	bf00      	nop
  }

  return ret;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	885b      	ldrh	r3, [r3, #2]
 8007b42:	0a1b      	lsrs	r3, r3, #8
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	2b06      	cmp	r3, #6
 8007b4a:	f200 8128 	bhi.w	8007d9e <USBD_GetDescriptor+0x276>
 8007b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <USBD_GetDescriptor+0x2c>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b71 	.word	0x08007b71
 8007b58:	08007b89 	.word	0x08007b89
 8007b5c:	08007bc9 	.word	0x08007bc9
 8007b60:	08007d9f 	.word	0x08007d9f
 8007b64:	08007d9f 	.word	0x08007d9f
 8007b68:	08007d3f 	.word	0x08007d3f
 8007b6c:	08007d6b 	.word	0x08007d6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	7c12      	ldrb	r2, [r2, #16]
 8007b7c:	f107 0108 	add.w	r1, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
      break;
 8007b86:	e112      	b.n	8007dae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7c1b      	ldrb	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10d      	bne.n	8007bac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b98:	f107 0208 	add.w	r2, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007baa:	e100      	b.n	8007dae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb4:	f107 0208 	add.w	r2, r7, #8
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	701a      	strb	r2, [r3, #0]
      break;
 8007bc6:	e0f2      	b.n	8007dae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	885b      	ldrh	r3, [r3, #2]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b05      	cmp	r3, #5
 8007bd0:	f200 80ac 	bhi.w	8007d2c <USBD_GetDescriptor+0x204>
 8007bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <USBD_GetDescriptor+0xb4>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007bf5 	.word	0x08007bf5
 8007be0:	08007c29 	.word	0x08007c29
 8007be4:	08007c5d 	.word	0x08007c5d
 8007be8:	08007c91 	.word	0x08007c91
 8007bec:	08007cc5 	.word	0x08007cc5
 8007bf0:	08007cf9 	.word	0x08007cf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00b      	beq.n	8007c18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	7c12      	ldrb	r2, [r2, #16]
 8007c0c:	f107 0108 	add.w	r1, r7, #8
 8007c10:	4610      	mov	r0, r2
 8007c12:	4798      	blx	r3
 8007c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c16:	e091      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 facb 	bl	80081b6 <USBD_CtlError>
            err++;
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	3301      	adds	r3, #1
 8007c24:	72fb      	strb	r3, [r7, #11]
          break;
 8007c26:	e089      	b.n	8007d3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00b      	beq.n	8007c4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	7c12      	ldrb	r2, [r2, #16]
 8007c40:	f107 0108 	add.w	r1, r7, #8
 8007c44:	4610      	mov	r0, r2
 8007c46:	4798      	blx	r3
 8007c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c4a:	e077      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fab1 	bl	80081b6 <USBD_CtlError>
            err++;
 8007c54:	7afb      	ldrb	r3, [r7, #11]
 8007c56:	3301      	adds	r3, #1
 8007c58:	72fb      	strb	r3, [r7, #11]
          break;
 8007c5a:	e06f      	b.n	8007d3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	7c12      	ldrb	r2, [r2, #16]
 8007c74:	f107 0108 	add.w	r1, r7, #8
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
 8007c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7e:	e05d      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa97 	bl	80081b6 <USBD_CtlError>
            err++;
 8007c88:	7afb      	ldrb	r3, [r7, #11]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8e:	e055      	b.n	8007d3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	7c12      	ldrb	r2, [r2, #16]
 8007ca8:	f107 0108 	add.w	r1, r7, #8
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb2:	e043      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fa7d 	bl	80081b6 <USBD_CtlError>
            err++;
 8007cbc:	7afb      	ldrb	r3, [r7, #11]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc2:	e03b      	b.n	8007d3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	7c12      	ldrb	r2, [r2, #16]
 8007cdc:	f107 0108 	add.w	r1, r7, #8
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
 8007ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce6:	e029      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa63 	bl	80081b6 <USBD_CtlError>
            err++;
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf6:	e021      	b.n	8007d3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	7c12      	ldrb	r2, [r2, #16]
 8007d10:	f107 0108 	add.w	r1, r7, #8
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
 8007d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1a:	e00f      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa49 	bl	80081b6 <USBD_CtlError>
            err++;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	3301      	adds	r3, #1
 8007d28:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2a:	e007      	b.n	8007d3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa41 	bl	80081b6 <USBD_CtlError>
          err++;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	3301      	adds	r3, #1
 8007d38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d3a:	bf00      	nop
      }
      break;
 8007d3c:	e037      	b.n	8007dae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	7c1b      	ldrb	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d109      	bne.n	8007d5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d4e:	f107 0208 	add.w	r2, r7, #8
 8007d52:	4610      	mov	r0, r2
 8007d54:	4798      	blx	r3
 8007d56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d58:	e029      	b.n	8007dae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa2a 	bl	80081b6 <USBD_CtlError>
        err++;
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	3301      	adds	r3, #1
 8007d66:	72fb      	strb	r3, [r7, #11]
      break;
 8007d68:	e021      	b.n	8007dae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	7c1b      	ldrb	r3, [r3, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10d      	bne.n	8007d8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7a:	f107 0208 	add.w	r2, r7, #8
 8007d7e:	4610      	mov	r0, r2
 8007d80:	4798      	blx	r3
 8007d82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3301      	adds	r3, #1
 8007d88:	2207      	movs	r2, #7
 8007d8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d8c:	e00f      	b.n	8007dae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fa10 	bl	80081b6 <USBD_CtlError>
        err++;
 8007d96:	7afb      	ldrb	r3, [r7, #11]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d9c:	e007      	b.n	8007dae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa08 	bl	80081b6 <USBD_CtlError>
      err++;
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	3301      	adds	r3, #1
 8007daa:	72fb      	strb	r3, [r7, #11]
      break;
 8007dac:	bf00      	nop
  }

  if (err != 0U)
 8007dae:	7afb      	ldrb	r3, [r7, #11]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d11e      	bne.n	8007df2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	88db      	ldrh	r3, [r3, #6]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d016      	beq.n	8007dea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007dbc:	893b      	ldrh	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00e      	beq.n	8007de0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	88da      	ldrh	r2, [r3, #6]
 8007dc6:	893b      	ldrh	r3, [r7, #8]
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	bf28      	it	cs
 8007dcc:	4613      	movcs	r3, r2
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dd2:	893b      	ldrh	r3, [r7, #8]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	68f9      	ldr	r1, [r7, #12]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fa5d 	bl	8008298 <USBD_CtlSendData>
 8007dde:	e009      	b.n	8007df4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f9e7 	bl	80081b6 <USBD_CtlError>
 8007de8:	e004      	b.n	8007df4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa91 	bl	8008312 <USBD_CtlSendStatus>
 8007df0:	e000      	b.n	8007df4 <USBD_GetDescriptor+0x2cc>
    return;
 8007df2:	bf00      	nop
  }
}
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop

08007dfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	889b      	ldrh	r3, [r3, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d131      	bne.n	8007e72 <USBD_SetAddress+0x76>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88db      	ldrh	r3, [r3, #6]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d12d      	bne.n	8007e72 <USBD_SetAddress+0x76>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	885b      	ldrh	r3, [r3, #2]
 8007e1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e1c:	d829      	bhi.n	8007e72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	885b      	ldrh	r3, [r3, #2]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d104      	bne.n	8007e40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f9bc 	bl	80081b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3e:	e01d      	b.n	8007e7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	7bfa      	ldrb	r2, [r7, #15]
 8007e44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 febe 	bl	8008bce <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa5d 	bl	8008312 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2202      	movs	r2, #2
 8007e62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e66:	e009      	b.n	8007e7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e70:	e004      	b.n	8007e7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f99e 	bl	80081b6 <USBD_CtlError>
  }
}
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	885b      	ldrh	r3, [r3, #2]
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	4b4e      	ldr	r3, [pc, #312]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007e9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d905      	bls.n	8007eb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f985 	bl	80081b6 <USBD_CtlError>
    return USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e08c      	b.n	8007fca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d002      	beq.n	8007ec2 <USBD_SetConfig+0x3e>
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d029      	beq.n	8007f14 <USBD_SetConfig+0x90>
 8007ec0:	e075      	b.n	8007fae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ec2:	4b44      	ldr	r3, [pc, #272]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d020      	beq.n	8007f0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007eca:	4b42      	ldr	r3, [pc, #264]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7fe ffe4 	bl	8006ea8 <USBD_SetClassConfig>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f962 	bl	80081b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007efa:	e065      	b.n	8007fc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fa08 	bl	8008312 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2203      	movs	r2, #3
 8007f06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f0a:	e05d      	b.n	8007fc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fa00 	bl	8008312 <USBD_CtlSendStatus>
      break;
 8007f12:	e059      	b.n	8007fc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f14:	4b2f      	ldr	r3, [pc, #188]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d112      	bne.n	8007f42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007f24:	4b2b      	ldr	r3, [pc, #172]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f2e:	4b29      	ldr	r3, [pc, #164]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7fe ffd3 	bl	8006ee0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f9e9 	bl	8008312 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f40:	e042      	b.n	8007fc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f42:	4b24      	ldr	r3, [pc, #144]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d02a      	beq.n	8007fa6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7fe ffc1 	bl	8006ee0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f68:	4b1a      	ldr	r3, [pc, #104]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fe ff9a 	bl	8006ea8 <USBD_SetClassConfig>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00f      	beq.n	8007f9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f918 	bl	80081b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7fe ffa6 	bl	8006ee0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f9c:	e014      	b.n	8007fc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f9b7 	bl	8008312 <USBD_CtlSendStatus>
      break;
 8007fa4:	e010      	b.n	8007fc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f9b3 	bl	8008312 <USBD_CtlSendStatus>
      break;
 8007fac:	e00c      	b.n	8007fc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f900 	bl	80081b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fb6:	4b07      	ldr	r3, [pc, #28]	@ (8007fd4 <USBD_SetConfig+0x150>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7fe ff8f 	bl	8006ee0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc6:	bf00      	nop
  }

  return ret;
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	200002e8 	.word	0x200002e8

08007fd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	88db      	ldrh	r3, [r3, #6]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d004      	beq.n	8007ff4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f8e2 	bl	80081b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ff2:	e023      	b.n	800803c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	dc02      	bgt.n	8008006 <USBD_GetConfig+0x2e>
 8008000:	2b00      	cmp	r3, #0
 8008002:	dc03      	bgt.n	800800c <USBD_GetConfig+0x34>
 8008004:	e015      	b.n	8008032 <USBD_GetConfig+0x5a>
 8008006:	2b03      	cmp	r3, #3
 8008008:	d00b      	beq.n	8008022 <USBD_GetConfig+0x4a>
 800800a:	e012      	b.n	8008032 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3308      	adds	r3, #8
 8008016:	2201      	movs	r2, #1
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f93c 	bl	8008298 <USBD_CtlSendData>
        break;
 8008020:	e00c      	b.n	800803c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3304      	adds	r3, #4
 8008026:	2201      	movs	r2, #1
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f934 	bl	8008298 <USBD_CtlSendData>
        break;
 8008030:	e004      	b.n	800803c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f8be 	bl	80081b6 <USBD_CtlError>
        break;
 800803a:	bf00      	nop
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008054:	b2db      	uxtb	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	2b02      	cmp	r3, #2
 800805a:	d81e      	bhi.n	800809a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	88db      	ldrh	r3, [r3, #6]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d004      	beq.n	800806e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f8a5 	bl	80081b6 <USBD_CtlError>
        break;
 800806c:	e01a      	b.n	80080a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f043 0202 	orr.w	r2, r3, #2
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	330c      	adds	r3, #12
 800808e:	2202      	movs	r2, #2
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f900 	bl	8008298 <USBD_CtlSendData>
      break;
 8008098:	e004      	b.n	80080a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f88a 	bl	80081b6 <USBD_CtlError>
      break;
 80080a2:	bf00      	nop
  }
}
 80080a4:	bf00      	nop
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	885b      	ldrh	r3, [r3, #2]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d107      	bne.n	80080ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f923 	bl	8008312 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80080cc:	e013      	b.n	80080f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	885b      	ldrh	r3, [r3, #2]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d10b      	bne.n	80080ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	889b      	ldrh	r3, [r3, #4]
 80080da:	0a1b      	lsrs	r3, r3, #8
 80080dc:	b29b      	uxth	r3, r3
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f913 	bl	8008312 <USBD_CtlSendStatus>
}
 80080ec:	e003      	b.n	80080f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f860 	bl	80081b6 <USBD_CtlError>
}
 80080f6:	bf00      	nop
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800810e:	b2db      	uxtb	r3, r3
 8008110:	3b01      	subs	r3, #1
 8008112:	2b02      	cmp	r3, #2
 8008114:	d80b      	bhi.n	800812e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	885b      	ldrh	r3, [r3, #2]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d10c      	bne.n	8008138 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f8f3 	bl	8008312 <USBD_CtlSendStatus>
      }
      break;
 800812c:	e004      	b.n	8008138 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f840 	bl	80081b6 <USBD_CtlError>
      break;
 8008136:	e000      	b.n	800813a <USBD_ClrFeature+0x3c>
      break;
 8008138:	bf00      	nop
  }
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	781a      	ldrb	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3301      	adds	r3, #1
 800815c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	781a      	ldrb	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff fa41 	bl	80075f4 <SWAPBYTE>
 8008172:	4603      	mov	r3, r0
 8008174:	461a      	mov	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3301      	adds	r3, #1
 800817e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3301      	adds	r3, #1
 8008184:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7ff fa34 	bl	80075f4 <SWAPBYTE>
 800818c:	4603      	mov	r3, r0
 800818e:	461a      	mov	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3301      	adds	r3, #1
 8008198:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff fa27 	bl	80075f4 <SWAPBYTE>
 80081a6:	4603      	mov	r3, r0
 80081a8:	461a      	mov	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	80da      	strh	r2, [r3, #6]
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081c0:	2180      	movs	r1, #128	@ 0x80
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fc99 	bl	8008afa <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081c8:	2100      	movs	r1, #0
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fc95 	bl	8008afa <USBD_LL_StallEP>
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d036      	beq.n	800825c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081f2:	6938      	ldr	r0, [r7, #16]
 80081f4:	f000 f836 	bl	8008264 <USBD_GetLen>
 80081f8:	4603      	mov	r3, r0
 80081fa:	3301      	adds	r3, #1
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	4413      	add	r3, r2
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	7812      	ldrb	r2, [r2, #0]
 8008210:	701a      	strb	r2, [r3, #0]
  idx++;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	3301      	adds	r3, #1
 8008216:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	2203      	movs	r2, #3
 8008220:	701a      	strb	r2, [r3, #0]
  idx++;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	3301      	adds	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008228:	e013      	b.n	8008252 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	4413      	add	r3, r2
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	7812      	ldrb	r2, [r2, #0]
 8008234:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3301      	adds	r3, #1
 800823a:	613b      	str	r3, [r7, #16]
    idx++;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	3301      	adds	r3, #1
 8008240:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	4413      	add	r3, r2
 8008248:	2200      	movs	r2, #0
 800824a:	701a      	strb	r2, [r3, #0]
    idx++;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	3301      	adds	r3, #1
 8008250:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e7      	bne.n	800822a <USBD_GetString+0x52>
 800825a:	e000      	b.n	800825e <USBD_GetString+0x86>
    return;
 800825c:	bf00      	nop
  }
}
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008274:	e005      	b.n	8008282 <USBD_GetLen+0x1e>
  {
    len++;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	3301      	adds	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	3301      	adds	r3, #1
 8008280:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f5      	bne.n	8008276 <USBD_GetLen+0x12>
  }

  return len;
 800828a:	7bfb      	ldrb	r3, [r7, #15]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	2100      	movs	r1, #0
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 fca4 	bl	8008c0c <USBD_LL_Transmit>

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	2100      	movs	r1, #0
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fc93 	bl	8008c0c <USBD_LL_Transmit>

  return USBD_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	2100      	movs	r1, #0
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fca3 	bl	8008c4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2204      	movs	r2, #4
 800831e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008322:	2300      	movs	r3, #0
 8008324:	2200      	movs	r2, #0
 8008326:	2100      	movs	r1, #0
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc6f 	bl	8008c0c <USBD_LL_Transmit>

  return USBD_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2205      	movs	r2, #5
 8008344:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008348:	2300      	movs	r3, #0
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fc7d 	bl	8008c4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008364:	2200      	movs	r2, #0
 8008366:	4912      	ldr	r1, [pc, #72]	@ (80083b0 <MX_USB_DEVICE_Init+0x50>)
 8008368:	4812      	ldr	r0, [pc, #72]	@ (80083b4 <MX_USB_DEVICE_Init+0x54>)
 800836a:	f7fe fd20 	bl	8006dae <USBD_Init>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008374:	f7f8 fe5c 	bl	8001030 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008378:	490f      	ldr	r1, [pc, #60]	@ (80083b8 <MX_USB_DEVICE_Init+0x58>)
 800837a:	480e      	ldr	r0, [pc, #56]	@ (80083b4 <MX_USB_DEVICE_Init+0x54>)
 800837c:	f7fe fd47 	bl	8006e0e <USBD_RegisterClass>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008386:	f7f8 fe53 	bl	8001030 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800838a:	490c      	ldr	r1, [pc, #48]	@ (80083bc <MX_USB_DEVICE_Init+0x5c>)
 800838c:	4809      	ldr	r0, [pc, #36]	@ (80083b4 <MX_USB_DEVICE_Init+0x54>)
 800838e:	f7fc ffc5 	bl	800531c <USBD_MSC_RegisterStorage>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008398:	f7f8 fe4a 	bl	8001030 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800839c:	4805      	ldr	r0, [pc, #20]	@ (80083b4 <MX_USB_DEVICE_Init+0x54>)
 800839e:	f7fe fd6c 	bl	8006e7a <USBD_Start>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083a8:	f7f8 fe42 	bl	8001030 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083ac:	bf00      	nop
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	2000008c 	.word	0x2000008c
 80083b4:	200002ec 	.word	0x200002ec
 80083b8:	2000000c 	.word	0x2000000c
 80083bc:	200000dc 	.word	0x200000dc

080083c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	6039      	str	r1, [r7, #0]
 80083ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2212      	movs	r2, #18
 80083d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083d2:	4b03      	ldr	r3, [pc, #12]	@ (80083e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	200000a8 	.word	0x200000a8

080083e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	6039      	str	r1, [r7, #0]
 80083ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2204      	movs	r2, #4
 80083f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083f6:	4b03      	ldr	r3, [pc, #12]	@ (8008404 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	200000bc 	.word	0x200000bc

08008408 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	6039      	str	r1, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d105      	bne.n	8008426 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4907      	ldr	r1, [pc, #28]	@ (800843c <USBD_FS_ProductStrDescriptor+0x34>)
 800841e:	4808      	ldr	r0, [pc, #32]	@ (8008440 <USBD_FS_ProductStrDescriptor+0x38>)
 8008420:	f7ff feda 	bl	80081d8 <USBD_GetString>
 8008424:	e004      	b.n	8008430 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	4904      	ldr	r1, [pc, #16]	@ (800843c <USBD_FS_ProductStrDescriptor+0x34>)
 800842a:	4805      	ldr	r0, [pc, #20]	@ (8008440 <USBD_FS_ProductStrDescriptor+0x38>)
 800842c:	f7ff fed4 	bl	80081d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008430:	4b02      	ldr	r3, [pc, #8]	@ (800843c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	200005c8 	.word	0x200005c8
 8008440:	0800b658 	.word	0x0800b658

08008444 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	4904      	ldr	r1, [pc, #16]	@ (8008464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008454:	4804      	ldr	r0, [pc, #16]	@ (8008468 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008456:	f7ff febf 	bl	80081d8 <USBD_GetString>
  return USBD_StrDesc;
 800845a:	4b02      	ldr	r3, [pc, #8]	@ (8008464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	200005c8 	.word	0x200005c8
 8008468:	0800b66c 	.word	0x0800b66c

0800846c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	6039      	str	r1, [r7, #0]
 8008476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	221a      	movs	r2, #26
 800847c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800847e:	f000 f843 	bl	8008508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008482:	4b02      	ldr	r3, [pc, #8]	@ (800848c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	200000c0 	.word	0x200000c0

08008490 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d105      	bne.n	80084ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	4907      	ldr	r1, [pc, #28]	@ (80084c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084a6:	4808      	ldr	r0, [pc, #32]	@ (80084c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084a8:	f7ff fe96 	bl	80081d8 <USBD_GetString>
 80084ac:	e004      	b.n	80084b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	4904      	ldr	r1, [pc, #16]	@ (80084c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084b2:	4805      	ldr	r0, [pc, #20]	@ (80084c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084b4:	f7ff fe90 	bl	80081d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084b8:	4b02      	ldr	r3, [pc, #8]	@ (80084c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	200005c8 	.word	0x200005c8
 80084c8:	0800b680 	.word	0x0800b680

080084cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d105      	bne.n	80084ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4907      	ldr	r1, [pc, #28]	@ (8008500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084e2:	4808      	ldr	r0, [pc, #32]	@ (8008504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084e4:	f7ff fe78 	bl	80081d8 <USBD_GetString>
 80084e8:	e004      	b.n	80084f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	4904      	ldr	r1, [pc, #16]	@ (8008500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084ee:	4805      	ldr	r0, [pc, #20]	@ (8008504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084f0:	f7ff fe72 	bl	80081d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084f4:	4b02      	ldr	r3, [pc, #8]	@ (8008500 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	200005c8 	.word	0x200005c8
 8008504:	0800b68c 	.word	0x0800b68c

08008508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800850e:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <Get_SerialNum+0x44>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008514:	4b0e      	ldr	r3, [pc, #56]	@ (8008550 <Get_SerialNum+0x48>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800851a:	4b0e      	ldr	r3, [pc, #56]	@ (8008554 <Get_SerialNum+0x4c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4413      	add	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d009      	beq.n	8008542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800852e:	2208      	movs	r2, #8
 8008530:	4909      	ldr	r1, [pc, #36]	@ (8008558 <Get_SerialNum+0x50>)
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 f814 	bl	8008560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008538:	2204      	movs	r2, #4
 800853a:	4908      	ldr	r1, [pc, #32]	@ (800855c <Get_SerialNum+0x54>)
 800853c:	68b8      	ldr	r0, [r7, #8]
 800853e:	f000 f80f 	bl	8008560 <IntToUnicode>
  }
}
 8008542:	bf00      	nop
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	1fff7a10 	.word	0x1fff7a10
 8008550:	1fff7a14 	.word	0x1fff7a14
 8008554:	1fff7a18 	.word	0x1fff7a18
 8008558:	200000c2 	.word	0x200000c2
 800855c:	200000d2 	.word	0x200000d2

08008560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	4613      	mov	r3, r2
 800856c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008572:	2300      	movs	r3, #0
 8008574:	75fb      	strb	r3, [r7, #23]
 8008576:	e027      	b.n	80085c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	0f1b      	lsrs	r3, r3, #28
 800857c:	2b09      	cmp	r3, #9
 800857e:	d80b      	bhi.n	8008598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	0f1b      	lsrs	r3, r3, #28
 8008584:	b2da      	uxtb	r2, r3
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	4619      	mov	r1, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	440b      	add	r3, r1
 8008590:	3230      	adds	r2, #48	@ 0x30
 8008592:	b2d2      	uxtb	r2, r2
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	e00a      	b.n	80085ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	0f1b      	lsrs	r3, r3, #28
 800859c:	b2da      	uxtb	r2, r3
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	4619      	mov	r1, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	440b      	add	r3, r1
 80085a8:	3237      	adds	r2, #55	@ 0x37
 80085aa:	b2d2      	uxtb	r2, r2
 80085ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	3301      	adds	r3, #1
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	4413      	add	r3, r2
 80085be:	2200      	movs	r2, #0
 80085c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	3301      	adds	r3, #1
 80085c6:	75fb      	strb	r3, [r7, #23]
 80085c8:	7dfa      	ldrb	r2, [r7, #23]
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d3d3      	bcc.n	8008578 <IntToUnicode+0x18>
  }
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	371c      	adds	r7, #28
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	4603      	mov	r3, r0
 80085e6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 80085e8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b085      	sub	sp, #20
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	4603      	mov	r3, r0
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	22c8      	movs	r2, #200	@ 0xc8
 8008608:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008610:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8008612:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800862a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800862c:	4618      	mov	r0, r3
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	4603      	mov	r3, r0
 8008640:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8008642:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
 800865a:	461a      	mov	r2, r3
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
 8008660:	4613      	mov	r3, r2
 8008662:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	025b      	lsls	r3, r3, #9
 8008668:	4a06      	ldr	r2, [pc, #24]	@ (8008684 <STORAGE_Read_FS+0x34>)
 800866a:	1899      	adds	r1, r3, r2
 800866c:	89bb      	ldrh	r3, [r7, #12]
 800866e:	025b      	lsls	r3, r3, #9
 8008670:	461a      	mov	r2, r3
 8008672:	68b8      	ldr	r0, [r7, #8]
 8008674:	f001 f941 	bl	80098fa <memcpy>

  return (USBD_OK);
 8008678:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	200007c8 	.word	0x200007c8

08008688 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	607a      	str	r2, [r7, #4]
 8008692:	461a      	mov	r2, r3
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]
 8008698:	4613      	mov	r3, r2
 800869a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	025b      	lsls	r3, r3, #9
 80086a0:	4a06      	ldr	r2, [pc, #24]	@ (80086bc <STORAGE_Write_FS+0x34>)
 80086a2:	1898      	adds	r0, r3, r2
 80086a4:	89bb      	ldrh	r3, [r7, #12]
 80086a6:	025b      	lsls	r3, r3, #9
 80086a8:	461a      	mov	r2, r3
 80086aa:	68b9      	ldr	r1, [r7, #8]
 80086ac:	f001 f925 	bl	80098fa <memcpy>
  return (USBD_OK);
 80086b0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	200007c8 	.word	0x200007c8

080086c0 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80086c4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08a      	sub	sp, #40	@ 0x28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d8:	f107 0314 	add.w	r3, r7, #20
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	609a      	str	r2, [r3, #8]
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086f0:	d147      	bne.n	8008782 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086f2:	2300      	movs	r3, #0
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	4b25      	ldr	r3, [pc, #148]	@ (800878c <HAL_PCD_MspInit+0xbc>)
 80086f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fa:	4a24      	ldr	r2, [pc, #144]	@ (800878c <HAL_PCD_MspInit+0xbc>)
 80086fc:	f043 0301 	orr.w	r3, r3, #1
 8008700:	6313      	str	r3, [r2, #48]	@ 0x30
 8008702:	4b22      	ldr	r3, [pc, #136]	@ (800878c <HAL_PCD_MspInit+0xbc>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800870e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008714:	2300      	movs	r3, #0
 8008716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008718:	2300      	movs	r3, #0
 800871a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800871c:	f107 0314 	add.w	r3, r7, #20
 8008720:	4619      	mov	r1, r3
 8008722:	481b      	ldr	r0, [pc, #108]	@ (8008790 <HAL_PCD_MspInit+0xc0>)
 8008724:	f7f8 ff96 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008728:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800872c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800872e:	2302      	movs	r3, #2
 8008730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008732:	2300      	movs	r3, #0
 8008734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008736:	2303      	movs	r3, #3
 8008738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800873a:	230a      	movs	r3, #10
 800873c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800873e:	f107 0314 	add.w	r3, r7, #20
 8008742:	4619      	mov	r1, r3
 8008744:	4812      	ldr	r0, [pc, #72]	@ (8008790 <HAL_PCD_MspInit+0xc0>)
 8008746:	f7f8 ff85 	bl	8001654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800874a:	4b10      	ldr	r3, [pc, #64]	@ (800878c <HAL_PCD_MspInit+0xbc>)
 800874c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800874e:	4a0f      	ldr	r2, [pc, #60]	@ (800878c <HAL_PCD_MspInit+0xbc>)
 8008750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008754:	6353      	str	r3, [r2, #52]	@ 0x34
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	4b0c      	ldr	r3, [pc, #48]	@ (800878c <HAL_PCD_MspInit+0xbc>)
 800875c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800875e:	4a0b      	ldr	r2, [pc, #44]	@ (800878c <HAL_PCD_MspInit+0xbc>)
 8008760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008764:	6453      	str	r3, [r2, #68]	@ 0x44
 8008766:	4b09      	ldr	r3, [pc, #36]	@ (800878c <HAL_PCD_MspInit+0xbc>)
 8008768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800876a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008772:	2200      	movs	r2, #0
 8008774:	2100      	movs	r1, #0
 8008776:	2043      	movs	r0, #67	@ 0x43
 8008778:	f7f8 ff35 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800877c:	2043      	movs	r0, #67	@ 0x43
 800877e:	f7f8 ff4e 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008782:	bf00      	nop
 8008784:	3728      	adds	r7, #40	@ 0x28
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	40023800 	.word	0x40023800
 8008790:	40020000 	.word	0x40020000

08008794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80087a8:	4619      	mov	r1, r3
 80087aa:	4610      	mov	r0, r2
 80087ac:	f7fe fbb2 	bl	8006f14 <USBD_LL_SetupStage>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80087ca:	78fa      	ldrb	r2, [r7, #3]
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	4613      	mov	r3, r2
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	4619      	mov	r1, r3
 80087e2:	f7fe fbec 	bl	8006fbe <USBD_LL_DataOutStage>
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	460b      	mov	r3, r1
 80087f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008800:	78fa      	ldrb	r2, [r7, #3]
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	4613      	mov	r3, r2
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	3320      	adds	r3, #32
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	78fb      	ldrb	r3, [r7, #3]
 8008814:	4619      	mov	r1, r3
 8008816:	f7fe fc85 	bl	8007124 <USBD_LL_DataInStage>
}
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fdbf 	bl	80073b4 <USBD_LL_SOF>
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008846:	2301      	movs	r3, #1
 8008848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	79db      	ldrb	r3, [r3, #7]
 800884e:	2b02      	cmp	r3, #2
 8008850:	d001      	beq.n	8008856 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008852:	f7f8 fbed 	bl	8001030 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800885c:	7bfa      	ldrb	r2, [r7, #15]
 800885e:	4611      	mov	r1, r2
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fd63 	bl	800732c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe fd0b 	bl	8007288 <USBD_LL_Reset>
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe fd5e 	bl	800734c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6812      	ldr	r2, [r2, #0]
 800889e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80088a2:	f043 0301 	orr.w	r3, r3, #1
 80088a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	7adb      	ldrb	r3, [r3, #11]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088b0:	4b04      	ldr	r3, [pc, #16]	@ (80088c4 <HAL_PCD_SuspendCallback+0x48>)
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	4a03      	ldr	r2, [pc, #12]	@ (80088c4 <HAL_PCD_SuspendCallback+0x48>)
 80088b6:	f043 0306 	orr.w	r3, r3, #6
 80088ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	e000ed00 	.word	0xe000ed00

080088c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fd54 	bl	8007384 <USBD_LL_Resume>
}
 80088dc:	bf00      	nop
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088f6:	78fa      	ldrb	r2, [r7, #3]
 80088f8:	4611      	mov	r1, r2
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fdac 	bl	8007458 <USBD_LL_IsoOUTIncomplete>
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe fd68 	bl	80073f4 <USBD_LL_IsoINIncomplete>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fdbe 	bl	80074bc <USBD_LL_DevConnected>
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fdbb 	bl	80074d2 <USBD_LL_DevDisconnected>
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d13c      	bne.n	80089ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008974:	4a20      	ldr	r2, [pc, #128]	@ (80089f8 <USBD_LL_Init+0x94>)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a1e      	ldr	r2, [pc, #120]	@ (80089f8 <USBD_LL_Init+0x94>)
 8008980:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008984:	4b1c      	ldr	r3, [pc, #112]	@ (80089f8 <USBD_LL_Init+0x94>)
 8008986:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800898a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800898c:	4b1a      	ldr	r3, [pc, #104]	@ (80089f8 <USBD_LL_Init+0x94>)
 800898e:	2204      	movs	r2, #4
 8008990:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008992:	4b19      	ldr	r3, [pc, #100]	@ (80089f8 <USBD_LL_Init+0x94>)
 8008994:	2202      	movs	r2, #2
 8008996:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008998:	4b17      	ldr	r3, [pc, #92]	@ (80089f8 <USBD_LL_Init+0x94>)
 800899a:	2200      	movs	r2, #0
 800899c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800899e:	4b16      	ldr	r3, [pc, #88]	@ (80089f8 <USBD_LL_Init+0x94>)
 80089a0:	2202      	movs	r2, #2
 80089a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80089a4:	4b14      	ldr	r3, [pc, #80]	@ (80089f8 <USBD_LL_Init+0x94>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089aa:	4b13      	ldr	r3, [pc, #76]	@ (80089f8 <USBD_LL_Init+0x94>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80089b0:	4b11      	ldr	r3, [pc, #68]	@ (80089f8 <USBD_LL_Init+0x94>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80089b6:	4b10      	ldr	r3, [pc, #64]	@ (80089f8 <USBD_LL_Init+0x94>)
 80089b8:	2201      	movs	r2, #1
 80089ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80089bc:	4b0e      	ldr	r3, [pc, #56]	@ (80089f8 <USBD_LL_Init+0x94>)
 80089be:	2200      	movs	r2, #0
 80089c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80089c2:	480d      	ldr	r0, [pc, #52]	@ (80089f8 <USBD_LL_Init+0x94>)
 80089c4:	f7f8 ffe3 	bl	800198e <HAL_PCD_Init>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80089ce:	f7f8 fb2f 	bl	8001030 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80089d2:	2180      	movs	r1, #128	@ 0x80
 80089d4:	4808      	ldr	r0, [pc, #32]	@ (80089f8 <USBD_LL_Init+0x94>)
 80089d6:	f7fa fa3a 	bl	8002e4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089da:	2240      	movs	r2, #64	@ 0x40
 80089dc:	2100      	movs	r1, #0
 80089de:	4806      	ldr	r0, [pc, #24]	@ (80089f8 <USBD_LL_Init+0x94>)
 80089e0:	f7fa f9ee 	bl	8002dc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089e4:	2280      	movs	r2, #128	@ 0x80
 80089e6:	2101      	movs	r1, #1
 80089e8:	4803      	ldr	r0, [pc, #12]	@ (80089f8 <USBD_LL_Init+0x94>)
 80089ea:	f7fa f9e9 	bl	8002dc0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	200197c8 	.word	0x200197c8

080089fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f9 f8ca 	bl	8001bac <HAL_PCD_Start>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f962 	bl	8008ce8 <USBD_Get_USB_Status>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	4608      	mov	r0, r1
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4603      	mov	r3, r0
 8008a42:	70fb      	strb	r3, [r7, #3]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70bb      	strb	r3, [r7, #2]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008a5a:	78bb      	ldrb	r3, [r7, #2]
 8008a5c:	883a      	ldrh	r2, [r7, #0]
 8008a5e:	78f9      	ldrb	r1, [r7, #3]
 8008a60:	f7f9 fd9e 	bl	80025a0 <HAL_PCD_EP_Open>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f93c 	bl	8008ce8 <USBD_Get_USB_Status>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7f9 fde7 	bl	8002670 <HAL_PCD_EP_Close>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f91d 	bl	8008ce8 <USBD_Get_USB_Status>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ad6:	78fa      	ldrb	r2, [r7, #3]
 8008ad8:	4611      	mov	r1, r2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7f9 ff89 	bl	80029f2 <HAL_PCD_EP_Flush>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f8fe 	bl	8008ce8 <USBD_Get_USB_Status>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b14:	78fa      	ldrb	r2, [r7, #3]
 8008b16:	4611      	mov	r1, r2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7f9 fe80 	bl	800281e <HAL_PCD_EP_SetStall>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 f8df 	bl	8008ce8 <USBD_Get_USB_Status>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f9 fec4 	bl	80028e4 <HAL_PCD_EP_ClrStall>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f8c0 	bl	8008ce8 <USBD_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b88:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	da0b      	bge.n	8008baa <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b92:	78fb      	ldrb	r3, [r7, #3]
 8008b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b98:	68f9      	ldr	r1, [r7, #12]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	4413      	add	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	440b      	add	r3, r1
 8008ba4:	3316      	adds	r3, #22
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	e00b      	b.n	8008bc2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008baa:	78fb      	ldrb	r3, [r7, #3]
 8008bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bb0:	68f9      	ldr	r1, [r7, #12]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	00db      	lsls	r3, r3, #3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	440b      	add	r3, r1
 8008bbc:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008bc0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008be8:	78fa      	ldrb	r2, [r7, #3]
 8008bea:	4611      	mov	r1, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7f9 fcb3 	bl	8002558 <HAL_PCD_SetAddress>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 f875 	bl	8008ce8 <USBD_Get_USB_Status>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	607a      	str	r2, [r7, #4]
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c2a:	7af9      	ldrb	r1, [r7, #11]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	f7f9 fdbb 	bl	80027aa <HAL_PCD_EP_Transmit>
 8008c34:	4603      	mov	r3, r0
 8008c36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 f854 	bl	8008ce8 <USBD_Get_USB_Status>
 8008c40:	4603      	mov	r3, r0
 8008c42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c44:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b086      	sub	sp, #24
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c6c:	7af9      	ldrb	r1, [r7, #11]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	f7f9 fd47 	bl	8002704 <HAL_PCD_EP_Receive>
 8008c76:	4603      	mov	r3, r0
 8008c78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 f833 	bl	8008ce8 <USBD_Get_USB_Status>
 8008c82:	4603      	mov	r3, r0
 8008c84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c86:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ca2:	78fa      	ldrb	r2, [r7, #3]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7f9 fd67 	bl	800277a <HAL_PCD_EP_GetRxCount>
 8008cac:	4603      	mov	r3, r0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008cc0:	4b03      	ldr	r3, [pc, #12]	@ (8008cd0 <USBD_static_malloc+0x18>)
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20019cac 	.word	0x20019cac

08008cd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]

}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d817      	bhi.n	8008d2c <USBD_Get_USB_Status+0x44>
 8008cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8008d04 <USBD_Get_USB_Status+0x1c>)
 8008cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d02:	bf00      	nop
 8008d04:	08008d15 	.word	0x08008d15
 8008d08:	08008d1b 	.word	0x08008d1b
 8008d0c:	08008d21 	.word	0x08008d21
 8008d10:	08008d27 	.word	0x08008d27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
    break;
 8008d18:	e00b      	b.n	8008d32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1e:	e008      	b.n	8008d32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d20:	2301      	movs	r3, #1
 8008d22:	73fb      	strb	r3, [r7, #15]
    break;
 8008d24:	e005      	b.n	8008d32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d26:	2303      	movs	r3, #3
 8008d28:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2a:	e002      	b.n	8008d32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d30:	bf00      	nop
  }
  return usb_status;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <__cvt>:
 8008d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d44:	ec57 6b10 	vmov	r6, r7, d0
 8008d48:	2f00      	cmp	r7, #0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	463b      	mov	r3, r7
 8008d50:	bfbb      	ittet	lt
 8008d52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008d56:	461f      	movlt	r7, r3
 8008d58:	2300      	movge	r3, #0
 8008d5a:	232d      	movlt	r3, #45	@ 0x2d
 8008d5c:	700b      	strb	r3, [r1, #0]
 8008d5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008d64:	4691      	mov	r9, r2
 8008d66:	f023 0820 	bic.w	r8, r3, #32
 8008d6a:	bfbc      	itt	lt
 8008d6c:	4632      	movlt	r2, r6
 8008d6e:	4616      	movlt	r6, r2
 8008d70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d74:	d005      	beq.n	8008d82 <__cvt+0x42>
 8008d76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008d7a:	d100      	bne.n	8008d7e <__cvt+0x3e>
 8008d7c:	3401      	adds	r4, #1
 8008d7e:	2102      	movs	r1, #2
 8008d80:	e000      	b.n	8008d84 <__cvt+0x44>
 8008d82:	2103      	movs	r1, #3
 8008d84:	ab03      	add	r3, sp, #12
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	ab02      	add	r3, sp, #8
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	ec47 6b10 	vmov	d0, r6, r7
 8008d90:	4653      	mov	r3, sl
 8008d92:	4622      	mov	r2, r4
 8008d94:	f000 fe48 	bl	8009a28 <_dtoa_r>
 8008d98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	d119      	bne.n	8008dd4 <__cvt+0x94>
 8008da0:	f019 0f01 	tst.w	r9, #1
 8008da4:	d00e      	beq.n	8008dc4 <__cvt+0x84>
 8008da6:	eb00 0904 	add.w	r9, r0, r4
 8008daa:	2200      	movs	r2, #0
 8008dac:	2300      	movs	r3, #0
 8008dae:	4630      	mov	r0, r6
 8008db0:	4639      	mov	r1, r7
 8008db2:	f7f7 fe91 	bl	8000ad8 <__aeabi_dcmpeq>
 8008db6:	b108      	cbz	r0, 8008dbc <__cvt+0x7c>
 8008db8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008dbc:	2230      	movs	r2, #48	@ 0x30
 8008dbe:	9b03      	ldr	r3, [sp, #12]
 8008dc0:	454b      	cmp	r3, r9
 8008dc2:	d31e      	bcc.n	8008e02 <__cvt+0xc2>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dc8:	1b5b      	subs	r3, r3, r5
 8008dca:	4628      	mov	r0, r5
 8008dcc:	6013      	str	r3, [r2, #0]
 8008dce:	b004      	add	sp, #16
 8008dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008dd8:	eb00 0904 	add.w	r9, r0, r4
 8008ddc:	d1e5      	bne.n	8008daa <__cvt+0x6a>
 8008dde:	7803      	ldrb	r3, [r0, #0]
 8008de0:	2b30      	cmp	r3, #48	@ 0x30
 8008de2:	d10a      	bne.n	8008dfa <__cvt+0xba>
 8008de4:	2200      	movs	r2, #0
 8008de6:	2300      	movs	r3, #0
 8008de8:	4630      	mov	r0, r6
 8008dea:	4639      	mov	r1, r7
 8008dec:	f7f7 fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8008df0:	b918      	cbnz	r0, 8008dfa <__cvt+0xba>
 8008df2:	f1c4 0401 	rsb	r4, r4, #1
 8008df6:	f8ca 4000 	str.w	r4, [sl]
 8008dfa:	f8da 3000 	ldr.w	r3, [sl]
 8008dfe:	4499      	add	r9, r3
 8008e00:	e7d3      	b.n	8008daa <__cvt+0x6a>
 8008e02:	1c59      	adds	r1, r3, #1
 8008e04:	9103      	str	r1, [sp, #12]
 8008e06:	701a      	strb	r2, [r3, #0]
 8008e08:	e7d9      	b.n	8008dbe <__cvt+0x7e>

08008e0a <__exponent>:
 8008e0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	bfba      	itte	lt
 8008e10:	4249      	neglt	r1, r1
 8008e12:	232d      	movlt	r3, #45	@ 0x2d
 8008e14:	232b      	movge	r3, #43	@ 0x2b
 8008e16:	2909      	cmp	r1, #9
 8008e18:	7002      	strb	r2, [r0, #0]
 8008e1a:	7043      	strb	r3, [r0, #1]
 8008e1c:	dd29      	ble.n	8008e72 <__exponent+0x68>
 8008e1e:	f10d 0307 	add.w	r3, sp, #7
 8008e22:	461d      	mov	r5, r3
 8008e24:	270a      	movs	r7, #10
 8008e26:	461a      	mov	r2, r3
 8008e28:	fbb1 f6f7 	udiv	r6, r1, r7
 8008e2c:	fb07 1416 	mls	r4, r7, r6, r1
 8008e30:	3430      	adds	r4, #48	@ 0x30
 8008e32:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008e36:	460c      	mov	r4, r1
 8008e38:	2c63      	cmp	r4, #99	@ 0x63
 8008e3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e3e:	4631      	mov	r1, r6
 8008e40:	dcf1      	bgt.n	8008e26 <__exponent+0x1c>
 8008e42:	3130      	adds	r1, #48	@ 0x30
 8008e44:	1e94      	subs	r4, r2, #2
 8008e46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e4a:	1c41      	adds	r1, r0, #1
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	42ab      	cmp	r3, r5
 8008e50:	d30a      	bcc.n	8008e68 <__exponent+0x5e>
 8008e52:	f10d 0309 	add.w	r3, sp, #9
 8008e56:	1a9b      	subs	r3, r3, r2
 8008e58:	42ac      	cmp	r4, r5
 8008e5a:	bf88      	it	hi
 8008e5c:	2300      	movhi	r3, #0
 8008e5e:	3302      	adds	r3, #2
 8008e60:	4403      	add	r3, r0
 8008e62:	1a18      	subs	r0, r3, r0
 8008e64:	b003      	add	sp, #12
 8008e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e68:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008e6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008e70:	e7ed      	b.n	8008e4e <__exponent+0x44>
 8008e72:	2330      	movs	r3, #48	@ 0x30
 8008e74:	3130      	adds	r1, #48	@ 0x30
 8008e76:	7083      	strb	r3, [r0, #2]
 8008e78:	70c1      	strb	r1, [r0, #3]
 8008e7a:	1d03      	adds	r3, r0, #4
 8008e7c:	e7f1      	b.n	8008e62 <__exponent+0x58>
	...

08008e80 <_printf_float>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	b08d      	sub	sp, #52	@ 0x34
 8008e86:	460c      	mov	r4, r1
 8008e88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008e8c:	4616      	mov	r6, r2
 8008e8e:	461f      	mov	r7, r3
 8008e90:	4605      	mov	r5, r0
 8008e92:	f000 fcbb 	bl	800980c <_localeconv_r>
 8008e96:	6803      	ldr	r3, [r0, #0]
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7f7 f9f0 	bl	8000280 <strlen>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ea8:	9005      	str	r0, [sp, #20]
 8008eaa:	3307      	adds	r3, #7
 8008eac:	f023 0307 	bic.w	r3, r3, #7
 8008eb0:	f103 0208 	add.w	r2, r3, #8
 8008eb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008eb8:	f8d4 b000 	ldr.w	fp, [r4]
 8008ebc:	f8c8 2000 	str.w	r2, [r8]
 8008ec0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ec4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008ec8:	9307      	str	r3, [sp, #28]
 8008eca:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ece:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ed6:	4b9c      	ldr	r3, [pc, #624]	@ (8009148 <_printf_float+0x2c8>)
 8008ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8008edc:	f7f7 fe2e 	bl	8000b3c <__aeabi_dcmpun>
 8008ee0:	bb70      	cbnz	r0, 8008f40 <_printf_float+0xc0>
 8008ee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ee6:	4b98      	ldr	r3, [pc, #608]	@ (8009148 <_printf_float+0x2c8>)
 8008ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8008eec:	f7f7 fe08 	bl	8000b00 <__aeabi_dcmple>
 8008ef0:	bb30      	cbnz	r0, 8008f40 <_printf_float+0xc0>
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	4649      	mov	r1, r9
 8008efa:	f7f7 fdf7 	bl	8000aec <__aeabi_dcmplt>
 8008efe:	b110      	cbz	r0, 8008f06 <_printf_float+0x86>
 8008f00:	232d      	movs	r3, #45	@ 0x2d
 8008f02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f06:	4a91      	ldr	r2, [pc, #580]	@ (800914c <_printf_float+0x2cc>)
 8008f08:	4b91      	ldr	r3, [pc, #580]	@ (8009150 <_printf_float+0x2d0>)
 8008f0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008f0e:	bf94      	ite	ls
 8008f10:	4690      	movls	r8, r2
 8008f12:	4698      	movhi	r8, r3
 8008f14:	2303      	movs	r3, #3
 8008f16:	6123      	str	r3, [r4, #16]
 8008f18:	f02b 0304 	bic.w	r3, fp, #4
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	f04f 0900 	mov.w	r9, #0
 8008f22:	9700      	str	r7, [sp, #0]
 8008f24:	4633      	mov	r3, r6
 8008f26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008f28:	4621      	mov	r1, r4
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f000 f9d2 	bl	80092d4 <_printf_common>
 8008f30:	3001      	adds	r0, #1
 8008f32:	f040 808d 	bne.w	8009050 <_printf_float+0x1d0>
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3a:	b00d      	add	sp, #52	@ 0x34
 8008f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f40:	4642      	mov	r2, r8
 8008f42:	464b      	mov	r3, r9
 8008f44:	4640      	mov	r0, r8
 8008f46:	4649      	mov	r1, r9
 8008f48:	f7f7 fdf8 	bl	8000b3c <__aeabi_dcmpun>
 8008f4c:	b140      	cbz	r0, 8008f60 <_printf_float+0xe0>
 8008f4e:	464b      	mov	r3, r9
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bfbc      	itt	lt
 8008f54:	232d      	movlt	r3, #45	@ 0x2d
 8008f56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8009154 <_printf_float+0x2d4>)
 8008f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8009158 <_printf_float+0x2d8>)
 8008f5e:	e7d4      	b.n	8008f0a <_printf_float+0x8a>
 8008f60:	6863      	ldr	r3, [r4, #4]
 8008f62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008f66:	9206      	str	r2, [sp, #24]
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	d13b      	bne.n	8008fe4 <_printf_float+0x164>
 8008f6c:	2306      	movs	r3, #6
 8008f6e:	6063      	str	r3, [r4, #4]
 8008f70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008f74:	2300      	movs	r3, #0
 8008f76:	6022      	str	r2, [r4, #0]
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8008f7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008f80:	ab09      	add	r3, sp, #36	@ 0x24
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	6861      	ldr	r1, [r4, #4]
 8008f86:	ec49 8b10 	vmov	d0, r8, r9
 8008f8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f7ff fed6 	bl	8008d40 <__cvt>
 8008f94:	9b06      	ldr	r3, [sp, #24]
 8008f96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f98:	2b47      	cmp	r3, #71	@ 0x47
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	d129      	bne.n	8008ff2 <_printf_float+0x172>
 8008f9e:	1cc8      	adds	r0, r1, #3
 8008fa0:	db02      	blt.n	8008fa8 <_printf_float+0x128>
 8008fa2:	6863      	ldr	r3, [r4, #4]
 8008fa4:	4299      	cmp	r1, r3
 8008fa6:	dd41      	ble.n	800902c <_printf_float+0x1ac>
 8008fa8:	f1aa 0a02 	sub.w	sl, sl, #2
 8008fac:	fa5f fa8a 	uxtb.w	sl, sl
 8008fb0:	3901      	subs	r1, #1
 8008fb2:	4652      	mov	r2, sl
 8008fb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008fb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fba:	f7ff ff26 	bl	8008e0a <__exponent>
 8008fbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fc0:	1813      	adds	r3, r2, r0
 8008fc2:	2a01      	cmp	r2, #1
 8008fc4:	4681      	mov	r9, r0
 8008fc6:	6123      	str	r3, [r4, #16]
 8008fc8:	dc02      	bgt.n	8008fd0 <_printf_float+0x150>
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	07d2      	lsls	r2, r2, #31
 8008fce:	d501      	bpl.n	8008fd4 <_printf_float+0x154>
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	6123      	str	r3, [r4, #16]
 8008fd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0a2      	beq.n	8008f22 <_printf_float+0xa2>
 8008fdc:	232d      	movs	r3, #45	@ 0x2d
 8008fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fe2:	e79e      	b.n	8008f22 <_printf_float+0xa2>
 8008fe4:	9a06      	ldr	r2, [sp, #24]
 8008fe6:	2a47      	cmp	r2, #71	@ 0x47
 8008fe8:	d1c2      	bne.n	8008f70 <_printf_float+0xf0>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1c0      	bne.n	8008f70 <_printf_float+0xf0>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e7bd      	b.n	8008f6e <_printf_float+0xee>
 8008ff2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ff6:	d9db      	bls.n	8008fb0 <_printf_float+0x130>
 8008ff8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ffc:	d118      	bne.n	8009030 <_printf_float+0x1b0>
 8008ffe:	2900      	cmp	r1, #0
 8009000:	6863      	ldr	r3, [r4, #4]
 8009002:	dd0b      	ble.n	800901c <_printf_float+0x19c>
 8009004:	6121      	str	r1, [r4, #16]
 8009006:	b913      	cbnz	r3, 800900e <_printf_float+0x18e>
 8009008:	6822      	ldr	r2, [r4, #0]
 800900a:	07d0      	lsls	r0, r2, #31
 800900c:	d502      	bpl.n	8009014 <_printf_float+0x194>
 800900e:	3301      	adds	r3, #1
 8009010:	440b      	add	r3, r1
 8009012:	6123      	str	r3, [r4, #16]
 8009014:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009016:	f04f 0900 	mov.w	r9, #0
 800901a:	e7db      	b.n	8008fd4 <_printf_float+0x154>
 800901c:	b913      	cbnz	r3, 8009024 <_printf_float+0x1a4>
 800901e:	6822      	ldr	r2, [r4, #0]
 8009020:	07d2      	lsls	r2, r2, #31
 8009022:	d501      	bpl.n	8009028 <_printf_float+0x1a8>
 8009024:	3302      	adds	r3, #2
 8009026:	e7f4      	b.n	8009012 <_printf_float+0x192>
 8009028:	2301      	movs	r3, #1
 800902a:	e7f2      	b.n	8009012 <_printf_float+0x192>
 800902c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009032:	4299      	cmp	r1, r3
 8009034:	db05      	blt.n	8009042 <_printf_float+0x1c2>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	6121      	str	r1, [r4, #16]
 800903a:	07d8      	lsls	r0, r3, #31
 800903c:	d5ea      	bpl.n	8009014 <_printf_float+0x194>
 800903e:	1c4b      	adds	r3, r1, #1
 8009040:	e7e7      	b.n	8009012 <_printf_float+0x192>
 8009042:	2900      	cmp	r1, #0
 8009044:	bfd4      	ite	le
 8009046:	f1c1 0202 	rsble	r2, r1, #2
 800904a:	2201      	movgt	r2, #1
 800904c:	4413      	add	r3, r2
 800904e:	e7e0      	b.n	8009012 <_printf_float+0x192>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	055a      	lsls	r2, r3, #21
 8009054:	d407      	bmi.n	8009066 <_printf_float+0x1e6>
 8009056:	6923      	ldr	r3, [r4, #16]
 8009058:	4642      	mov	r2, r8
 800905a:	4631      	mov	r1, r6
 800905c:	4628      	mov	r0, r5
 800905e:	47b8      	blx	r7
 8009060:	3001      	adds	r0, #1
 8009062:	d12b      	bne.n	80090bc <_printf_float+0x23c>
 8009064:	e767      	b.n	8008f36 <_printf_float+0xb6>
 8009066:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800906a:	f240 80dd 	bls.w	8009228 <_printf_float+0x3a8>
 800906e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009072:	2200      	movs	r2, #0
 8009074:	2300      	movs	r3, #0
 8009076:	f7f7 fd2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800907a:	2800      	cmp	r0, #0
 800907c:	d033      	beq.n	80090e6 <_printf_float+0x266>
 800907e:	4a37      	ldr	r2, [pc, #220]	@ (800915c <_printf_float+0x2dc>)
 8009080:	2301      	movs	r3, #1
 8009082:	4631      	mov	r1, r6
 8009084:	4628      	mov	r0, r5
 8009086:	47b8      	blx	r7
 8009088:	3001      	adds	r0, #1
 800908a:	f43f af54 	beq.w	8008f36 <_printf_float+0xb6>
 800908e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009092:	4543      	cmp	r3, r8
 8009094:	db02      	blt.n	800909c <_printf_float+0x21c>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	07d8      	lsls	r0, r3, #31
 800909a:	d50f      	bpl.n	80090bc <_printf_float+0x23c>
 800909c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090a0:	4631      	mov	r1, r6
 80090a2:	4628      	mov	r0, r5
 80090a4:	47b8      	blx	r7
 80090a6:	3001      	adds	r0, #1
 80090a8:	f43f af45 	beq.w	8008f36 <_printf_float+0xb6>
 80090ac:	f04f 0900 	mov.w	r9, #0
 80090b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80090b4:	f104 0a1a 	add.w	sl, r4, #26
 80090b8:	45c8      	cmp	r8, r9
 80090ba:	dc09      	bgt.n	80090d0 <_printf_float+0x250>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	079b      	lsls	r3, r3, #30
 80090c0:	f100 8103 	bmi.w	80092ca <_printf_float+0x44a>
 80090c4:	68e0      	ldr	r0, [r4, #12]
 80090c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090c8:	4298      	cmp	r0, r3
 80090ca:	bfb8      	it	lt
 80090cc:	4618      	movlt	r0, r3
 80090ce:	e734      	b.n	8008f3a <_printf_float+0xba>
 80090d0:	2301      	movs	r3, #1
 80090d2:	4652      	mov	r2, sl
 80090d4:	4631      	mov	r1, r6
 80090d6:	4628      	mov	r0, r5
 80090d8:	47b8      	blx	r7
 80090da:	3001      	adds	r0, #1
 80090dc:	f43f af2b 	beq.w	8008f36 <_printf_float+0xb6>
 80090e0:	f109 0901 	add.w	r9, r9, #1
 80090e4:	e7e8      	b.n	80090b8 <_printf_float+0x238>
 80090e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	dc39      	bgt.n	8009160 <_printf_float+0x2e0>
 80090ec:	4a1b      	ldr	r2, [pc, #108]	@ (800915c <_printf_float+0x2dc>)
 80090ee:	2301      	movs	r3, #1
 80090f0:	4631      	mov	r1, r6
 80090f2:	4628      	mov	r0, r5
 80090f4:	47b8      	blx	r7
 80090f6:	3001      	adds	r0, #1
 80090f8:	f43f af1d 	beq.w	8008f36 <_printf_float+0xb6>
 80090fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009100:	ea59 0303 	orrs.w	r3, r9, r3
 8009104:	d102      	bne.n	800910c <_printf_float+0x28c>
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	07d9      	lsls	r1, r3, #31
 800910a:	d5d7      	bpl.n	80090bc <_printf_float+0x23c>
 800910c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009110:	4631      	mov	r1, r6
 8009112:	4628      	mov	r0, r5
 8009114:	47b8      	blx	r7
 8009116:	3001      	adds	r0, #1
 8009118:	f43f af0d 	beq.w	8008f36 <_printf_float+0xb6>
 800911c:	f04f 0a00 	mov.w	sl, #0
 8009120:	f104 0b1a 	add.w	fp, r4, #26
 8009124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009126:	425b      	negs	r3, r3
 8009128:	4553      	cmp	r3, sl
 800912a:	dc01      	bgt.n	8009130 <_printf_float+0x2b0>
 800912c:	464b      	mov	r3, r9
 800912e:	e793      	b.n	8009058 <_printf_float+0x1d8>
 8009130:	2301      	movs	r3, #1
 8009132:	465a      	mov	r2, fp
 8009134:	4631      	mov	r1, r6
 8009136:	4628      	mov	r0, r5
 8009138:	47b8      	blx	r7
 800913a:	3001      	adds	r0, #1
 800913c:	f43f aefb 	beq.w	8008f36 <_printf_float+0xb6>
 8009140:	f10a 0a01 	add.w	sl, sl, #1
 8009144:	e7ee      	b.n	8009124 <_printf_float+0x2a4>
 8009146:	bf00      	nop
 8009148:	7fefffff 	.word	0x7fefffff
 800914c:	0800b6d0 	.word	0x0800b6d0
 8009150:	0800b6d4 	.word	0x0800b6d4
 8009154:	0800b6d8 	.word	0x0800b6d8
 8009158:	0800b6dc 	.word	0x0800b6dc
 800915c:	0800b6e0 	.word	0x0800b6e0
 8009160:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009162:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009166:	4553      	cmp	r3, sl
 8009168:	bfa8      	it	ge
 800916a:	4653      	movge	r3, sl
 800916c:	2b00      	cmp	r3, #0
 800916e:	4699      	mov	r9, r3
 8009170:	dc36      	bgt.n	80091e0 <_printf_float+0x360>
 8009172:	f04f 0b00 	mov.w	fp, #0
 8009176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800917a:	f104 021a 	add.w	r2, r4, #26
 800917e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009180:	9306      	str	r3, [sp, #24]
 8009182:	eba3 0309 	sub.w	r3, r3, r9
 8009186:	455b      	cmp	r3, fp
 8009188:	dc31      	bgt.n	80091ee <_printf_float+0x36e>
 800918a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800918c:	459a      	cmp	sl, r3
 800918e:	dc3a      	bgt.n	8009206 <_printf_float+0x386>
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	07da      	lsls	r2, r3, #31
 8009194:	d437      	bmi.n	8009206 <_printf_float+0x386>
 8009196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009198:	ebaa 0903 	sub.w	r9, sl, r3
 800919c:	9b06      	ldr	r3, [sp, #24]
 800919e:	ebaa 0303 	sub.w	r3, sl, r3
 80091a2:	4599      	cmp	r9, r3
 80091a4:	bfa8      	it	ge
 80091a6:	4699      	movge	r9, r3
 80091a8:	f1b9 0f00 	cmp.w	r9, #0
 80091ac:	dc33      	bgt.n	8009216 <_printf_float+0x396>
 80091ae:	f04f 0800 	mov.w	r8, #0
 80091b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091b6:	f104 0b1a 	add.w	fp, r4, #26
 80091ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091bc:	ebaa 0303 	sub.w	r3, sl, r3
 80091c0:	eba3 0309 	sub.w	r3, r3, r9
 80091c4:	4543      	cmp	r3, r8
 80091c6:	f77f af79 	ble.w	80090bc <_printf_float+0x23c>
 80091ca:	2301      	movs	r3, #1
 80091cc:	465a      	mov	r2, fp
 80091ce:	4631      	mov	r1, r6
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b8      	blx	r7
 80091d4:	3001      	adds	r0, #1
 80091d6:	f43f aeae 	beq.w	8008f36 <_printf_float+0xb6>
 80091da:	f108 0801 	add.w	r8, r8, #1
 80091de:	e7ec      	b.n	80091ba <_printf_float+0x33a>
 80091e0:	4642      	mov	r2, r8
 80091e2:	4631      	mov	r1, r6
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b8      	blx	r7
 80091e8:	3001      	adds	r0, #1
 80091ea:	d1c2      	bne.n	8009172 <_printf_float+0x2f2>
 80091ec:	e6a3      	b.n	8008f36 <_printf_float+0xb6>
 80091ee:	2301      	movs	r3, #1
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	9206      	str	r2, [sp, #24]
 80091f6:	47b8      	blx	r7
 80091f8:	3001      	adds	r0, #1
 80091fa:	f43f ae9c 	beq.w	8008f36 <_printf_float+0xb6>
 80091fe:	9a06      	ldr	r2, [sp, #24]
 8009200:	f10b 0b01 	add.w	fp, fp, #1
 8009204:	e7bb      	b.n	800917e <_printf_float+0x2fe>
 8009206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800920a:	4631      	mov	r1, r6
 800920c:	4628      	mov	r0, r5
 800920e:	47b8      	blx	r7
 8009210:	3001      	adds	r0, #1
 8009212:	d1c0      	bne.n	8009196 <_printf_float+0x316>
 8009214:	e68f      	b.n	8008f36 <_printf_float+0xb6>
 8009216:	9a06      	ldr	r2, [sp, #24]
 8009218:	464b      	mov	r3, r9
 800921a:	4442      	add	r2, r8
 800921c:	4631      	mov	r1, r6
 800921e:	4628      	mov	r0, r5
 8009220:	47b8      	blx	r7
 8009222:	3001      	adds	r0, #1
 8009224:	d1c3      	bne.n	80091ae <_printf_float+0x32e>
 8009226:	e686      	b.n	8008f36 <_printf_float+0xb6>
 8009228:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800922c:	f1ba 0f01 	cmp.w	sl, #1
 8009230:	dc01      	bgt.n	8009236 <_printf_float+0x3b6>
 8009232:	07db      	lsls	r3, r3, #31
 8009234:	d536      	bpl.n	80092a4 <_printf_float+0x424>
 8009236:	2301      	movs	r3, #1
 8009238:	4642      	mov	r2, r8
 800923a:	4631      	mov	r1, r6
 800923c:	4628      	mov	r0, r5
 800923e:	47b8      	blx	r7
 8009240:	3001      	adds	r0, #1
 8009242:	f43f ae78 	beq.w	8008f36 <_printf_float+0xb6>
 8009246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	47b8      	blx	r7
 8009250:	3001      	adds	r0, #1
 8009252:	f43f ae70 	beq.w	8008f36 <_printf_float+0xb6>
 8009256:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800925a:	2200      	movs	r2, #0
 800925c:	2300      	movs	r3, #0
 800925e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009262:	f7f7 fc39 	bl	8000ad8 <__aeabi_dcmpeq>
 8009266:	b9c0      	cbnz	r0, 800929a <_printf_float+0x41a>
 8009268:	4653      	mov	r3, sl
 800926a:	f108 0201 	add.w	r2, r8, #1
 800926e:	4631      	mov	r1, r6
 8009270:	4628      	mov	r0, r5
 8009272:	47b8      	blx	r7
 8009274:	3001      	adds	r0, #1
 8009276:	d10c      	bne.n	8009292 <_printf_float+0x412>
 8009278:	e65d      	b.n	8008f36 <_printf_float+0xb6>
 800927a:	2301      	movs	r3, #1
 800927c:	465a      	mov	r2, fp
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	47b8      	blx	r7
 8009284:	3001      	adds	r0, #1
 8009286:	f43f ae56 	beq.w	8008f36 <_printf_float+0xb6>
 800928a:	f108 0801 	add.w	r8, r8, #1
 800928e:	45d0      	cmp	r8, sl
 8009290:	dbf3      	blt.n	800927a <_printf_float+0x3fa>
 8009292:	464b      	mov	r3, r9
 8009294:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009298:	e6df      	b.n	800905a <_printf_float+0x1da>
 800929a:	f04f 0800 	mov.w	r8, #0
 800929e:	f104 0b1a 	add.w	fp, r4, #26
 80092a2:	e7f4      	b.n	800928e <_printf_float+0x40e>
 80092a4:	2301      	movs	r3, #1
 80092a6:	4642      	mov	r2, r8
 80092a8:	e7e1      	b.n	800926e <_printf_float+0x3ee>
 80092aa:	2301      	movs	r3, #1
 80092ac:	464a      	mov	r2, r9
 80092ae:	4631      	mov	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b8      	blx	r7
 80092b4:	3001      	adds	r0, #1
 80092b6:	f43f ae3e 	beq.w	8008f36 <_printf_float+0xb6>
 80092ba:	f108 0801 	add.w	r8, r8, #1
 80092be:	68e3      	ldr	r3, [r4, #12]
 80092c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092c2:	1a5b      	subs	r3, r3, r1
 80092c4:	4543      	cmp	r3, r8
 80092c6:	dcf0      	bgt.n	80092aa <_printf_float+0x42a>
 80092c8:	e6fc      	b.n	80090c4 <_printf_float+0x244>
 80092ca:	f04f 0800 	mov.w	r8, #0
 80092ce:	f104 0919 	add.w	r9, r4, #25
 80092d2:	e7f4      	b.n	80092be <_printf_float+0x43e>

080092d4 <_printf_common>:
 80092d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d8:	4616      	mov	r6, r2
 80092da:	4698      	mov	r8, r3
 80092dc:	688a      	ldr	r2, [r1, #8]
 80092de:	690b      	ldr	r3, [r1, #16]
 80092e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092e4:	4293      	cmp	r3, r2
 80092e6:	bfb8      	it	lt
 80092e8:	4613      	movlt	r3, r2
 80092ea:	6033      	str	r3, [r6, #0]
 80092ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80092f0:	4607      	mov	r7, r0
 80092f2:	460c      	mov	r4, r1
 80092f4:	b10a      	cbz	r2, 80092fa <_printf_common+0x26>
 80092f6:	3301      	adds	r3, #1
 80092f8:	6033      	str	r3, [r6, #0]
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	0699      	lsls	r1, r3, #26
 80092fe:	bf42      	ittt	mi
 8009300:	6833      	ldrmi	r3, [r6, #0]
 8009302:	3302      	addmi	r3, #2
 8009304:	6033      	strmi	r3, [r6, #0]
 8009306:	6825      	ldr	r5, [r4, #0]
 8009308:	f015 0506 	ands.w	r5, r5, #6
 800930c:	d106      	bne.n	800931c <_printf_common+0x48>
 800930e:	f104 0a19 	add.w	sl, r4, #25
 8009312:	68e3      	ldr	r3, [r4, #12]
 8009314:	6832      	ldr	r2, [r6, #0]
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	42ab      	cmp	r3, r5
 800931a:	dc26      	bgt.n	800936a <_printf_common+0x96>
 800931c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009320:	6822      	ldr	r2, [r4, #0]
 8009322:	3b00      	subs	r3, #0
 8009324:	bf18      	it	ne
 8009326:	2301      	movne	r3, #1
 8009328:	0692      	lsls	r2, r2, #26
 800932a:	d42b      	bmi.n	8009384 <_printf_common+0xb0>
 800932c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009330:	4641      	mov	r1, r8
 8009332:	4638      	mov	r0, r7
 8009334:	47c8      	blx	r9
 8009336:	3001      	adds	r0, #1
 8009338:	d01e      	beq.n	8009378 <_printf_common+0xa4>
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	6922      	ldr	r2, [r4, #16]
 800933e:	f003 0306 	and.w	r3, r3, #6
 8009342:	2b04      	cmp	r3, #4
 8009344:	bf02      	ittt	eq
 8009346:	68e5      	ldreq	r5, [r4, #12]
 8009348:	6833      	ldreq	r3, [r6, #0]
 800934a:	1aed      	subeq	r5, r5, r3
 800934c:	68a3      	ldr	r3, [r4, #8]
 800934e:	bf0c      	ite	eq
 8009350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009354:	2500      	movne	r5, #0
 8009356:	4293      	cmp	r3, r2
 8009358:	bfc4      	itt	gt
 800935a:	1a9b      	subgt	r3, r3, r2
 800935c:	18ed      	addgt	r5, r5, r3
 800935e:	2600      	movs	r6, #0
 8009360:	341a      	adds	r4, #26
 8009362:	42b5      	cmp	r5, r6
 8009364:	d11a      	bne.n	800939c <_printf_common+0xc8>
 8009366:	2000      	movs	r0, #0
 8009368:	e008      	b.n	800937c <_printf_common+0xa8>
 800936a:	2301      	movs	r3, #1
 800936c:	4652      	mov	r2, sl
 800936e:	4641      	mov	r1, r8
 8009370:	4638      	mov	r0, r7
 8009372:	47c8      	blx	r9
 8009374:	3001      	adds	r0, #1
 8009376:	d103      	bne.n	8009380 <_printf_common+0xac>
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009380:	3501      	adds	r5, #1
 8009382:	e7c6      	b.n	8009312 <_printf_common+0x3e>
 8009384:	18e1      	adds	r1, r4, r3
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	2030      	movs	r0, #48	@ 0x30
 800938a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800938e:	4422      	add	r2, r4
 8009390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009398:	3302      	adds	r3, #2
 800939a:	e7c7      	b.n	800932c <_printf_common+0x58>
 800939c:	2301      	movs	r3, #1
 800939e:	4622      	mov	r2, r4
 80093a0:	4641      	mov	r1, r8
 80093a2:	4638      	mov	r0, r7
 80093a4:	47c8      	blx	r9
 80093a6:	3001      	adds	r0, #1
 80093a8:	d0e6      	beq.n	8009378 <_printf_common+0xa4>
 80093aa:	3601      	adds	r6, #1
 80093ac:	e7d9      	b.n	8009362 <_printf_common+0x8e>
	...

080093b0 <_printf_i>:
 80093b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093b4:	7e0f      	ldrb	r7, [r1, #24]
 80093b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093b8:	2f78      	cmp	r7, #120	@ 0x78
 80093ba:	4691      	mov	r9, r2
 80093bc:	4680      	mov	r8, r0
 80093be:	460c      	mov	r4, r1
 80093c0:	469a      	mov	sl, r3
 80093c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093c6:	d807      	bhi.n	80093d8 <_printf_i+0x28>
 80093c8:	2f62      	cmp	r7, #98	@ 0x62
 80093ca:	d80a      	bhi.n	80093e2 <_printf_i+0x32>
 80093cc:	2f00      	cmp	r7, #0
 80093ce:	f000 80d2 	beq.w	8009576 <_printf_i+0x1c6>
 80093d2:	2f58      	cmp	r7, #88	@ 0x58
 80093d4:	f000 80b9 	beq.w	800954a <_printf_i+0x19a>
 80093d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80093e0:	e03a      	b.n	8009458 <_printf_i+0xa8>
 80093e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80093e6:	2b15      	cmp	r3, #21
 80093e8:	d8f6      	bhi.n	80093d8 <_printf_i+0x28>
 80093ea:	a101      	add	r1, pc, #4	@ (adr r1, 80093f0 <_printf_i+0x40>)
 80093ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093f0:	08009449 	.word	0x08009449
 80093f4:	0800945d 	.word	0x0800945d
 80093f8:	080093d9 	.word	0x080093d9
 80093fc:	080093d9 	.word	0x080093d9
 8009400:	080093d9 	.word	0x080093d9
 8009404:	080093d9 	.word	0x080093d9
 8009408:	0800945d 	.word	0x0800945d
 800940c:	080093d9 	.word	0x080093d9
 8009410:	080093d9 	.word	0x080093d9
 8009414:	080093d9 	.word	0x080093d9
 8009418:	080093d9 	.word	0x080093d9
 800941c:	0800955d 	.word	0x0800955d
 8009420:	08009487 	.word	0x08009487
 8009424:	08009517 	.word	0x08009517
 8009428:	080093d9 	.word	0x080093d9
 800942c:	080093d9 	.word	0x080093d9
 8009430:	0800957f 	.word	0x0800957f
 8009434:	080093d9 	.word	0x080093d9
 8009438:	08009487 	.word	0x08009487
 800943c:	080093d9 	.word	0x080093d9
 8009440:	080093d9 	.word	0x080093d9
 8009444:	0800951f 	.word	0x0800951f
 8009448:	6833      	ldr	r3, [r6, #0]
 800944a:	1d1a      	adds	r2, r3, #4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6032      	str	r2, [r6, #0]
 8009450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009458:	2301      	movs	r3, #1
 800945a:	e09d      	b.n	8009598 <_printf_i+0x1e8>
 800945c:	6833      	ldr	r3, [r6, #0]
 800945e:	6820      	ldr	r0, [r4, #0]
 8009460:	1d19      	adds	r1, r3, #4
 8009462:	6031      	str	r1, [r6, #0]
 8009464:	0606      	lsls	r6, r0, #24
 8009466:	d501      	bpl.n	800946c <_printf_i+0xbc>
 8009468:	681d      	ldr	r5, [r3, #0]
 800946a:	e003      	b.n	8009474 <_printf_i+0xc4>
 800946c:	0645      	lsls	r5, r0, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0xb8>
 8009470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009474:	2d00      	cmp	r5, #0
 8009476:	da03      	bge.n	8009480 <_printf_i+0xd0>
 8009478:	232d      	movs	r3, #45	@ 0x2d
 800947a:	426d      	negs	r5, r5
 800947c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009480:	4859      	ldr	r0, [pc, #356]	@ (80095e8 <_printf_i+0x238>)
 8009482:	230a      	movs	r3, #10
 8009484:	e011      	b.n	80094aa <_printf_i+0xfa>
 8009486:	6821      	ldr	r1, [r4, #0]
 8009488:	6833      	ldr	r3, [r6, #0]
 800948a:	0608      	lsls	r0, r1, #24
 800948c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009490:	d402      	bmi.n	8009498 <_printf_i+0xe8>
 8009492:	0649      	lsls	r1, r1, #25
 8009494:	bf48      	it	mi
 8009496:	b2ad      	uxthmi	r5, r5
 8009498:	2f6f      	cmp	r7, #111	@ 0x6f
 800949a:	4853      	ldr	r0, [pc, #332]	@ (80095e8 <_printf_i+0x238>)
 800949c:	6033      	str	r3, [r6, #0]
 800949e:	bf14      	ite	ne
 80094a0:	230a      	movne	r3, #10
 80094a2:	2308      	moveq	r3, #8
 80094a4:	2100      	movs	r1, #0
 80094a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094aa:	6866      	ldr	r6, [r4, #4]
 80094ac:	60a6      	str	r6, [r4, #8]
 80094ae:	2e00      	cmp	r6, #0
 80094b0:	bfa2      	ittt	ge
 80094b2:	6821      	ldrge	r1, [r4, #0]
 80094b4:	f021 0104 	bicge.w	r1, r1, #4
 80094b8:	6021      	strge	r1, [r4, #0]
 80094ba:	b90d      	cbnz	r5, 80094c0 <_printf_i+0x110>
 80094bc:	2e00      	cmp	r6, #0
 80094be:	d04b      	beq.n	8009558 <_printf_i+0x1a8>
 80094c0:	4616      	mov	r6, r2
 80094c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80094c6:	fb03 5711 	mls	r7, r3, r1, r5
 80094ca:	5dc7      	ldrb	r7, [r0, r7]
 80094cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094d0:	462f      	mov	r7, r5
 80094d2:	42bb      	cmp	r3, r7
 80094d4:	460d      	mov	r5, r1
 80094d6:	d9f4      	bls.n	80094c2 <_printf_i+0x112>
 80094d8:	2b08      	cmp	r3, #8
 80094da:	d10b      	bne.n	80094f4 <_printf_i+0x144>
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	07df      	lsls	r7, r3, #31
 80094e0:	d508      	bpl.n	80094f4 <_printf_i+0x144>
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	6861      	ldr	r1, [r4, #4]
 80094e6:	4299      	cmp	r1, r3
 80094e8:	bfde      	ittt	le
 80094ea:	2330      	movle	r3, #48	@ 0x30
 80094ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094f4:	1b92      	subs	r2, r2, r6
 80094f6:	6122      	str	r2, [r4, #16]
 80094f8:	f8cd a000 	str.w	sl, [sp]
 80094fc:	464b      	mov	r3, r9
 80094fe:	aa03      	add	r2, sp, #12
 8009500:	4621      	mov	r1, r4
 8009502:	4640      	mov	r0, r8
 8009504:	f7ff fee6 	bl	80092d4 <_printf_common>
 8009508:	3001      	adds	r0, #1
 800950a:	d14a      	bne.n	80095a2 <_printf_i+0x1f2>
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	b004      	add	sp, #16
 8009512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	f043 0320 	orr.w	r3, r3, #32
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	4833      	ldr	r0, [pc, #204]	@ (80095ec <_printf_i+0x23c>)
 8009520:	2778      	movs	r7, #120	@ 0x78
 8009522:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	6831      	ldr	r1, [r6, #0]
 800952a:	061f      	lsls	r7, r3, #24
 800952c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009530:	d402      	bmi.n	8009538 <_printf_i+0x188>
 8009532:	065f      	lsls	r7, r3, #25
 8009534:	bf48      	it	mi
 8009536:	b2ad      	uxthmi	r5, r5
 8009538:	6031      	str	r1, [r6, #0]
 800953a:	07d9      	lsls	r1, r3, #31
 800953c:	bf44      	itt	mi
 800953e:	f043 0320 	orrmi.w	r3, r3, #32
 8009542:	6023      	strmi	r3, [r4, #0]
 8009544:	b11d      	cbz	r5, 800954e <_printf_i+0x19e>
 8009546:	2310      	movs	r3, #16
 8009548:	e7ac      	b.n	80094a4 <_printf_i+0xf4>
 800954a:	4827      	ldr	r0, [pc, #156]	@ (80095e8 <_printf_i+0x238>)
 800954c:	e7e9      	b.n	8009522 <_printf_i+0x172>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	f023 0320 	bic.w	r3, r3, #32
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	e7f6      	b.n	8009546 <_printf_i+0x196>
 8009558:	4616      	mov	r6, r2
 800955a:	e7bd      	b.n	80094d8 <_printf_i+0x128>
 800955c:	6833      	ldr	r3, [r6, #0]
 800955e:	6825      	ldr	r5, [r4, #0]
 8009560:	6961      	ldr	r1, [r4, #20]
 8009562:	1d18      	adds	r0, r3, #4
 8009564:	6030      	str	r0, [r6, #0]
 8009566:	062e      	lsls	r6, r5, #24
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	d501      	bpl.n	8009570 <_printf_i+0x1c0>
 800956c:	6019      	str	r1, [r3, #0]
 800956e:	e002      	b.n	8009576 <_printf_i+0x1c6>
 8009570:	0668      	lsls	r0, r5, #25
 8009572:	d5fb      	bpl.n	800956c <_printf_i+0x1bc>
 8009574:	8019      	strh	r1, [r3, #0]
 8009576:	2300      	movs	r3, #0
 8009578:	6123      	str	r3, [r4, #16]
 800957a:	4616      	mov	r6, r2
 800957c:	e7bc      	b.n	80094f8 <_printf_i+0x148>
 800957e:	6833      	ldr	r3, [r6, #0]
 8009580:	1d1a      	adds	r2, r3, #4
 8009582:	6032      	str	r2, [r6, #0]
 8009584:	681e      	ldr	r6, [r3, #0]
 8009586:	6862      	ldr	r2, [r4, #4]
 8009588:	2100      	movs	r1, #0
 800958a:	4630      	mov	r0, r6
 800958c:	f7f6 fe28 	bl	80001e0 <memchr>
 8009590:	b108      	cbz	r0, 8009596 <_printf_i+0x1e6>
 8009592:	1b80      	subs	r0, r0, r6
 8009594:	6060      	str	r0, [r4, #4]
 8009596:	6863      	ldr	r3, [r4, #4]
 8009598:	6123      	str	r3, [r4, #16]
 800959a:	2300      	movs	r3, #0
 800959c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095a0:	e7aa      	b.n	80094f8 <_printf_i+0x148>
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	4632      	mov	r2, r6
 80095a6:	4649      	mov	r1, r9
 80095a8:	4640      	mov	r0, r8
 80095aa:	47d0      	blx	sl
 80095ac:	3001      	adds	r0, #1
 80095ae:	d0ad      	beq.n	800950c <_printf_i+0x15c>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	079b      	lsls	r3, r3, #30
 80095b4:	d413      	bmi.n	80095de <_printf_i+0x22e>
 80095b6:	68e0      	ldr	r0, [r4, #12]
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	4298      	cmp	r0, r3
 80095bc:	bfb8      	it	lt
 80095be:	4618      	movlt	r0, r3
 80095c0:	e7a6      	b.n	8009510 <_printf_i+0x160>
 80095c2:	2301      	movs	r3, #1
 80095c4:	4632      	mov	r2, r6
 80095c6:	4649      	mov	r1, r9
 80095c8:	4640      	mov	r0, r8
 80095ca:	47d0      	blx	sl
 80095cc:	3001      	adds	r0, #1
 80095ce:	d09d      	beq.n	800950c <_printf_i+0x15c>
 80095d0:	3501      	adds	r5, #1
 80095d2:	68e3      	ldr	r3, [r4, #12]
 80095d4:	9903      	ldr	r1, [sp, #12]
 80095d6:	1a5b      	subs	r3, r3, r1
 80095d8:	42ab      	cmp	r3, r5
 80095da:	dcf2      	bgt.n	80095c2 <_printf_i+0x212>
 80095dc:	e7eb      	b.n	80095b6 <_printf_i+0x206>
 80095de:	2500      	movs	r5, #0
 80095e0:	f104 0619 	add.w	r6, r4, #25
 80095e4:	e7f5      	b.n	80095d2 <_printf_i+0x222>
 80095e6:	bf00      	nop
 80095e8:	0800b6e2 	.word	0x0800b6e2
 80095ec:	0800b6f3 	.word	0x0800b6f3

080095f0 <std>:
 80095f0:	2300      	movs	r3, #0
 80095f2:	b510      	push	{r4, lr}
 80095f4:	4604      	mov	r4, r0
 80095f6:	e9c0 3300 	strd	r3, r3, [r0]
 80095fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095fe:	6083      	str	r3, [r0, #8]
 8009600:	8181      	strh	r1, [r0, #12]
 8009602:	6643      	str	r3, [r0, #100]	@ 0x64
 8009604:	81c2      	strh	r2, [r0, #14]
 8009606:	6183      	str	r3, [r0, #24]
 8009608:	4619      	mov	r1, r3
 800960a:	2208      	movs	r2, #8
 800960c:	305c      	adds	r0, #92	@ 0x5c
 800960e:	f000 f8f4 	bl	80097fa <memset>
 8009612:	4b0d      	ldr	r3, [pc, #52]	@ (8009648 <std+0x58>)
 8009614:	6263      	str	r3, [r4, #36]	@ 0x24
 8009616:	4b0d      	ldr	r3, [pc, #52]	@ (800964c <std+0x5c>)
 8009618:	62a3      	str	r3, [r4, #40]	@ 0x28
 800961a:	4b0d      	ldr	r3, [pc, #52]	@ (8009650 <std+0x60>)
 800961c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800961e:	4b0d      	ldr	r3, [pc, #52]	@ (8009654 <std+0x64>)
 8009620:	6323      	str	r3, [r4, #48]	@ 0x30
 8009622:	4b0d      	ldr	r3, [pc, #52]	@ (8009658 <std+0x68>)
 8009624:	6224      	str	r4, [r4, #32]
 8009626:	429c      	cmp	r4, r3
 8009628:	d006      	beq.n	8009638 <std+0x48>
 800962a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800962e:	4294      	cmp	r4, r2
 8009630:	d002      	beq.n	8009638 <std+0x48>
 8009632:	33d0      	adds	r3, #208	@ 0xd0
 8009634:	429c      	cmp	r4, r3
 8009636:	d105      	bne.n	8009644 <std+0x54>
 8009638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009640:	f000 b958 	b.w	80098f4 <__retarget_lock_init_recursive>
 8009644:	bd10      	pop	{r4, pc}
 8009646:	bf00      	nop
 8009648:	08009775 	.word	0x08009775
 800964c:	08009797 	.word	0x08009797
 8009650:	080097cf 	.word	0x080097cf
 8009654:	080097f3 	.word	0x080097f3
 8009658:	20019f24 	.word	0x20019f24

0800965c <stdio_exit_handler>:
 800965c:	4a02      	ldr	r2, [pc, #8]	@ (8009668 <stdio_exit_handler+0xc>)
 800965e:	4903      	ldr	r1, [pc, #12]	@ (800966c <stdio_exit_handler+0x10>)
 8009660:	4803      	ldr	r0, [pc, #12]	@ (8009670 <stdio_exit_handler+0x14>)
 8009662:	f000 b869 	b.w	8009738 <_fwalk_sglue>
 8009666:	bf00      	nop
 8009668:	200000fc 	.word	0x200000fc
 800966c:	0800afbd 	.word	0x0800afbd
 8009670:	2000010c 	.word	0x2000010c

08009674 <cleanup_stdio>:
 8009674:	6841      	ldr	r1, [r0, #4]
 8009676:	4b0c      	ldr	r3, [pc, #48]	@ (80096a8 <cleanup_stdio+0x34>)
 8009678:	4299      	cmp	r1, r3
 800967a:	b510      	push	{r4, lr}
 800967c:	4604      	mov	r4, r0
 800967e:	d001      	beq.n	8009684 <cleanup_stdio+0x10>
 8009680:	f001 fc9c 	bl	800afbc <_fflush_r>
 8009684:	68a1      	ldr	r1, [r4, #8]
 8009686:	4b09      	ldr	r3, [pc, #36]	@ (80096ac <cleanup_stdio+0x38>)
 8009688:	4299      	cmp	r1, r3
 800968a:	d002      	beq.n	8009692 <cleanup_stdio+0x1e>
 800968c:	4620      	mov	r0, r4
 800968e:	f001 fc95 	bl	800afbc <_fflush_r>
 8009692:	68e1      	ldr	r1, [r4, #12]
 8009694:	4b06      	ldr	r3, [pc, #24]	@ (80096b0 <cleanup_stdio+0x3c>)
 8009696:	4299      	cmp	r1, r3
 8009698:	d004      	beq.n	80096a4 <cleanup_stdio+0x30>
 800969a:	4620      	mov	r0, r4
 800969c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a0:	f001 bc8c 	b.w	800afbc <_fflush_r>
 80096a4:	bd10      	pop	{r4, pc}
 80096a6:	bf00      	nop
 80096a8:	20019f24 	.word	0x20019f24
 80096ac:	20019f8c 	.word	0x20019f8c
 80096b0:	20019ff4 	.word	0x20019ff4

080096b4 <global_stdio_init.part.0>:
 80096b4:	b510      	push	{r4, lr}
 80096b6:	4b0b      	ldr	r3, [pc, #44]	@ (80096e4 <global_stdio_init.part.0+0x30>)
 80096b8:	4c0b      	ldr	r4, [pc, #44]	@ (80096e8 <global_stdio_init.part.0+0x34>)
 80096ba:	4a0c      	ldr	r2, [pc, #48]	@ (80096ec <global_stdio_init.part.0+0x38>)
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	4620      	mov	r0, r4
 80096c0:	2200      	movs	r2, #0
 80096c2:	2104      	movs	r1, #4
 80096c4:	f7ff ff94 	bl	80095f0 <std>
 80096c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80096cc:	2201      	movs	r2, #1
 80096ce:	2109      	movs	r1, #9
 80096d0:	f7ff ff8e 	bl	80095f0 <std>
 80096d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80096d8:	2202      	movs	r2, #2
 80096da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096de:	2112      	movs	r1, #18
 80096e0:	f7ff bf86 	b.w	80095f0 <std>
 80096e4:	2001a05c 	.word	0x2001a05c
 80096e8:	20019f24 	.word	0x20019f24
 80096ec:	0800965d 	.word	0x0800965d

080096f0 <__sfp_lock_acquire>:
 80096f0:	4801      	ldr	r0, [pc, #4]	@ (80096f8 <__sfp_lock_acquire+0x8>)
 80096f2:	f000 b900 	b.w	80098f6 <__retarget_lock_acquire_recursive>
 80096f6:	bf00      	nop
 80096f8:	2001a065 	.word	0x2001a065

080096fc <__sfp_lock_release>:
 80096fc:	4801      	ldr	r0, [pc, #4]	@ (8009704 <__sfp_lock_release+0x8>)
 80096fe:	f000 b8fb 	b.w	80098f8 <__retarget_lock_release_recursive>
 8009702:	bf00      	nop
 8009704:	2001a065 	.word	0x2001a065

08009708 <__sinit>:
 8009708:	b510      	push	{r4, lr}
 800970a:	4604      	mov	r4, r0
 800970c:	f7ff fff0 	bl	80096f0 <__sfp_lock_acquire>
 8009710:	6a23      	ldr	r3, [r4, #32]
 8009712:	b11b      	cbz	r3, 800971c <__sinit+0x14>
 8009714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009718:	f7ff bff0 	b.w	80096fc <__sfp_lock_release>
 800971c:	4b04      	ldr	r3, [pc, #16]	@ (8009730 <__sinit+0x28>)
 800971e:	6223      	str	r3, [r4, #32]
 8009720:	4b04      	ldr	r3, [pc, #16]	@ (8009734 <__sinit+0x2c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1f5      	bne.n	8009714 <__sinit+0xc>
 8009728:	f7ff ffc4 	bl	80096b4 <global_stdio_init.part.0>
 800972c:	e7f2      	b.n	8009714 <__sinit+0xc>
 800972e:	bf00      	nop
 8009730:	08009675 	.word	0x08009675
 8009734:	2001a05c 	.word	0x2001a05c

08009738 <_fwalk_sglue>:
 8009738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800973c:	4607      	mov	r7, r0
 800973e:	4688      	mov	r8, r1
 8009740:	4614      	mov	r4, r2
 8009742:	2600      	movs	r6, #0
 8009744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009748:	f1b9 0901 	subs.w	r9, r9, #1
 800974c:	d505      	bpl.n	800975a <_fwalk_sglue+0x22>
 800974e:	6824      	ldr	r4, [r4, #0]
 8009750:	2c00      	cmp	r4, #0
 8009752:	d1f7      	bne.n	8009744 <_fwalk_sglue+0xc>
 8009754:	4630      	mov	r0, r6
 8009756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d907      	bls.n	8009770 <_fwalk_sglue+0x38>
 8009760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009764:	3301      	adds	r3, #1
 8009766:	d003      	beq.n	8009770 <_fwalk_sglue+0x38>
 8009768:	4629      	mov	r1, r5
 800976a:	4638      	mov	r0, r7
 800976c:	47c0      	blx	r8
 800976e:	4306      	orrs	r6, r0
 8009770:	3568      	adds	r5, #104	@ 0x68
 8009772:	e7e9      	b.n	8009748 <_fwalk_sglue+0x10>

08009774 <__sread>:
 8009774:	b510      	push	{r4, lr}
 8009776:	460c      	mov	r4, r1
 8009778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977c:	f000 f86c 	bl	8009858 <_read_r>
 8009780:	2800      	cmp	r0, #0
 8009782:	bfab      	itete	ge
 8009784:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009786:	89a3      	ldrhlt	r3, [r4, #12]
 8009788:	181b      	addge	r3, r3, r0
 800978a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800978e:	bfac      	ite	ge
 8009790:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009792:	81a3      	strhlt	r3, [r4, #12]
 8009794:	bd10      	pop	{r4, pc}

08009796 <__swrite>:
 8009796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979a:	461f      	mov	r7, r3
 800979c:	898b      	ldrh	r3, [r1, #12]
 800979e:	05db      	lsls	r3, r3, #23
 80097a0:	4605      	mov	r5, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	4616      	mov	r6, r2
 80097a6:	d505      	bpl.n	80097b4 <__swrite+0x1e>
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	2302      	movs	r3, #2
 80097ae:	2200      	movs	r2, #0
 80097b0:	f000 f840 	bl	8009834 <_lseek_r>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097be:	81a3      	strh	r3, [r4, #12]
 80097c0:	4632      	mov	r2, r6
 80097c2:	463b      	mov	r3, r7
 80097c4:	4628      	mov	r0, r5
 80097c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	f000 b857 	b.w	800987c <_write_r>

080097ce <__sseek>:
 80097ce:	b510      	push	{r4, lr}
 80097d0:	460c      	mov	r4, r1
 80097d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d6:	f000 f82d 	bl	8009834 <_lseek_r>
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	bf15      	itete	ne
 80097e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097ea:	81a3      	strheq	r3, [r4, #12]
 80097ec:	bf18      	it	ne
 80097ee:	81a3      	strhne	r3, [r4, #12]
 80097f0:	bd10      	pop	{r4, pc}

080097f2 <__sclose>:
 80097f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f6:	f000 b80d 	b.w	8009814 <_close_r>

080097fa <memset>:
 80097fa:	4402      	add	r2, r0
 80097fc:	4603      	mov	r3, r0
 80097fe:	4293      	cmp	r3, r2
 8009800:	d100      	bne.n	8009804 <memset+0xa>
 8009802:	4770      	bx	lr
 8009804:	f803 1b01 	strb.w	r1, [r3], #1
 8009808:	e7f9      	b.n	80097fe <memset+0x4>
	...

0800980c <_localeconv_r>:
 800980c:	4800      	ldr	r0, [pc, #0]	@ (8009810 <_localeconv_r+0x4>)
 800980e:	4770      	bx	lr
 8009810:	20000248 	.word	0x20000248

08009814 <_close_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d06      	ldr	r5, [pc, #24]	@ (8009830 <_close_r+0x1c>)
 8009818:	2300      	movs	r3, #0
 800981a:	4604      	mov	r4, r0
 800981c:	4608      	mov	r0, r1
 800981e:	602b      	str	r3, [r5, #0]
 8009820:	f7f7 fcca 	bl	80011b8 <_close>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d102      	bne.n	800982e <_close_r+0x1a>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	b103      	cbz	r3, 800982e <_close_r+0x1a>
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	2001a060 	.word	0x2001a060

08009834 <_lseek_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	4d07      	ldr	r5, [pc, #28]	@ (8009854 <_lseek_r+0x20>)
 8009838:	4604      	mov	r4, r0
 800983a:	4608      	mov	r0, r1
 800983c:	4611      	mov	r1, r2
 800983e:	2200      	movs	r2, #0
 8009840:	602a      	str	r2, [r5, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	f7f7 fcdf 	bl	8001206 <_lseek>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_lseek_r+0x1e>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_lseek_r+0x1e>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	2001a060 	.word	0x2001a060

08009858 <_read_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4d07      	ldr	r5, [pc, #28]	@ (8009878 <_read_r+0x20>)
 800985c:	4604      	mov	r4, r0
 800985e:	4608      	mov	r0, r1
 8009860:	4611      	mov	r1, r2
 8009862:	2200      	movs	r2, #0
 8009864:	602a      	str	r2, [r5, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	f7f7 fc6d 	bl	8001146 <_read>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	d102      	bne.n	8009876 <_read_r+0x1e>
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	b103      	cbz	r3, 8009876 <_read_r+0x1e>
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	bd38      	pop	{r3, r4, r5, pc}
 8009878:	2001a060 	.word	0x2001a060

0800987c <_write_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d07      	ldr	r5, [pc, #28]	@ (800989c <_write_r+0x20>)
 8009880:	4604      	mov	r4, r0
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	2200      	movs	r2, #0
 8009888:	602a      	str	r2, [r5, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f7f7 fc78 	bl	8001180 <_write>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_write_r+0x1e>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_write_r+0x1e>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	2001a060 	.word	0x2001a060

080098a0 <__errno>:
 80098a0:	4b01      	ldr	r3, [pc, #4]	@ (80098a8 <__errno+0x8>)
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	20000108 	.word	0x20000108

080098ac <__libc_init_array>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	4d0d      	ldr	r5, [pc, #52]	@ (80098e4 <__libc_init_array+0x38>)
 80098b0:	4c0d      	ldr	r4, [pc, #52]	@ (80098e8 <__libc_init_array+0x3c>)
 80098b2:	1b64      	subs	r4, r4, r5
 80098b4:	10a4      	asrs	r4, r4, #2
 80098b6:	2600      	movs	r6, #0
 80098b8:	42a6      	cmp	r6, r4
 80098ba:	d109      	bne.n	80098d0 <__libc_init_array+0x24>
 80098bc:	4d0b      	ldr	r5, [pc, #44]	@ (80098ec <__libc_init_array+0x40>)
 80098be:	4c0c      	ldr	r4, [pc, #48]	@ (80098f0 <__libc_init_array+0x44>)
 80098c0:	f001 febc 	bl	800b63c <_init>
 80098c4:	1b64      	subs	r4, r4, r5
 80098c6:	10a4      	asrs	r4, r4, #2
 80098c8:	2600      	movs	r6, #0
 80098ca:	42a6      	cmp	r6, r4
 80098cc:	d105      	bne.n	80098da <__libc_init_array+0x2e>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d4:	4798      	blx	r3
 80098d6:	3601      	adds	r6, #1
 80098d8:	e7ee      	b.n	80098b8 <__libc_init_array+0xc>
 80098da:	f855 3b04 	ldr.w	r3, [r5], #4
 80098de:	4798      	blx	r3
 80098e0:	3601      	adds	r6, #1
 80098e2:	e7f2      	b.n	80098ca <__libc_init_array+0x1e>
 80098e4:	0800ba48 	.word	0x0800ba48
 80098e8:	0800ba48 	.word	0x0800ba48
 80098ec:	0800ba48 	.word	0x0800ba48
 80098f0:	0800ba4c 	.word	0x0800ba4c

080098f4 <__retarget_lock_init_recursive>:
 80098f4:	4770      	bx	lr

080098f6 <__retarget_lock_acquire_recursive>:
 80098f6:	4770      	bx	lr

080098f8 <__retarget_lock_release_recursive>:
 80098f8:	4770      	bx	lr

080098fa <memcpy>:
 80098fa:	440a      	add	r2, r1
 80098fc:	4291      	cmp	r1, r2
 80098fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009902:	d100      	bne.n	8009906 <memcpy+0xc>
 8009904:	4770      	bx	lr
 8009906:	b510      	push	{r4, lr}
 8009908:	f811 4b01 	ldrb.w	r4, [r1], #1
 800990c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009910:	4291      	cmp	r1, r2
 8009912:	d1f9      	bne.n	8009908 <memcpy+0xe>
 8009914:	bd10      	pop	{r4, pc}

08009916 <quorem>:
 8009916:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991a:	6903      	ldr	r3, [r0, #16]
 800991c:	690c      	ldr	r4, [r1, #16]
 800991e:	42a3      	cmp	r3, r4
 8009920:	4607      	mov	r7, r0
 8009922:	db7e      	blt.n	8009a22 <quorem+0x10c>
 8009924:	3c01      	subs	r4, #1
 8009926:	f101 0814 	add.w	r8, r1, #20
 800992a:	00a3      	lsls	r3, r4, #2
 800992c:	f100 0514 	add.w	r5, r0, #20
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800993c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009940:	3301      	adds	r3, #1
 8009942:	429a      	cmp	r2, r3
 8009944:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009948:	fbb2 f6f3 	udiv	r6, r2, r3
 800994c:	d32e      	bcc.n	80099ac <quorem+0x96>
 800994e:	f04f 0a00 	mov.w	sl, #0
 8009952:	46c4      	mov	ip, r8
 8009954:	46ae      	mov	lr, r5
 8009956:	46d3      	mov	fp, sl
 8009958:	f85c 3b04 	ldr.w	r3, [ip], #4
 800995c:	b298      	uxth	r0, r3
 800995e:	fb06 a000 	mla	r0, r6, r0, sl
 8009962:	0c02      	lsrs	r2, r0, #16
 8009964:	0c1b      	lsrs	r3, r3, #16
 8009966:	fb06 2303 	mla	r3, r6, r3, r2
 800996a:	f8de 2000 	ldr.w	r2, [lr]
 800996e:	b280      	uxth	r0, r0
 8009970:	b292      	uxth	r2, r2
 8009972:	1a12      	subs	r2, r2, r0
 8009974:	445a      	add	r2, fp
 8009976:	f8de 0000 	ldr.w	r0, [lr]
 800997a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800997e:	b29b      	uxth	r3, r3
 8009980:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009984:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009988:	b292      	uxth	r2, r2
 800998a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800998e:	45e1      	cmp	r9, ip
 8009990:	f84e 2b04 	str.w	r2, [lr], #4
 8009994:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009998:	d2de      	bcs.n	8009958 <quorem+0x42>
 800999a:	9b00      	ldr	r3, [sp, #0]
 800999c:	58eb      	ldr	r3, [r5, r3]
 800999e:	b92b      	cbnz	r3, 80099ac <quorem+0x96>
 80099a0:	9b01      	ldr	r3, [sp, #4]
 80099a2:	3b04      	subs	r3, #4
 80099a4:	429d      	cmp	r5, r3
 80099a6:	461a      	mov	r2, r3
 80099a8:	d32f      	bcc.n	8009a0a <quorem+0xf4>
 80099aa:	613c      	str	r4, [r7, #16]
 80099ac:	4638      	mov	r0, r7
 80099ae:	f001 f979 	bl	800aca4 <__mcmp>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	db25      	blt.n	8009a02 <quorem+0xec>
 80099b6:	4629      	mov	r1, r5
 80099b8:	2000      	movs	r0, #0
 80099ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80099be:	f8d1 c000 	ldr.w	ip, [r1]
 80099c2:	fa1f fe82 	uxth.w	lr, r2
 80099c6:	fa1f f38c 	uxth.w	r3, ip
 80099ca:	eba3 030e 	sub.w	r3, r3, lr
 80099ce:	4403      	add	r3, r0
 80099d0:	0c12      	lsrs	r2, r2, #16
 80099d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80099d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80099da:	b29b      	uxth	r3, r3
 80099dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099e0:	45c1      	cmp	r9, r8
 80099e2:	f841 3b04 	str.w	r3, [r1], #4
 80099e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099ea:	d2e6      	bcs.n	80099ba <quorem+0xa4>
 80099ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099f4:	b922      	cbnz	r2, 8009a00 <quorem+0xea>
 80099f6:	3b04      	subs	r3, #4
 80099f8:	429d      	cmp	r5, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	d30b      	bcc.n	8009a16 <quorem+0x100>
 80099fe:	613c      	str	r4, [r7, #16]
 8009a00:	3601      	adds	r6, #1
 8009a02:	4630      	mov	r0, r6
 8009a04:	b003      	add	sp, #12
 8009a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0a:	6812      	ldr	r2, [r2, #0]
 8009a0c:	3b04      	subs	r3, #4
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	d1cb      	bne.n	80099aa <quorem+0x94>
 8009a12:	3c01      	subs	r4, #1
 8009a14:	e7c6      	b.n	80099a4 <quorem+0x8e>
 8009a16:	6812      	ldr	r2, [r2, #0]
 8009a18:	3b04      	subs	r3, #4
 8009a1a:	2a00      	cmp	r2, #0
 8009a1c:	d1ef      	bne.n	80099fe <quorem+0xe8>
 8009a1e:	3c01      	subs	r4, #1
 8009a20:	e7ea      	b.n	80099f8 <quorem+0xe2>
 8009a22:	2000      	movs	r0, #0
 8009a24:	e7ee      	b.n	8009a04 <quorem+0xee>
	...

08009a28 <_dtoa_r>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	69c7      	ldr	r7, [r0, #28]
 8009a2e:	b099      	sub	sp, #100	@ 0x64
 8009a30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a34:	ec55 4b10 	vmov	r4, r5, d0
 8009a38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009a3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a3c:	4683      	mov	fp, r0
 8009a3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a42:	b97f      	cbnz	r7, 8009a64 <_dtoa_r+0x3c>
 8009a44:	2010      	movs	r0, #16
 8009a46:	f000 fdfd 	bl	800a644 <malloc>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a50:	b920      	cbnz	r0, 8009a5c <_dtoa_r+0x34>
 8009a52:	4ba7      	ldr	r3, [pc, #668]	@ (8009cf0 <_dtoa_r+0x2c8>)
 8009a54:	21ef      	movs	r1, #239	@ 0xef
 8009a56:	48a7      	ldr	r0, [pc, #668]	@ (8009cf4 <_dtoa_r+0x2cc>)
 8009a58:	f001 fae8 	bl	800b02c <__assert_func>
 8009a5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a60:	6007      	str	r7, [r0, #0]
 8009a62:	60c7      	str	r7, [r0, #12]
 8009a64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a68:	6819      	ldr	r1, [r3, #0]
 8009a6a:	b159      	cbz	r1, 8009a84 <_dtoa_r+0x5c>
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	604a      	str	r2, [r1, #4]
 8009a70:	2301      	movs	r3, #1
 8009a72:	4093      	lsls	r3, r2
 8009a74:	608b      	str	r3, [r1, #8]
 8009a76:	4658      	mov	r0, fp
 8009a78:	f000 feda 	bl	800a830 <_Bfree>
 8009a7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a80:	2200      	movs	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	1e2b      	subs	r3, r5, #0
 8009a86:	bfb9      	ittee	lt
 8009a88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a8c:	9303      	strlt	r3, [sp, #12]
 8009a8e:	2300      	movge	r3, #0
 8009a90:	6033      	strge	r3, [r6, #0]
 8009a92:	9f03      	ldr	r7, [sp, #12]
 8009a94:	4b98      	ldr	r3, [pc, #608]	@ (8009cf8 <_dtoa_r+0x2d0>)
 8009a96:	bfbc      	itt	lt
 8009a98:	2201      	movlt	r2, #1
 8009a9a:	6032      	strlt	r2, [r6, #0]
 8009a9c:	43bb      	bics	r3, r7
 8009a9e:	d112      	bne.n	8009ac6 <_dtoa_r+0x9e>
 8009aa0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009aa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009aac:	4323      	orrs	r3, r4
 8009aae:	f000 854d 	beq.w	800a54c <_dtoa_r+0xb24>
 8009ab2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ab4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009d0c <_dtoa_r+0x2e4>
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 854f 	beq.w	800a55c <_dtoa_r+0xb34>
 8009abe:	f10a 0303 	add.w	r3, sl, #3
 8009ac2:	f000 bd49 	b.w	800a558 <_dtoa_r+0xb30>
 8009ac6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009aca:	2200      	movs	r2, #0
 8009acc:	ec51 0b17 	vmov	r0, r1, d7
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009ad6:	f7f6 ffff 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ada:	4680      	mov	r8, r0
 8009adc:	b158      	cbz	r0, 8009af6 <_dtoa_r+0xce>
 8009ade:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ae6:	b113      	cbz	r3, 8009aee <_dtoa_r+0xc6>
 8009ae8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009aea:	4b84      	ldr	r3, [pc, #528]	@ (8009cfc <_dtoa_r+0x2d4>)
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009d10 <_dtoa_r+0x2e8>
 8009af2:	f000 bd33 	b.w	800a55c <_dtoa_r+0xb34>
 8009af6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009afa:	aa16      	add	r2, sp, #88	@ 0x58
 8009afc:	a917      	add	r1, sp, #92	@ 0x5c
 8009afe:	4658      	mov	r0, fp
 8009b00:	f001 f980 	bl	800ae04 <__d2b>
 8009b04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009b08:	4681      	mov	r9, r0
 8009b0a:	2e00      	cmp	r6, #0
 8009b0c:	d077      	beq.n	8009bfe <_dtoa_r+0x1d6>
 8009b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009b20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009b24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009b28:	4619      	mov	r1, r3
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	4b74      	ldr	r3, [pc, #464]	@ (8009d00 <_dtoa_r+0x2d8>)
 8009b2e:	f7f6 fbb3 	bl	8000298 <__aeabi_dsub>
 8009b32:	a369      	add	r3, pc, #420	@ (adr r3, 8009cd8 <_dtoa_r+0x2b0>)
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f7f6 fd66 	bl	8000608 <__aeabi_dmul>
 8009b3c:	a368      	add	r3, pc, #416	@ (adr r3, 8009ce0 <_dtoa_r+0x2b8>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fbab 	bl	800029c <__adddf3>
 8009b46:	4604      	mov	r4, r0
 8009b48:	4630      	mov	r0, r6
 8009b4a:	460d      	mov	r5, r1
 8009b4c:	f7f6 fcf2 	bl	8000534 <__aeabi_i2d>
 8009b50:	a365      	add	r3, pc, #404	@ (adr r3, 8009ce8 <_dtoa_r+0x2c0>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f7f6 fd57 	bl	8000608 <__aeabi_dmul>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7f6 fb9b 	bl	800029c <__adddf3>
 8009b66:	4604      	mov	r4, r0
 8009b68:	460d      	mov	r5, r1
 8009b6a:	f7f6 fffd 	bl	8000b68 <__aeabi_d2iz>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4607      	mov	r7, r0
 8009b72:	2300      	movs	r3, #0
 8009b74:	4620      	mov	r0, r4
 8009b76:	4629      	mov	r1, r5
 8009b78:	f7f6 ffb8 	bl	8000aec <__aeabi_dcmplt>
 8009b7c:	b140      	cbz	r0, 8009b90 <_dtoa_r+0x168>
 8009b7e:	4638      	mov	r0, r7
 8009b80:	f7f6 fcd8 	bl	8000534 <__aeabi_i2d>
 8009b84:	4622      	mov	r2, r4
 8009b86:	462b      	mov	r3, r5
 8009b88:	f7f6 ffa6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b8c:	b900      	cbnz	r0, 8009b90 <_dtoa_r+0x168>
 8009b8e:	3f01      	subs	r7, #1
 8009b90:	2f16      	cmp	r7, #22
 8009b92:	d851      	bhi.n	8009c38 <_dtoa_r+0x210>
 8009b94:	4b5b      	ldr	r3, [pc, #364]	@ (8009d04 <_dtoa_r+0x2dc>)
 8009b96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ba2:	f7f6 ffa3 	bl	8000aec <__aeabi_dcmplt>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d048      	beq.n	8009c3c <_dtoa_r+0x214>
 8009baa:	3f01      	subs	r7, #1
 8009bac:	2300      	movs	r3, #0
 8009bae:	9312      	str	r3, [sp, #72]	@ 0x48
 8009bb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009bb2:	1b9b      	subs	r3, r3, r6
 8009bb4:	1e5a      	subs	r2, r3, #1
 8009bb6:	bf44      	itt	mi
 8009bb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009bbc:	2300      	movmi	r3, #0
 8009bbe:	9208      	str	r2, [sp, #32]
 8009bc0:	bf54      	ite	pl
 8009bc2:	f04f 0800 	movpl.w	r8, #0
 8009bc6:	9308      	strmi	r3, [sp, #32]
 8009bc8:	2f00      	cmp	r7, #0
 8009bca:	db39      	blt.n	8009c40 <_dtoa_r+0x218>
 8009bcc:	9b08      	ldr	r3, [sp, #32]
 8009bce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009bd0:	443b      	add	r3, r7
 8009bd2:	9308      	str	r3, [sp, #32]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bda:	2b09      	cmp	r3, #9
 8009bdc:	d864      	bhi.n	8009ca8 <_dtoa_r+0x280>
 8009bde:	2b05      	cmp	r3, #5
 8009be0:	bfc4      	itt	gt
 8009be2:	3b04      	subgt	r3, #4
 8009be4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be8:	f1a3 0302 	sub.w	r3, r3, #2
 8009bec:	bfcc      	ite	gt
 8009bee:	2400      	movgt	r4, #0
 8009bf0:	2401      	movle	r4, #1
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d863      	bhi.n	8009cbe <_dtoa_r+0x296>
 8009bf6:	e8df f003 	tbb	[pc, r3]
 8009bfa:	372a      	.short	0x372a
 8009bfc:	5535      	.short	0x5535
 8009bfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009c02:	441e      	add	r6, r3
 8009c04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009c08:	2b20      	cmp	r3, #32
 8009c0a:	bfc1      	itttt	gt
 8009c0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009c10:	409f      	lslgt	r7, r3
 8009c12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009c16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009c1a:	bfd6      	itet	le
 8009c1c:	f1c3 0320 	rsble	r3, r3, #32
 8009c20:	ea47 0003 	orrgt.w	r0, r7, r3
 8009c24:	fa04 f003 	lslle.w	r0, r4, r3
 8009c28:	f7f6 fc74 	bl	8000514 <__aeabi_ui2d>
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009c32:	3e01      	subs	r6, #1
 8009c34:	9214      	str	r2, [sp, #80]	@ 0x50
 8009c36:	e777      	b.n	8009b28 <_dtoa_r+0x100>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e7b8      	b.n	8009bae <_dtoa_r+0x186>
 8009c3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009c3e:	e7b7      	b.n	8009bb0 <_dtoa_r+0x188>
 8009c40:	427b      	negs	r3, r7
 8009c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c44:	2300      	movs	r3, #0
 8009c46:	eba8 0807 	sub.w	r8, r8, r7
 8009c4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c4c:	e7c4      	b.n	8009bd8 <_dtoa_r+0x1b0>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dc35      	bgt.n	8009cc4 <_dtoa_r+0x29c>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	9307      	str	r3, [sp, #28]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c62:	e00b      	b.n	8009c7c <_dtoa_r+0x254>
 8009c64:	2301      	movs	r3, #1
 8009c66:	e7f3      	b.n	8009c50 <_dtoa_r+0x228>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c6e:	18fb      	adds	r3, r7, r3
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	3301      	adds	r3, #1
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	9307      	str	r3, [sp, #28]
 8009c78:	bfb8      	it	lt
 8009c7a:	2301      	movlt	r3, #1
 8009c7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c80:	2100      	movs	r1, #0
 8009c82:	2204      	movs	r2, #4
 8009c84:	f102 0514 	add.w	r5, r2, #20
 8009c88:	429d      	cmp	r5, r3
 8009c8a:	d91f      	bls.n	8009ccc <_dtoa_r+0x2a4>
 8009c8c:	6041      	str	r1, [r0, #4]
 8009c8e:	4658      	mov	r0, fp
 8009c90:	f000 fd8e 	bl	800a7b0 <_Balloc>
 8009c94:	4682      	mov	sl, r0
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d13c      	bne.n	8009d14 <_dtoa_r+0x2ec>
 8009c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8009d08 <_dtoa_r+0x2e0>)
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009ca2:	e6d8      	b.n	8009a56 <_dtoa_r+0x2e>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e7e0      	b.n	8009c6a <_dtoa_r+0x242>
 8009ca8:	2401      	movs	r4, #1
 8009caa:	2300      	movs	r3, #0
 8009cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	9307      	str	r3, [sp, #28]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2312      	movs	r3, #18
 8009cbc:	e7d0      	b.n	8009c60 <_dtoa_r+0x238>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cc2:	e7f5      	b.n	8009cb0 <_dtoa_r+0x288>
 8009cc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	9307      	str	r3, [sp, #28]
 8009cca:	e7d7      	b.n	8009c7c <_dtoa_r+0x254>
 8009ccc:	3101      	adds	r1, #1
 8009cce:	0052      	lsls	r2, r2, #1
 8009cd0:	e7d8      	b.n	8009c84 <_dtoa_r+0x25c>
 8009cd2:	bf00      	nop
 8009cd4:	f3af 8000 	nop.w
 8009cd8:	636f4361 	.word	0x636f4361
 8009cdc:	3fd287a7 	.word	0x3fd287a7
 8009ce0:	8b60c8b3 	.word	0x8b60c8b3
 8009ce4:	3fc68a28 	.word	0x3fc68a28
 8009ce8:	509f79fb 	.word	0x509f79fb
 8009cec:	3fd34413 	.word	0x3fd34413
 8009cf0:	0800b711 	.word	0x0800b711
 8009cf4:	0800b728 	.word	0x0800b728
 8009cf8:	7ff00000 	.word	0x7ff00000
 8009cfc:	0800b6e1 	.word	0x0800b6e1
 8009d00:	3ff80000 	.word	0x3ff80000
 8009d04:	0800b820 	.word	0x0800b820
 8009d08:	0800b780 	.word	0x0800b780
 8009d0c:	0800b70d 	.word	0x0800b70d
 8009d10:	0800b6e0 	.word	0x0800b6e0
 8009d14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d18:	6018      	str	r0, [r3, #0]
 8009d1a:	9b07      	ldr	r3, [sp, #28]
 8009d1c:	2b0e      	cmp	r3, #14
 8009d1e:	f200 80a4 	bhi.w	8009e6a <_dtoa_r+0x442>
 8009d22:	2c00      	cmp	r4, #0
 8009d24:	f000 80a1 	beq.w	8009e6a <_dtoa_r+0x442>
 8009d28:	2f00      	cmp	r7, #0
 8009d2a:	dd33      	ble.n	8009d94 <_dtoa_r+0x36c>
 8009d2c:	4bad      	ldr	r3, [pc, #692]	@ (8009fe4 <_dtoa_r+0x5bc>)
 8009d2e:	f007 020f 	and.w	r2, r7, #15
 8009d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d36:	ed93 7b00 	vldr	d7, [r3]
 8009d3a:	05f8      	lsls	r0, r7, #23
 8009d3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009d44:	d516      	bpl.n	8009d74 <_dtoa_r+0x34c>
 8009d46:	4ba8      	ldr	r3, [pc, #672]	@ (8009fe8 <_dtoa_r+0x5c0>)
 8009d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d50:	f7f6 fd84 	bl	800085c <__aeabi_ddiv>
 8009d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d58:	f004 040f 	and.w	r4, r4, #15
 8009d5c:	2603      	movs	r6, #3
 8009d5e:	4da2      	ldr	r5, [pc, #648]	@ (8009fe8 <_dtoa_r+0x5c0>)
 8009d60:	b954      	cbnz	r4, 8009d78 <_dtoa_r+0x350>
 8009d62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d6a:	f7f6 fd77 	bl	800085c <__aeabi_ddiv>
 8009d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d72:	e028      	b.n	8009dc6 <_dtoa_r+0x39e>
 8009d74:	2602      	movs	r6, #2
 8009d76:	e7f2      	b.n	8009d5e <_dtoa_r+0x336>
 8009d78:	07e1      	lsls	r1, r4, #31
 8009d7a:	d508      	bpl.n	8009d8e <_dtoa_r+0x366>
 8009d7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d84:	f7f6 fc40 	bl	8000608 <__aeabi_dmul>
 8009d88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d8c:	3601      	adds	r6, #1
 8009d8e:	1064      	asrs	r4, r4, #1
 8009d90:	3508      	adds	r5, #8
 8009d92:	e7e5      	b.n	8009d60 <_dtoa_r+0x338>
 8009d94:	f000 80d2 	beq.w	8009f3c <_dtoa_r+0x514>
 8009d98:	427c      	negs	r4, r7
 8009d9a:	4b92      	ldr	r3, [pc, #584]	@ (8009fe4 <_dtoa_r+0x5bc>)
 8009d9c:	4d92      	ldr	r5, [pc, #584]	@ (8009fe8 <_dtoa_r+0x5c0>)
 8009d9e:	f004 020f 	and.w	r2, r4, #15
 8009da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dae:	f7f6 fc2b 	bl	8000608 <__aeabi_dmul>
 8009db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009db6:	1124      	asrs	r4, r4, #4
 8009db8:	2300      	movs	r3, #0
 8009dba:	2602      	movs	r6, #2
 8009dbc:	2c00      	cmp	r4, #0
 8009dbe:	f040 80b2 	bne.w	8009f26 <_dtoa_r+0x4fe>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1d3      	bne.n	8009d6e <_dtoa_r+0x346>
 8009dc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009dc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f000 80b7 	beq.w	8009f40 <_dtoa_r+0x518>
 8009dd2:	4b86      	ldr	r3, [pc, #536]	@ (8009fec <_dtoa_r+0x5c4>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	4629      	mov	r1, r5
 8009dda:	f7f6 fe87 	bl	8000aec <__aeabi_dcmplt>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f000 80ae 	beq.w	8009f40 <_dtoa_r+0x518>
 8009de4:	9b07      	ldr	r3, [sp, #28]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f000 80aa 	beq.w	8009f40 <_dtoa_r+0x518>
 8009dec:	9b00      	ldr	r3, [sp, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	dd37      	ble.n	8009e62 <_dtoa_r+0x43a>
 8009df2:	1e7b      	subs	r3, r7, #1
 8009df4:	9304      	str	r3, [sp, #16]
 8009df6:	4620      	mov	r0, r4
 8009df8:	4b7d      	ldr	r3, [pc, #500]	@ (8009ff0 <_dtoa_r+0x5c8>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	f7f6 fc03 	bl	8000608 <__aeabi_dmul>
 8009e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e06:	9c00      	ldr	r4, [sp, #0]
 8009e08:	3601      	adds	r6, #1
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7f6 fb92 	bl	8000534 <__aeabi_i2d>
 8009e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e14:	f7f6 fbf8 	bl	8000608 <__aeabi_dmul>
 8009e18:	4b76      	ldr	r3, [pc, #472]	@ (8009ff4 <_dtoa_r+0x5cc>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f7f6 fa3e 	bl	800029c <__adddf3>
 8009e20:	4605      	mov	r5, r0
 8009e22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009e26:	2c00      	cmp	r4, #0
 8009e28:	f040 808d 	bne.w	8009f46 <_dtoa_r+0x51e>
 8009e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e30:	4b71      	ldr	r3, [pc, #452]	@ (8009ff8 <_dtoa_r+0x5d0>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	f7f6 fa30 	bl	8000298 <__aeabi_dsub>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e40:	462a      	mov	r2, r5
 8009e42:	4633      	mov	r3, r6
 8009e44:	f7f6 fe70 	bl	8000b28 <__aeabi_dcmpgt>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f040 828b 	bne.w	800a364 <_dtoa_r+0x93c>
 8009e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e52:	462a      	mov	r2, r5
 8009e54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e58:	f7f6 fe48 	bl	8000aec <__aeabi_dcmplt>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	f040 8128 	bne.w	800a0b2 <_dtoa_r+0x68a>
 8009e62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f2c0 815a 	blt.w	800a126 <_dtoa_r+0x6fe>
 8009e72:	2f0e      	cmp	r7, #14
 8009e74:	f300 8157 	bgt.w	800a126 <_dtoa_r+0x6fe>
 8009e78:	4b5a      	ldr	r3, [pc, #360]	@ (8009fe4 <_dtoa_r+0x5bc>)
 8009e7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e7e:	ed93 7b00 	vldr	d7, [r3]
 8009e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	ed8d 7b00 	vstr	d7, [sp]
 8009e8a:	da03      	bge.n	8009e94 <_dtoa_r+0x46c>
 8009e8c:	9b07      	ldr	r3, [sp, #28]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f340 8101 	ble.w	800a096 <_dtoa_r+0x66e>
 8009e94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e98:	4656      	mov	r6, sl
 8009e9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f7f6 fcdb 	bl	800085c <__aeabi_ddiv>
 8009ea6:	f7f6 fe5f 	bl	8000b68 <__aeabi_d2iz>
 8009eaa:	4680      	mov	r8, r0
 8009eac:	f7f6 fb42 	bl	8000534 <__aeabi_i2d>
 8009eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eb4:	f7f6 fba8 	bl	8000608 <__aeabi_dmul>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ec4:	f7f6 f9e8 	bl	8000298 <__aeabi_dsub>
 8009ec8:	f806 4b01 	strb.w	r4, [r6], #1
 8009ecc:	9d07      	ldr	r5, [sp, #28]
 8009ece:	eba6 040a 	sub.w	r4, r6, sl
 8009ed2:	42a5      	cmp	r5, r4
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	f040 8117 	bne.w	800a10a <_dtoa_r+0x6e2>
 8009edc:	f7f6 f9de 	bl	800029c <__adddf3>
 8009ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	f7f6 fe1e 	bl	8000b28 <__aeabi_dcmpgt>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	f040 80f9 	bne.w	800a0e4 <_dtoa_r+0x6bc>
 8009ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4629      	mov	r1, r5
 8009efa:	f7f6 fded 	bl	8000ad8 <__aeabi_dcmpeq>
 8009efe:	b118      	cbz	r0, 8009f08 <_dtoa_r+0x4e0>
 8009f00:	f018 0f01 	tst.w	r8, #1
 8009f04:	f040 80ee 	bne.w	800a0e4 <_dtoa_r+0x6bc>
 8009f08:	4649      	mov	r1, r9
 8009f0a:	4658      	mov	r0, fp
 8009f0c:	f000 fc90 	bl	800a830 <_Bfree>
 8009f10:	2300      	movs	r3, #0
 8009f12:	7033      	strb	r3, [r6, #0]
 8009f14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f16:	3701      	adds	r7, #1
 8009f18:	601f      	str	r7, [r3, #0]
 8009f1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 831d 	beq.w	800a55c <_dtoa_r+0xb34>
 8009f22:	601e      	str	r6, [r3, #0]
 8009f24:	e31a      	b.n	800a55c <_dtoa_r+0xb34>
 8009f26:	07e2      	lsls	r2, r4, #31
 8009f28:	d505      	bpl.n	8009f36 <_dtoa_r+0x50e>
 8009f2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f2e:	f7f6 fb6b 	bl	8000608 <__aeabi_dmul>
 8009f32:	3601      	adds	r6, #1
 8009f34:	2301      	movs	r3, #1
 8009f36:	1064      	asrs	r4, r4, #1
 8009f38:	3508      	adds	r5, #8
 8009f3a:	e73f      	b.n	8009dbc <_dtoa_r+0x394>
 8009f3c:	2602      	movs	r6, #2
 8009f3e:	e742      	b.n	8009dc6 <_dtoa_r+0x39e>
 8009f40:	9c07      	ldr	r4, [sp, #28]
 8009f42:	9704      	str	r7, [sp, #16]
 8009f44:	e761      	b.n	8009e0a <_dtoa_r+0x3e2>
 8009f46:	4b27      	ldr	r3, [pc, #156]	@ (8009fe4 <_dtoa_r+0x5bc>)
 8009f48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f52:	4454      	add	r4, sl
 8009f54:	2900      	cmp	r1, #0
 8009f56:	d053      	beq.n	800a000 <_dtoa_r+0x5d8>
 8009f58:	4928      	ldr	r1, [pc, #160]	@ (8009ffc <_dtoa_r+0x5d4>)
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	f7f6 fc7e 	bl	800085c <__aeabi_ddiv>
 8009f60:	4633      	mov	r3, r6
 8009f62:	462a      	mov	r2, r5
 8009f64:	f7f6 f998 	bl	8000298 <__aeabi_dsub>
 8009f68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f6c:	4656      	mov	r6, sl
 8009f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f72:	f7f6 fdf9 	bl	8000b68 <__aeabi_d2iz>
 8009f76:	4605      	mov	r5, r0
 8009f78:	f7f6 fadc 	bl	8000534 <__aeabi_i2d>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f84:	f7f6 f988 	bl	8000298 <__aeabi_dsub>
 8009f88:	3530      	adds	r5, #48	@ 0x30
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f92:	f806 5b01 	strb.w	r5, [r6], #1
 8009f96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f9a:	f7f6 fda7 	bl	8000aec <__aeabi_dcmplt>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d171      	bne.n	800a086 <_dtoa_r+0x65e>
 8009fa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fa6:	4911      	ldr	r1, [pc, #68]	@ (8009fec <_dtoa_r+0x5c4>)
 8009fa8:	2000      	movs	r0, #0
 8009faa:	f7f6 f975 	bl	8000298 <__aeabi_dsub>
 8009fae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fb2:	f7f6 fd9b 	bl	8000aec <__aeabi_dcmplt>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	f040 8095 	bne.w	800a0e6 <_dtoa_r+0x6be>
 8009fbc:	42a6      	cmp	r6, r4
 8009fbe:	f43f af50 	beq.w	8009e62 <_dtoa_r+0x43a>
 8009fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ff0 <_dtoa_r+0x5c8>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f7f6 fb1d 	bl	8000608 <__aeabi_dmul>
 8009fce:	4b08      	ldr	r3, [pc, #32]	@ (8009ff0 <_dtoa_r+0x5c8>)
 8009fd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fda:	f7f6 fb15 	bl	8000608 <__aeabi_dmul>
 8009fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe2:	e7c4      	b.n	8009f6e <_dtoa_r+0x546>
 8009fe4:	0800b820 	.word	0x0800b820
 8009fe8:	0800b7f8 	.word	0x0800b7f8
 8009fec:	3ff00000 	.word	0x3ff00000
 8009ff0:	40240000 	.word	0x40240000
 8009ff4:	401c0000 	.word	0x401c0000
 8009ff8:	40140000 	.word	0x40140000
 8009ffc:	3fe00000 	.word	0x3fe00000
 800a000:	4631      	mov	r1, r6
 800a002:	4628      	mov	r0, r5
 800a004:	f7f6 fb00 	bl	8000608 <__aeabi_dmul>
 800a008:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a00c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a00e:	4656      	mov	r6, sl
 800a010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a014:	f7f6 fda8 	bl	8000b68 <__aeabi_d2iz>
 800a018:	4605      	mov	r5, r0
 800a01a:	f7f6 fa8b 	bl	8000534 <__aeabi_i2d>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a026:	f7f6 f937 	bl	8000298 <__aeabi_dsub>
 800a02a:	3530      	adds	r5, #48	@ 0x30
 800a02c:	f806 5b01 	strb.w	r5, [r6], #1
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	42a6      	cmp	r6, r4
 800a036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a03a:	f04f 0200 	mov.w	r2, #0
 800a03e:	d124      	bne.n	800a08a <_dtoa_r+0x662>
 800a040:	4bac      	ldr	r3, [pc, #688]	@ (800a2f4 <_dtoa_r+0x8cc>)
 800a042:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a046:	f7f6 f929 	bl	800029c <__adddf3>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a052:	f7f6 fd69 	bl	8000b28 <__aeabi_dcmpgt>
 800a056:	2800      	cmp	r0, #0
 800a058:	d145      	bne.n	800a0e6 <_dtoa_r+0x6be>
 800a05a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a05e:	49a5      	ldr	r1, [pc, #660]	@ (800a2f4 <_dtoa_r+0x8cc>)
 800a060:	2000      	movs	r0, #0
 800a062:	f7f6 f919 	bl	8000298 <__aeabi_dsub>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a06e:	f7f6 fd3d 	bl	8000aec <__aeabi_dcmplt>
 800a072:	2800      	cmp	r0, #0
 800a074:	f43f aef5 	beq.w	8009e62 <_dtoa_r+0x43a>
 800a078:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a07a:	1e73      	subs	r3, r6, #1
 800a07c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a07e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a082:	2b30      	cmp	r3, #48	@ 0x30
 800a084:	d0f8      	beq.n	800a078 <_dtoa_r+0x650>
 800a086:	9f04      	ldr	r7, [sp, #16]
 800a088:	e73e      	b.n	8009f08 <_dtoa_r+0x4e0>
 800a08a:	4b9b      	ldr	r3, [pc, #620]	@ (800a2f8 <_dtoa_r+0x8d0>)
 800a08c:	f7f6 fabc 	bl	8000608 <__aeabi_dmul>
 800a090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a094:	e7bc      	b.n	800a010 <_dtoa_r+0x5e8>
 800a096:	d10c      	bne.n	800a0b2 <_dtoa_r+0x68a>
 800a098:	4b98      	ldr	r3, [pc, #608]	@ (800a2fc <_dtoa_r+0x8d4>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0a0:	f7f6 fab2 	bl	8000608 <__aeabi_dmul>
 800a0a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0a8:	f7f6 fd34 	bl	8000b14 <__aeabi_dcmpge>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	f000 8157 	beq.w	800a360 <_dtoa_r+0x938>
 800a0b2:	2400      	movs	r4, #0
 800a0b4:	4625      	mov	r5, r4
 800a0b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0b8:	43db      	mvns	r3, r3
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	4656      	mov	r6, sl
 800a0be:	2700      	movs	r7, #0
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4658      	mov	r0, fp
 800a0c4:	f000 fbb4 	bl	800a830 <_Bfree>
 800a0c8:	2d00      	cmp	r5, #0
 800a0ca:	d0dc      	beq.n	800a086 <_dtoa_r+0x65e>
 800a0cc:	b12f      	cbz	r7, 800a0da <_dtoa_r+0x6b2>
 800a0ce:	42af      	cmp	r7, r5
 800a0d0:	d003      	beq.n	800a0da <_dtoa_r+0x6b2>
 800a0d2:	4639      	mov	r1, r7
 800a0d4:	4658      	mov	r0, fp
 800a0d6:	f000 fbab 	bl	800a830 <_Bfree>
 800a0da:	4629      	mov	r1, r5
 800a0dc:	4658      	mov	r0, fp
 800a0de:	f000 fba7 	bl	800a830 <_Bfree>
 800a0e2:	e7d0      	b.n	800a086 <_dtoa_r+0x65e>
 800a0e4:	9704      	str	r7, [sp, #16]
 800a0e6:	4633      	mov	r3, r6
 800a0e8:	461e      	mov	r6, r3
 800a0ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0ee:	2a39      	cmp	r2, #57	@ 0x39
 800a0f0:	d107      	bne.n	800a102 <_dtoa_r+0x6da>
 800a0f2:	459a      	cmp	sl, r3
 800a0f4:	d1f8      	bne.n	800a0e8 <_dtoa_r+0x6c0>
 800a0f6:	9a04      	ldr	r2, [sp, #16]
 800a0f8:	3201      	adds	r2, #1
 800a0fa:	9204      	str	r2, [sp, #16]
 800a0fc:	2230      	movs	r2, #48	@ 0x30
 800a0fe:	f88a 2000 	strb.w	r2, [sl]
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	3201      	adds	r2, #1
 800a106:	701a      	strb	r2, [r3, #0]
 800a108:	e7bd      	b.n	800a086 <_dtoa_r+0x65e>
 800a10a:	4b7b      	ldr	r3, [pc, #492]	@ (800a2f8 <_dtoa_r+0x8d0>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	f7f6 fa7b 	bl	8000608 <__aeabi_dmul>
 800a112:	2200      	movs	r2, #0
 800a114:	2300      	movs	r3, #0
 800a116:	4604      	mov	r4, r0
 800a118:	460d      	mov	r5, r1
 800a11a:	f7f6 fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a11e:	2800      	cmp	r0, #0
 800a120:	f43f aebb 	beq.w	8009e9a <_dtoa_r+0x472>
 800a124:	e6f0      	b.n	8009f08 <_dtoa_r+0x4e0>
 800a126:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a128:	2a00      	cmp	r2, #0
 800a12a:	f000 80db 	beq.w	800a2e4 <_dtoa_r+0x8bc>
 800a12e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a130:	2a01      	cmp	r2, #1
 800a132:	f300 80bf 	bgt.w	800a2b4 <_dtoa_r+0x88c>
 800a136:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a138:	2a00      	cmp	r2, #0
 800a13a:	f000 80b7 	beq.w	800a2ac <_dtoa_r+0x884>
 800a13e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a142:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a144:	4646      	mov	r6, r8
 800a146:	9a08      	ldr	r2, [sp, #32]
 800a148:	2101      	movs	r1, #1
 800a14a:	441a      	add	r2, r3
 800a14c:	4658      	mov	r0, fp
 800a14e:	4498      	add	r8, r3
 800a150:	9208      	str	r2, [sp, #32]
 800a152:	f000 fc21 	bl	800a998 <__i2b>
 800a156:	4605      	mov	r5, r0
 800a158:	b15e      	cbz	r6, 800a172 <_dtoa_r+0x74a>
 800a15a:	9b08      	ldr	r3, [sp, #32]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dd08      	ble.n	800a172 <_dtoa_r+0x74a>
 800a160:	42b3      	cmp	r3, r6
 800a162:	9a08      	ldr	r2, [sp, #32]
 800a164:	bfa8      	it	ge
 800a166:	4633      	movge	r3, r6
 800a168:	eba8 0803 	sub.w	r8, r8, r3
 800a16c:	1af6      	subs	r6, r6, r3
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	9308      	str	r3, [sp, #32]
 800a172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a174:	b1f3      	cbz	r3, 800a1b4 <_dtoa_r+0x78c>
 800a176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 80b7 	beq.w	800a2ec <_dtoa_r+0x8c4>
 800a17e:	b18c      	cbz	r4, 800a1a4 <_dtoa_r+0x77c>
 800a180:	4629      	mov	r1, r5
 800a182:	4622      	mov	r2, r4
 800a184:	4658      	mov	r0, fp
 800a186:	f000 fcc7 	bl	800ab18 <__pow5mult>
 800a18a:	464a      	mov	r2, r9
 800a18c:	4601      	mov	r1, r0
 800a18e:	4605      	mov	r5, r0
 800a190:	4658      	mov	r0, fp
 800a192:	f000 fc17 	bl	800a9c4 <__multiply>
 800a196:	4649      	mov	r1, r9
 800a198:	9004      	str	r0, [sp, #16]
 800a19a:	4658      	mov	r0, fp
 800a19c:	f000 fb48 	bl	800a830 <_Bfree>
 800a1a0:	9b04      	ldr	r3, [sp, #16]
 800a1a2:	4699      	mov	r9, r3
 800a1a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1a6:	1b1a      	subs	r2, r3, r4
 800a1a8:	d004      	beq.n	800a1b4 <_dtoa_r+0x78c>
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	4658      	mov	r0, fp
 800a1ae:	f000 fcb3 	bl	800ab18 <__pow5mult>
 800a1b2:	4681      	mov	r9, r0
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	4658      	mov	r0, fp
 800a1b8:	f000 fbee 	bl	800a998 <__i2b>
 800a1bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1be:	4604      	mov	r4, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 81cf 	beq.w	800a564 <_dtoa_r+0xb3c>
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4601      	mov	r1, r0
 800a1ca:	4658      	mov	r0, fp
 800a1cc:	f000 fca4 	bl	800ab18 <__pow5mult>
 800a1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	f300 8095 	bgt.w	800a304 <_dtoa_r+0x8dc>
 800a1da:	9b02      	ldr	r3, [sp, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f040 8087 	bne.w	800a2f0 <_dtoa_r+0x8c8>
 800a1e2:	9b03      	ldr	r3, [sp, #12]
 800a1e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f040 8089 	bne.w	800a300 <_dtoa_r+0x8d8>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1f4:	0d1b      	lsrs	r3, r3, #20
 800a1f6:	051b      	lsls	r3, r3, #20
 800a1f8:	b12b      	cbz	r3, 800a206 <_dtoa_r+0x7de>
 800a1fa:	9b08      	ldr	r3, [sp, #32]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	9308      	str	r3, [sp, #32]
 800a200:	f108 0801 	add.w	r8, r8, #1
 800a204:	2301      	movs	r3, #1
 800a206:	930a      	str	r3, [sp, #40]	@ 0x28
 800a208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f000 81b0 	beq.w	800a570 <_dtoa_r+0xb48>
 800a210:	6923      	ldr	r3, [r4, #16]
 800a212:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a216:	6918      	ldr	r0, [r3, #16]
 800a218:	f000 fb72 	bl	800a900 <__hi0bits>
 800a21c:	f1c0 0020 	rsb	r0, r0, #32
 800a220:	9b08      	ldr	r3, [sp, #32]
 800a222:	4418      	add	r0, r3
 800a224:	f010 001f 	ands.w	r0, r0, #31
 800a228:	d077      	beq.n	800a31a <_dtoa_r+0x8f2>
 800a22a:	f1c0 0320 	rsb	r3, r0, #32
 800a22e:	2b04      	cmp	r3, #4
 800a230:	dd6b      	ble.n	800a30a <_dtoa_r+0x8e2>
 800a232:	9b08      	ldr	r3, [sp, #32]
 800a234:	f1c0 001c 	rsb	r0, r0, #28
 800a238:	4403      	add	r3, r0
 800a23a:	4480      	add	r8, r0
 800a23c:	4406      	add	r6, r0
 800a23e:	9308      	str	r3, [sp, #32]
 800a240:	f1b8 0f00 	cmp.w	r8, #0
 800a244:	dd05      	ble.n	800a252 <_dtoa_r+0x82a>
 800a246:	4649      	mov	r1, r9
 800a248:	4642      	mov	r2, r8
 800a24a:	4658      	mov	r0, fp
 800a24c:	f000 fcbe 	bl	800abcc <__lshift>
 800a250:	4681      	mov	r9, r0
 800a252:	9b08      	ldr	r3, [sp, #32]
 800a254:	2b00      	cmp	r3, #0
 800a256:	dd05      	ble.n	800a264 <_dtoa_r+0x83c>
 800a258:	4621      	mov	r1, r4
 800a25a:	461a      	mov	r2, r3
 800a25c:	4658      	mov	r0, fp
 800a25e:	f000 fcb5 	bl	800abcc <__lshift>
 800a262:	4604      	mov	r4, r0
 800a264:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a266:	2b00      	cmp	r3, #0
 800a268:	d059      	beq.n	800a31e <_dtoa_r+0x8f6>
 800a26a:	4621      	mov	r1, r4
 800a26c:	4648      	mov	r0, r9
 800a26e:	f000 fd19 	bl	800aca4 <__mcmp>
 800a272:	2800      	cmp	r0, #0
 800a274:	da53      	bge.n	800a31e <_dtoa_r+0x8f6>
 800a276:	1e7b      	subs	r3, r7, #1
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	4649      	mov	r1, r9
 800a27c:	2300      	movs	r3, #0
 800a27e:	220a      	movs	r2, #10
 800a280:	4658      	mov	r0, fp
 800a282:	f000 faf7 	bl	800a874 <__multadd>
 800a286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a288:	4681      	mov	r9, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 8172 	beq.w	800a574 <_dtoa_r+0xb4c>
 800a290:	2300      	movs	r3, #0
 800a292:	4629      	mov	r1, r5
 800a294:	220a      	movs	r2, #10
 800a296:	4658      	mov	r0, fp
 800a298:	f000 faec 	bl	800a874 <__multadd>
 800a29c:	9b00      	ldr	r3, [sp, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	dc67      	bgt.n	800a374 <_dtoa_r+0x94c>
 800a2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	dc41      	bgt.n	800a32e <_dtoa_r+0x906>
 800a2aa:	e063      	b.n	800a374 <_dtoa_r+0x94c>
 800a2ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a2ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a2b2:	e746      	b.n	800a142 <_dtoa_r+0x71a>
 800a2b4:	9b07      	ldr	r3, [sp, #28]
 800a2b6:	1e5c      	subs	r4, r3, #1
 800a2b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ba:	42a3      	cmp	r3, r4
 800a2bc:	bfbf      	itttt	lt
 800a2be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a2c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a2c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a2c4:	1ae3      	sublt	r3, r4, r3
 800a2c6:	bfb4      	ite	lt
 800a2c8:	18d2      	addlt	r2, r2, r3
 800a2ca:	1b1c      	subge	r4, r3, r4
 800a2cc:	9b07      	ldr	r3, [sp, #28]
 800a2ce:	bfbc      	itt	lt
 800a2d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a2d2:	2400      	movlt	r4, #0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	bfb5      	itete	lt
 800a2d8:	eba8 0603 	sublt.w	r6, r8, r3
 800a2dc:	9b07      	ldrge	r3, [sp, #28]
 800a2de:	2300      	movlt	r3, #0
 800a2e0:	4646      	movge	r6, r8
 800a2e2:	e730      	b.n	800a146 <_dtoa_r+0x71e>
 800a2e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a2e8:	4646      	mov	r6, r8
 800a2ea:	e735      	b.n	800a158 <_dtoa_r+0x730>
 800a2ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2ee:	e75c      	b.n	800a1aa <_dtoa_r+0x782>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e788      	b.n	800a206 <_dtoa_r+0x7de>
 800a2f4:	3fe00000 	.word	0x3fe00000
 800a2f8:	40240000 	.word	0x40240000
 800a2fc:	40140000 	.word	0x40140000
 800a300:	9b02      	ldr	r3, [sp, #8]
 800a302:	e780      	b.n	800a206 <_dtoa_r+0x7de>
 800a304:	2300      	movs	r3, #0
 800a306:	930a      	str	r3, [sp, #40]	@ 0x28
 800a308:	e782      	b.n	800a210 <_dtoa_r+0x7e8>
 800a30a:	d099      	beq.n	800a240 <_dtoa_r+0x818>
 800a30c:	9a08      	ldr	r2, [sp, #32]
 800a30e:	331c      	adds	r3, #28
 800a310:	441a      	add	r2, r3
 800a312:	4498      	add	r8, r3
 800a314:	441e      	add	r6, r3
 800a316:	9208      	str	r2, [sp, #32]
 800a318:	e792      	b.n	800a240 <_dtoa_r+0x818>
 800a31a:	4603      	mov	r3, r0
 800a31c:	e7f6      	b.n	800a30c <_dtoa_r+0x8e4>
 800a31e:	9b07      	ldr	r3, [sp, #28]
 800a320:	9704      	str	r7, [sp, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	dc20      	bgt.n	800a368 <_dtoa_r+0x940>
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	dd1e      	ble.n	800a36c <_dtoa_r+0x944>
 800a32e:	9b00      	ldr	r3, [sp, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	f47f aec0 	bne.w	800a0b6 <_dtoa_r+0x68e>
 800a336:	4621      	mov	r1, r4
 800a338:	2205      	movs	r2, #5
 800a33a:	4658      	mov	r0, fp
 800a33c:	f000 fa9a 	bl	800a874 <__multadd>
 800a340:	4601      	mov	r1, r0
 800a342:	4604      	mov	r4, r0
 800a344:	4648      	mov	r0, r9
 800a346:	f000 fcad 	bl	800aca4 <__mcmp>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	f77f aeb3 	ble.w	800a0b6 <_dtoa_r+0x68e>
 800a350:	4656      	mov	r6, sl
 800a352:	2331      	movs	r3, #49	@ 0x31
 800a354:	f806 3b01 	strb.w	r3, [r6], #1
 800a358:	9b04      	ldr	r3, [sp, #16]
 800a35a:	3301      	adds	r3, #1
 800a35c:	9304      	str	r3, [sp, #16]
 800a35e:	e6ae      	b.n	800a0be <_dtoa_r+0x696>
 800a360:	9c07      	ldr	r4, [sp, #28]
 800a362:	9704      	str	r7, [sp, #16]
 800a364:	4625      	mov	r5, r4
 800a366:	e7f3      	b.n	800a350 <_dtoa_r+0x928>
 800a368:	9b07      	ldr	r3, [sp, #28]
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 8104 	beq.w	800a57c <_dtoa_r+0xb54>
 800a374:	2e00      	cmp	r6, #0
 800a376:	dd05      	ble.n	800a384 <_dtoa_r+0x95c>
 800a378:	4629      	mov	r1, r5
 800a37a:	4632      	mov	r2, r6
 800a37c:	4658      	mov	r0, fp
 800a37e:	f000 fc25 	bl	800abcc <__lshift>
 800a382:	4605      	mov	r5, r0
 800a384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a386:	2b00      	cmp	r3, #0
 800a388:	d05a      	beq.n	800a440 <_dtoa_r+0xa18>
 800a38a:	6869      	ldr	r1, [r5, #4]
 800a38c:	4658      	mov	r0, fp
 800a38e:	f000 fa0f 	bl	800a7b0 <_Balloc>
 800a392:	4606      	mov	r6, r0
 800a394:	b928      	cbnz	r0, 800a3a2 <_dtoa_r+0x97a>
 800a396:	4b84      	ldr	r3, [pc, #528]	@ (800a5a8 <_dtoa_r+0xb80>)
 800a398:	4602      	mov	r2, r0
 800a39a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a39e:	f7ff bb5a 	b.w	8009a56 <_dtoa_r+0x2e>
 800a3a2:	692a      	ldr	r2, [r5, #16]
 800a3a4:	3202      	adds	r2, #2
 800a3a6:	0092      	lsls	r2, r2, #2
 800a3a8:	f105 010c 	add.w	r1, r5, #12
 800a3ac:	300c      	adds	r0, #12
 800a3ae:	f7ff faa4 	bl	80098fa <memcpy>
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4658      	mov	r0, fp
 800a3b8:	f000 fc08 	bl	800abcc <__lshift>
 800a3bc:	f10a 0301 	add.w	r3, sl, #1
 800a3c0:	9307      	str	r3, [sp, #28]
 800a3c2:	9b00      	ldr	r3, [sp, #0]
 800a3c4:	4453      	add	r3, sl
 800a3c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3c8:	9b02      	ldr	r3, [sp, #8]
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	462f      	mov	r7, r5
 800a3d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3d2:	4605      	mov	r5, r0
 800a3d4:	9b07      	ldr	r3, [sp, #28]
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	4648      	mov	r0, r9
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	f7ff fa9a 	bl	8009916 <quorem>
 800a3e2:	4639      	mov	r1, r7
 800a3e4:	9002      	str	r0, [sp, #8]
 800a3e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3ea:	4648      	mov	r0, r9
 800a3ec:	f000 fc5a 	bl	800aca4 <__mcmp>
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	9008      	str	r0, [sp, #32]
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	4658      	mov	r0, fp
 800a3f8:	f000 fc70 	bl	800acdc <__mdiff>
 800a3fc:	68c2      	ldr	r2, [r0, #12]
 800a3fe:	4606      	mov	r6, r0
 800a400:	bb02      	cbnz	r2, 800a444 <_dtoa_r+0xa1c>
 800a402:	4601      	mov	r1, r0
 800a404:	4648      	mov	r0, r9
 800a406:	f000 fc4d 	bl	800aca4 <__mcmp>
 800a40a:	4602      	mov	r2, r0
 800a40c:	4631      	mov	r1, r6
 800a40e:	4658      	mov	r0, fp
 800a410:	920e      	str	r2, [sp, #56]	@ 0x38
 800a412:	f000 fa0d 	bl	800a830 <_Bfree>
 800a416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a418:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a41a:	9e07      	ldr	r6, [sp, #28]
 800a41c:	ea43 0102 	orr.w	r1, r3, r2
 800a420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a422:	4319      	orrs	r1, r3
 800a424:	d110      	bne.n	800a448 <_dtoa_r+0xa20>
 800a426:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a42a:	d029      	beq.n	800a480 <_dtoa_r+0xa58>
 800a42c:	9b08      	ldr	r3, [sp, #32]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	dd02      	ble.n	800a438 <_dtoa_r+0xa10>
 800a432:	9b02      	ldr	r3, [sp, #8]
 800a434:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a438:	9b00      	ldr	r3, [sp, #0]
 800a43a:	f883 8000 	strb.w	r8, [r3]
 800a43e:	e63f      	b.n	800a0c0 <_dtoa_r+0x698>
 800a440:	4628      	mov	r0, r5
 800a442:	e7bb      	b.n	800a3bc <_dtoa_r+0x994>
 800a444:	2201      	movs	r2, #1
 800a446:	e7e1      	b.n	800a40c <_dtoa_r+0x9e4>
 800a448:	9b08      	ldr	r3, [sp, #32]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	db04      	blt.n	800a458 <_dtoa_r+0xa30>
 800a44e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a450:	430b      	orrs	r3, r1
 800a452:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a454:	430b      	orrs	r3, r1
 800a456:	d120      	bne.n	800a49a <_dtoa_r+0xa72>
 800a458:	2a00      	cmp	r2, #0
 800a45a:	dded      	ble.n	800a438 <_dtoa_r+0xa10>
 800a45c:	4649      	mov	r1, r9
 800a45e:	2201      	movs	r2, #1
 800a460:	4658      	mov	r0, fp
 800a462:	f000 fbb3 	bl	800abcc <__lshift>
 800a466:	4621      	mov	r1, r4
 800a468:	4681      	mov	r9, r0
 800a46a:	f000 fc1b 	bl	800aca4 <__mcmp>
 800a46e:	2800      	cmp	r0, #0
 800a470:	dc03      	bgt.n	800a47a <_dtoa_r+0xa52>
 800a472:	d1e1      	bne.n	800a438 <_dtoa_r+0xa10>
 800a474:	f018 0f01 	tst.w	r8, #1
 800a478:	d0de      	beq.n	800a438 <_dtoa_r+0xa10>
 800a47a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a47e:	d1d8      	bne.n	800a432 <_dtoa_r+0xa0a>
 800a480:	9a00      	ldr	r2, [sp, #0]
 800a482:	2339      	movs	r3, #57	@ 0x39
 800a484:	7013      	strb	r3, [r2, #0]
 800a486:	4633      	mov	r3, r6
 800a488:	461e      	mov	r6, r3
 800a48a:	3b01      	subs	r3, #1
 800a48c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a490:	2a39      	cmp	r2, #57	@ 0x39
 800a492:	d052      	beq.n	800a53a <_dtoa_r+0xb12>
 800a494:	3201      	adds	r2, #1
 800a496:	701a      	strb	r2, [r3, #0]
 800a498:	e612      	b.n	800a0c0 <_dtoa_r+0x698>
 800a49a:	2a00      	cmp	r2, #0
 800a49c:	dd07      	ble.n	800a4ae <_dtoa_r+0xa86>
 800a49e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a4a2:	d0ed      	beq.n	800a480 <_dtoa_r+0xa58>
 800a4a4:	9a00      	ldr	r2, [sp, #0]
 800a4a6:	f108 0301 	add.w	r3, r8, #1
 800a4aa:	7013      	strb	r3, [r2, #0]
 800a4ac:	e608      	b.n	800a0c0 <_dtoa_r+0x698>
 800a4ae:	9b07      	ldr	r3, [sp, #28]
 800a4b0:	9a07      	ldr	r2, [sp, #28]
 800a4b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d028      	beq.n	800a50e <_dtoa_r+0xae6>
 800a4bc:	4649      	mov	r1, r9
 800a4be:	2300      	movs	r3, #0
 800a4c0:	220a      	movs	r2, #10
 800a4c2:	4658      	mov	r0, fp
 800a4c4:	f000 f9d6 	bl	800a874 <__multadd>
 800a4c8:	42af      	cmp	r7, r5
 800a4ca:	4681      	mov	r9, r0
 800a4cc:	f04f 0300 	mov.w	r3, #0
 800a4d0:	f04f 020a 	mov.w	r2, #10
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	4658      	mov	r0, fp
 800a4d8:	d107      	bne.n	800a4ea <_dtoa_r+0xac2>
 800a4da:	f000 f9cb 	bl	800a874 <__multadd>
 800a4de:	4607      	mov	r7, r0
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	9b07      	ldr	r3, [sp, #28]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	9307      	str	r3, [sp, #28]
 800a4e8:	e774      	b.n	800a3d4 <_dtoa_r+0x9ac>
 800a4ea:	f000 f9c3 	bl	800a874 <__multadd>
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	4607      	mov	r7, r0
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	220a      	movs	r2, #10
 800a4f6:	4658      	mov	r0, fp
 800a4f8:	f000 f9bc 	bl	800a874 <__multadd>
 800a4fc:	4605      	mov	r5, r0
 800a4fe:	e7f0      	b.n	800a4e2 <_dtoa_r+0xaba>
 800a500:	9b00      	ldr	r3, [sp, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	bfcc      	ite	gt
 800a506:	461e      	movgt	r6, r3
 800a508:	2601      	movle	r6, #1
 800a50a:	4456      	add	r6, sl
 800a50c:	2700      	movs	r7, #0
 800a50e:	4649      	mov	r1, r9
 800a510:	2201      	movs	r2, #1
 800a512:	4658      	mov	r0, fp
 800a514:	f000 fb5a 	bl	800abcc <__lshift>
 800a518:	4621      	mov	r1, r4
 800a51a:	4681      	mov	r9, r0
 800a51c:	f000 fbc2 	bl	800aca4 <__mcmp>
 800a520:	2800      	cmp	r0, #0
 800a522:	dcb0      	bgt.n	800a486 <_dtoa_r+0xa5e>
 800a524:	d102      	bne.n	800a52c <_dtoa_r+0xb04>
 800a526:	f018 0f01 	tst.w	r8, #1
 800a52a:	d1ac      	bne.n	800a486 <_dtoa_r+0xa5e>
 800a52c:	4633      	mov	r3, r6
 800a52e:	461e      	mov	r6, r3
 800a530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a534:	2a30      	cmp	r2, #48	@ 0x30
 800a536:	d0fa      	beq.n	800a52e <_dtoa_r+0xb06>
 800a538:	e5c2      	b.n	800a0c0 <_dtoa_r+0x698>
 800a53a:	459a      	cmp	sl, r3
 800a53c:	d1a4      	bne.n	800a488 <_dtoa_r+0xa60>
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	3301      	adds	r3, #1
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	2331      	movs	r3, #49	@ 0x31
 800a546:	f88a 3000 	strb.w	r3, [sl]
 800a54a:	e5b9      	b.n	800a0c0 <_dtoa_r+0x698>
 800a54c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a54e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a5ac <_dtoa_r+0xb84>
 800a552:	b11b      	cbz	r3, 800a55c <_dtoa_r+0xb34>
 800a554:	f10a 0308 	add.w	r3, sl, #8
 800a558:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	4650      	mov	r0, sl
 800a55e:	b019      	add	sp, #100	@ 0x64
 800a560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a566:	2b01      	cmp	r3, #1
 800a568:	f77f ae37 	ble.w	800a1da <_dtoa_r+0x7b2>
 800a56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a56e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a570:	2001      	movs	r0, #1
 800a572:	e655      	b.n	800a220 <_dtoa_r+0x7f8>
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f77f aed6 	ble.w	800a328 <_dtoa_r+0x900>
 800a57c:	4656      	mov	r6, sl
 800a57e:	4621      	mov	r1, r4
 800a580:	4648      	mov	r0, r9
 800a582:	f7ff f9c8 	bl	8009916 <quorem>
 800a586:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a58a:	f806 8b01 	strb.w	r8, [r6], #1
 800a58e:	9b00      	ldr	r3, [sp, #0]
 800a590:	eba6 020a 	sub.w	r2, r6, sl
 800a594:	4293      	cmp	r3, r2
 800a596:	ddb3      	ble.n	800a500 <_dtoa_r+0xad8>
 800a598:	4649      	mov	r1, r9
 800a59a:	2300      	movs	r3, #0
 800a59c:	220a      	movs	r2, #10
 800a59e:	4658      	mov	r0, fp
 800a5a0:	f000 f968 	bl	800a874 <__multadd>
 800a5a4:	4681      	mov	r9, r0
 800a5a6:	e7ea      	b.n	800a57e <_dtoa_r+0xb56>
 800a5a8:	0800b780 	.word	0x0800b780
 800a5ac:	0800b704 	.word	0x0800b704

0800a5b0 <_free_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	d041      	beq.n	800a63c <_free_r+0x8c>
 800a5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5bc:	1f0c      	subs	r4, r1, #4
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bfb8      	it	lt
 800a5c2:	18e4      	addlt	r4, r4, r3
 800a5c4:	f000 f8e8 	bl	800a798 <__malloc_lock>
 800a5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a640 <_free_r+0x90>)
 800a5ca:	6813      	ldr	r3, [r2, #0]
 800a5cc:	b933      	cbnz	r3, 800a5dc <_free_r+0x2c>
 800a5ce:	6063      	str	r3, [r4, #4]
 800a5d0:	6014      	str	r4, [r2, #0]
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5d8:	f000 b8e4 	b.w	800a7a4 <__malloc_unlock>
 800a5dc:	42a3      	cmp	r3, r4
 800a5de:	d908      	bls.n	800a5f2 <_free_r+0x42>
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	1821      	adds	r1, r4, r0
 800a5e4:	428b      	cmp	r3, r1
 800a5e6:	bf01      	itttt	eq
 800a5e8:	6819      	ldreq	r1, [r3, #0]
 800a5ea:	685b      	ldreq	r3, [r3, #4]
 800a5ec:	1809      	addeq	r1, r1, r0
 800a5ee:	6021      	streq	r1, [r4, #0]
 800a5f0:	e7ed      	b.n	800a5ce <_free_r+0x1e>
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	b10b      	cbz	r3, 800a5fc <_free_r+0x4c>
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	d9fa      	bls.n	800a5f2 <_free_r+0x42>
 800a5fc:	6811      	ldr	r1, [r2, #0]
 800a5fe:	1850      	adds	r0, r2, r1
 800a600:	42a0      	cmp	r0, r4
 800a602:	d10b      	bne.n	800a61c <_free_r+0x6c>
 800a604:	6820      	ldr	r0, [r4, #0]
 800a606:	4401      	add	r1, r0
 800a608:	1850      	adds	r0, r2, r1
 800a60a:	4283      	cmp	r3, r0
 800a60c:	6011      	str	r1, [r2, #0]
 800a60e:	d1e0      	bne.n	800a5d2 <_free_r+0x22>
 800a610:	6818      	ldr	r0, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	6053      	str	r3, [r2, #4]
 800a616:	4408      	add	r0, r1
 800a618:	6010      	str	r0, [r2, #0]
 800a61a:	e7da      	b.n	800a5d2 <_free_r+0x22>
 800a61c:	d902      	bls.n	800a624 <_free_r+0x74>
 800a61e:	230c      	movs	r3, #12
 800a620:	602b      	str	r3, [r5, #0]
 800a622:	e7d6      	b.n	800a5d2 <_free_r+0x22>
 800a624:	6820      	ldr	r0, [r4, #0]
 800a626:	1821      	adds	r1, r4, r0
 800a628:	428b      	cmp	r3, r1
 800a62a:	bf04      	itt	eq
 800a62c:	6819      	ldreq	r1, [r3, #0]
 800a62e:	685b      	ldreq	r3, [r3, #4]
 800a630:	6063      	str	r3, [r4, #4]
 800a632:	bf04      	itt	eq
 800a634:	1809      	addeq	r1, r1, r0
 800a636:	6021      	streq	r1, [r4, #0]
 800a638:	6054      	str	r4, [r2, #4]
 800a63a:	e7ca      	b.n	800a5d2 <_free_r+0x22>
 800a63c:	bd38      	pop	{r3, r4, r5, pc}
 800a63e:	bf00      	nop
 800a640:	2001a06c 	.word	0x2001a06c

0800a644 <malloc>:
 800a644:	4b02      	ldr	r3, [pc, #8]	@ (800a650 <malloc+0xc>)
 800a646:	4601      	mov	r1, r0
 800a648:	6818      	ldr	r0, [r3, #0]
 800a64a:	f000 b825 	b.w	800a698 <_malloc_r>
 800a64e:	bf00      	nop
 800a650:	20000108 	.word	0x20000108

0800a654 <sbrk_aligned>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	4e0f      	ldr	r6, [pc, #60]	@ (800a694 <sbrk_aligned+0x40>)
 800a658:	460c      	mov	r4, r1
 800a65a:	6831      	ldr	r1, [r6, #0]
 800a65c:	4605      	mov	r5, r0
 800a65e:	b911      	cbnz	r1, 800a666 <sbrk_aligned+0x12>
 800a660:	f000 fcd4 	bl	800b00c <_sbrk_r>
 800a664:	6030      	str	r0, [r6, #0]
 800a666:	4621      	mov	r1, r4
 800a668:	4628      	mov	r0, r5
 800a66a:	f000 fccf 	bl	800b00c <_sbrk_r>
 800a66e:	1c43      	adds	r3, r0, #1
 800a670:	d103      	bne.n	800a67a <sbrk_aligned+0x26>
 800a672:	f04f 34ff 	mov.w	r4, #4294967295
 800a676:	4620      	mov	r0, r4
 800a678:	bd70      	pop	{r4, r5, r6, pc}
 800a67a:	1cc4      	adds	r4, r0, #3
 800a67c:	f024 0403 	bic.w	r4, r4, #3
 800a680:	42a0      	cmp	r0, r4
 800a682:	d0f8      	beq.n	800a676 <sbrk_aligned+0x22>
 800a684:	1a21      	subs	r1, r4, r0
 800a686:	4628      	mov	r0, r5
 800a688:	f000 fcc0 	bl	800b00c <_sbrk_r>
 800a68c:	3001      	adds	r0, #1
 800a68e:	d1f2      	bne.n	800a676 <sbrk_aligned+0x22>
 800a690:	e7ef      	b.n	800a672 <sbrk_aligned+0x1e>
 800a692:	bf00      	nop
 800a694:	2001a068 	.word	0x2001a068

0800a698 <_malloc_r>:
 800a698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a69c:	1ccd      	adds	r5, r1, #3
 800a69e:	f025 0503 	bic.w	r5, r5, #3
 800a6a2:	3508      	adds	r5, #8
 800a6a4:	2d0c      	cmp	r5, #12
 800a6a6:	bf38      	it	cc
 800a6a8:	250c      	movcc	r5, #12
 800a6aa:	2d00      	cmp	r5, #0
 800a6ac:	4606      	mov	r6, r0
 800a6ae:	db01      	blt.n	800a6b4 <_malloc_r+0x1c>
 800a6b0:	42a9      	cmp	r1, r5
 800a6b2:	d904      	bls.n	800a6be <_malloc_r+0x26>
 800a6b4:	230c      	movs	r3, #12
 800a6b6:	6033      	str	r3, [r6, #0]
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a794 <_malloc_r+0xfc>
 800a6c2:	f000 f869 	bl	800a798 <__malloc_lock>
 800a6c6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ca:	461c      	mov	r4, r3
 800a6cc:	bb44      	cbnz	r4, 800a720 <_malloc_r+0x88>
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff ffbf 	bl	800a654 <sbrk_aligned>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	4604      	mov	r4, r0
 800a6da:	d158      	bne.n	800a78e <_malloc_r+0xf6>
 800a6dc:	f8d8 4000 	ldr.w	r4, [r8]
 800a6e0:	4627      	mov	r7, r4
 800a6e2:	2f00      	cmp	r7, #0
 800a6e4:	d143      	bne.n	800a76e <_malloc_r+0xd6>
 800a6e6:	2c00      	cmp	r4, #0
 800a6e8:	d04b      	beq.n	800a782 <_malloc_r+0xea>
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	4639      	mov	r1, r7
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	eb04 0903 	add.w	r9, r4, r3
 800a6f4:	f000 fc8a 	bl	800b00c <_sbrk_r>
 800a6f8:	4581      	cmp	r9, r0
 800a6fa:	d142      	bne.n	800a782 <_malloc_r+0xea>
 800a6fc:	6821      	ldr	r1, [r4, #0]
 800a6fe:	1a6d      	subs	r5, r5, r1
 800a700:	4629      	mov	r1, r5
 800a702:	4630      	mov	r0, r6
 800a704:	f7ff ffa6 	bl	800a654 <sbrk_aligned>
 800a708:	3001      	adds	r0, #1
 800a70a:	d03a      	beq.n	800a782 <_malloc_r+0xea>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	442b      	add	r3, r5
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	f8d8 3000 	ldr.w	r3, [r8]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	bb62      	cbnz	r2, 800a774 <_malloc_r+0xdc>
 800a71a:	f8c8 7000 	str.w	r7, [r8]
 800a71e:	e00f      	b.n	800a740 <_malloc_r+0xa8>
 800a720:	6822      	ldr	r2, [r4, #0]
 800a722:	1b52      	subs	r2, r2, r5
 800a724:	d420      	bmi.n	800a768 <_malloc_r+0xd0>
 800a726:	2a0b      	cmp	r2, #11
 800a728:	d917      	bls.n	800a75a <_malloc_r+0xc2>
 800a72a:	1961      	adds	r1, r4, r5
 800a72c:	42a3      	cmp	r3, r4
 800a72e:	6025      	str	r5, [r4, #0]
 800a730:	bf18      	it	ne
 800a732:	6059      	strne	r1, [r3, #4]
 800a734:	6863      	ldr	r3, [r4, #4]
 800a736:	bf08      	it	eq
 800a738:	f8c8 1000 	streq.w	r1, [r8]
 800a73c:	5162      	str	r2, [r4, r5]
 800a73e:	604b      	str	r3, [r1, #4]
 800a740:	4630      	mov	r0, r6
 800a742:	f000 f82f 	bl	800a7a4 <__malloc_unlock>
 800a746:	f104 000b 	add.w	r0, r4, #11
 800a74a:	1d23      	adds	r3, r4, #4
 800a74c:	f020 0007 	bic.w	r0, r0, #7
 800a750:	1ac2      	subs	r2, r0, r3
 800a752:	bf1c      	itt	ne
 800a754:	1a1b      	subne	r3, r3, r0
 800a756:	50a3      	strne	r3, [r4, r2]
 800a758:	e7af      	b.n	800a6ba <_malloc_r+0x22>
 800a75a:	6862      	ldr	r2, [r4, #4]
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	bf0c      	ite	eq
 800a760:	f8c8 2000 	streq.w	r2, [r8]
 800a764:	605a      	strne	r2, [r3, #4]
 800a766:	e7eb      	b.n	800a740 <_malloc_r+0xa8>
 800a768:	4623      	mov	r3, r4
 800a76a:	6864      	ldr	r4, [r4, #4]
 800a76c:	e7ae      	b.n	800a6cc <_malloc_r+0x34>
 800a76e:	463c      	mov	r4, r7
 800a770:	687f      	ldr	r7, [r7, #4]
 800a772:	e7b6      	b.n	800a6e2 <_malloc_r+0x4a>
 800a774:	461a      	mov	r2, r3
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	42a3      	cmp	r3, r4
 800a77a:	d1fb      	bne.n	800a774 <_malloc_r+0xdc>
 800a77c:	2300      	movs	r3, #0
 800a77e:	6053      	str	r3, [r2, #4]
 800a780:	e7de      	b.n	800a740 <_malloc_r+0xa8>
 800a782:	230c      	movs	r3, #12
 800a784:	6033      	str	r3, [r6, #0]
 800a786:	4630      	mov	r0, r6
 800a788:	f000 f80c 	bl	800a7a4 <__malloc_unlock>
 800a78c:	e794      	b.n	800a6b8 <_malloc_r+0x20>
 800a78e:	6005      	str	r5, [r0, #0]
 800a790:	e7d6      	b.n	800a740 <_malloc_r+0xa8>
 800a792:	bf00      	nop
 800a794:	2001a06c 	.word	0x2001a06c

0800a798 <__malloc_lock>:
 800a798:	4801      	ldr	r0, [pc, #4]	@ (800a7a0 <__malloc_lock+0x8>)
 800a79a:	f7ff b8ac 	b.w	80098f6 <__retarget_lock_acquire_recursive>
 800a79e:	bf00      	nop
 800a7a0:	2001a064 	.word	0x2001a064

0800a7a4 <__malloc_unlock>:
 800a7a4:	4801      	ldr	r0, [pc, #4]	@ (800a7ac <__malloc_unlock+0x8>)
 800a7a6:	f7ff b8a7 	b.w	80098f8 <__retarget_lock_release_recursive>
 800a7aa:	bf00      	nop
 800a7ac:	2001a064 	.word	0x2001a064

0800a7b0 <_Balloc>:
 800a7b0:	b570      	push	{r4, r5, r6, lr}
 800a7b2:	69c6      	ldr	r6, [r0, #28]
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	460d      	mov	r5, r1
 800a7b8:	b976      	cbnz	r6, 800a7d8 <_Balloc+0x28>
 800a7ba:	2010      	movs	r0, #16
 800a7bc:	f7ff ff42 	bl	800a644 <malloc>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	61e0      	str	r0, [r4, #28]
 800a7c4:	b920      	cbnz	r0, 800a7d0 <_Balloc+0x20>
 800a7c6:	4b18      	ldr	r3, [pc, #96]	@ (800a828 <_Balloc+0x78>)
 800a7c8:	4818      	ldr	r0, [pc, #96]	@ (800a82c <_Balloc+0x7c>)
 800a7ca:	216b      	movs	r1, #107	@ 0x6b
 800a7cc:	f000 fc2e 	bl	800b02c <__assert_func>
 800a7d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7d4:	6006      	str	r6, [r0, #0]
 800a7d6:	60c6      	str	r6, [r0, #12]
 800a7d8:	69e6      	ldr	r6, [r4, #28]
 800a7da:	68f3      	ldr	r3, [r6, #12]
 800a7dc:	b183      	cbz	r3, 800a800 <_Balloc+0x50>
 800a7de:	69e3      	ldr	r3, [r4, #28]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7e6:	b9b8      	cbnz	r0, 800a818 <_Balloc+0x68>
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	fa01 f605 	lsl.w	r6, r1, r5
 800a7ee:	1d72      	adds	r2, r6, #5
 800a7f0:	0092      	lsls	r2, r2, #2
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 fc38 	bl	800b068 <_calloc_r>
 800a7f8:	b160      	cbz	r0, 800a814 <_Balloc+0x64>
 800a7fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7fe:	e00e      	b.n	800a81e <_Balloc+0x6e>
 800a800:	2221      	movs	r2, #33	@ 0x21
 800a802:	2104      	movs	r1, #4
 800a804:	4620      	mov	r0, r4
 800a806:	f000 fc2f 	bl	800b068 <_calloc_r>
 800a80a:	69e3      	ldr	r3, [r4, #28]
 800a80c:	60f0      	str	r0, [r6, #12]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1e4      	bne.n	800a7de <_Balloc+0x2e>
 800a814:	2000      	movs	r0, #0
 800a816:	bd70      	pop	{r4, r5, r6, pc}
 800a818:	6802      	ldr	r2, [r0, #0]
 800a81a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a81e:	2300      	movs	r3, #0
 800a820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a824:	e7f7      	b.n	800a816 <_Balloc+0x66>
 800a826:	bf00      	nop
 800a828:	0800b711 	.word	0x0800b711
 800a82c:	0800b791 	.word	0x0800b791

0800a830 <_Bfree>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	69c6      	ldr	r6, [r0, #28]
 800a834:	4605      	mov	r5, r0
 800a836:	460c      	mov	r4, r1
 800a838:	b976      	cbnz	r6, 800a858 <_Bfree+0x28>
 800a83a:	2010      	movs	r0, #16
 800a83c:	f7ff ff02 	bl	800a644 <malloc>
 800a840:	4602      	mov	r2, r0
 800a842:	61e8      	str	r0, [r5, #28]
 800a844:	b920      	cbnz	r0, 800a850 <_Bfree+0x20>
 800a846:	4b09      	ldr	r3, [pc, #36]	@ (800a86c <_Bfree+0x3c>)
 800a848:	4809      	ldr	r0, [pc, #36]	@ (800a870 <_Bfree+0x40>)
 800a84a:	218f      	movs	r1, #143	@ 0x8f
 800a84c:	f000 fbee 	bl	800b02c <__assert_func>
 800a850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a854:	6006      	str	r6, [r0, #0]
 800a856:	60c6      	str	r6, [r0, #12]
 800a858:	b13c      	cbz	r4, 800a86a <_Bfree+0x3a>
 800a85a:	69eb      	ldr	r3, [r5, #28]
 800a85c:	6862      	ldr	r2, [r4, #4]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a864:	6021      	str	r1, [r4, #0]
 800a866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
 800a86c:	0800b711 	.word	0x0800b711
 800a870:	0800b791 	.word	0x0800b791

0800a874 <__multadd>:
 800a874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a878:	690d      	ldr	r5, [r1, #16]
 800a87a:	4607      	mov	r7, r0
 800a87c:	460c      	mov	r4, r1
 800a87e:	461e      	mov	r6, r3
 800a880:	f101 0c14 	add.w	ip, r1, #20
 800a884:	2000      	movs	r0, #0
 800a886:	f8dc 3000 	ldr.w	r3, [ip]
 800a88a:	b299      	uxth	r1, r3
 800a88c:	fb02 6101 	mla	r1, r2, r1, r6
 800a890:	0c1e      	lsrs	r6, r3, #16
 800a892:	0c0b      	lsrs	r3, r1, #16
 800a894:	fb02 3306 	mla	r3, r2, r6, r3
 800a898:	b289      	uxth	r1, r1
 800a89a:	3001      	adds	r0, #1
 800a89c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8a0:	4285      	cmp	r5, r0
 800a8a2:	f84c 1b04 	str.w	r1, [ip], #4
 800a8a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8aa:	dcec      	bgt.n	800a886 <__multadd+0x12>
 800a8ac:	b30e      	cbz	r6, 800a8f2 <__multadd+0x7e>
 800a8ae:	68a3      	ldr	r3, [r4, #8]
 800a8b0:	42ab      	cmp	r3, r5
 800a8b2:	dc19      	bgt.n	800a8e8 <__multadd+0x74>
 800a8b4:	6861      	ldr	r1, [r4, #4]
 800a8b6:	4638      	mov	r0, r7
 800a8b8:	3101      	adds	r1, #1
 800a8ba:	f7ff ff79 	bl	800a7b0 <_Balloc>
 800a8be:	4680      	mov	r8, r0
 800a8c0:	b928      	cbnz	r0, 800a8ce <__multadd+0x5a>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f8 <__multadd+0x84>)
 800a8c6:	480d      	ldr	r0, [pc, #52]	@ (800a8fc <__multadd+0x88>)
 800a8c8:	21ba      	movs	r1, #186	@ 0xba
 800a8ca:	f000 fbaf 	bl	800b02c <__assert_func>
 800a8ce:	6922      	ldr	r2, [r4, #16]
 800a8d0:	3202      	adds	r2, #2
 800a8d2:	f104 010c 	add.w	r1, r4, #12
 800a8d6:	0092      	lsls	r2, r2, #2
 800a8d8:	300c      	adds	r0, #12
 800a8da:	f7ff f80e 	bl	80098fa <memcpy>
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff ffa5 	bl	800a830 <_Bfree>
 800a8e6:	4644      	mov	r4, r8
 800a8e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8ec:	3501      	adds	r5, #1
 800a8ee:	615e      	str	r6, [r3, #20]
 800a8f0:	6125      	str	r5, [r4, #16]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f8:	0800b780 	.word	0x0800b780
 800a8fc:	0800b791 	.word	0x0800b791

0800a900 <__hi0bits>:
 800a900:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a904:	4603      	mov	r3, r0
 800a906:	bf36      	itet	cc
 800a908:	0403      	lslcc	r3, r0, #16
 800a90a:	2000      	movcs	r0, #0
 800a90c:	2010      	movcc	r0, #16
 800a90e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a912:	bf3c      	itt	cc
 800a914:	021b      	lslcc	r3, r3, #8
 800a916:	3008      	addcc	r0, #8
 800a918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a91c:	bf3c      	itt	cc
 800a91e:	011b      	lslcc	r3, r3, #4
 800a920:	3004      	addcc	r0, #4
 800a922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a926:	bf3c      	itt	cc
 800a928:	009b      	lslcc	r3, r3, #2
 800a92a:	3002      	addcc	r0, #2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	db05      	blt.n	800a93c <__hi0bits+0x3c>
 800a930:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a934:	f100 0001 	add.w	r0, r0, #1
 800a938:	bf08      	it	eq
 800a93a:	2020      	moveq	r0, #32
 800a93c:	4770      	bx	lr

0800a93e <__lo0bits>:
 800a93e:	6803      	ldr	r3, [r0, #0]
 800a940:	4602      	mov	r2, r0
 800a942:	f013 0007 	ands.w	r0, r3, #7
 800a946:	d00b      	beq.n	800a960 <__lo0bits+0x22>
 800a948:	07d9      	lsls	r1, r3, #31
 800a94a:	d421      	bmi.n	800a990 <__lo0bits+0x52>
 800a94c:	0798      	lsls	r0, r3, #30
 800a94e:	bf49      	itett	mi
 800a950:	085b      	lsrmi	r3, r3, #1
 800a952:	089b      	lsrpl	r3, r3, #2
 800a954:	2001      	movmi	r0, #1
 800a956:	6013      	strmi	r3, [r2, #0]
 800a958:	bf5c      	itt	pl
 800a95a:	6013      	strpl	r3, [r2, #0]
 800a95c:	2002      	movpl	r0, #2
 800a95e:	4770      	bx	lr
 800a960:	b299      	uxth	r1, r3
 800a962:	b909      	cbnz	r1, 800a968 <__lo0bits+0x2a>
 800a964:	0c1b      	lsrs	r3, r3, #16
 800a966:	2010      	movs	r0, #16
 800a968:	b2d9      	uxtb	r1, r3
 800a96a:	b909      	cbnz	r1, 800a970 <__lo0bits+0x32>
 800a96c:	3008      	adds	r0, #8
 800a96e:	0a1b      	lsrs	r3, r3, #8
 800a970:	0719      	lsls	r1, r3, #28
 800a972:	bf04      	itt	eq
 800a974:	091b      	lsreq	r3, r3, #4
 800a976:	3004      	addeq	r0, #4
 800a978:	0799      	lsls	r1, r3, #30
 800a97a:	bf04      	itt	eq
 800a97c:	089b      	lsreq	r3, r3, #2
 800a97e:	3002      	addeq	r0, #2
 800a980:	07d9      	lsls	r1, r3, #31
 800a982:	d403      	bmi.n	800a98c <__lo0bits+0x4e>
 800a984:	085b      	lsrs	r3, r3, #1
 800a986:	f100 0001 	add.w	r0, r0, #1
 800a98a:	d003      	beq.n	800a994 <__lo0bits+0x56>
 800a98c:	6013      	str	r3, [r2, #0]
 800a98e:	4770      	bx	lr
 800a990:	2000      	movs	r0, #0
 800a992:	4770      	bx	lr
 800a994:	2020      	movs	r0, #32
 800a996:	4770      	bx	lr

0800a998 <__i2b>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	460c      	mov	r4, r1
 800a99c:	2101      	movs	r1, #1
 800a99e:	f7ff ff07 	bl	800a7b0 <_Balloc>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	b928      	cbnz	r0, 800a9b2 <__i2b+0x1a>
 800a9a6:	4b05      	ldr	r3, [pc, #20]	@ (800a9bc <__i2b+0x24>)
 800a9a8:	4805      	ldr	r0, [pc, #20]	@ (800a9c0 <__i2b+0x28>)
 800a9aa:	f240 1145 	movw	r1, #325	@ 0x145
 800a9ae:	f000 fb3d 	bl	800b02c <__assert_func>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	6144      	str	r4, [r0, #20]
 800a9b6:	6103      	str	r3, [r0, #16]
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	bf00      	nop
 800a9bc:	0800b780 	.word	0x0800b780
 800a9c0:	0800b791 	.word	0x0800b791

0800a9c4 <__multiply>:
 800a9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c8:	4614      	mov	r4, r2
 800a9ca:	690a      	ldr	r2, [r1, #16]
 800a9cc:	6923      	ldr	r3, [r4, #16]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	bfa8      	it	ge
 800a9d2:	4623      	movge	r3, r4
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	bfa4      	itt	ge
 800a9d8:	460c      	movge	r4, r1
 800a9da:	461f      	movge	r7, r3
 800a9dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a9e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a9e4:	68a3      	ldr	r3, [r4, #8]
 800a9e6:	6861      	ldr	r1, [r4, #4]
 800a9e8:	eb0a 0609 	add.w	r6, sl, r9
 800a9ec:	42b3      	cmp	r3, r6
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	bfb8      	it	lt
 800a9f2:	3101      	addlt	r1, #1
 800a9f4:	f7ff fedc 	bl	800a7b0 <_Balloc>
 800a9f8:	b930      	cbnz	r0, 800aa08 <__multiply+0x44>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	4b44      	ldr	r3, [pc, #272]	@ (800ab10 <__multiply+0x14c>)
 800a9fe:	4845      	ldr	r0, [pc, #276]	@ (800ab14 <__multiply+0x150>)
 800aa00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aa04:	f000 fb12 	bl	800b02c <__assert_func>
 800aa08:	f100 0514 	add.w	r5, r0, #20
 800aa0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa10:	462b      	mov	r3, r5
 800aa12:	2200      	movs	r2, #0
 800aa14:	4543      	cmp	r3, r8
 800aa16:	d321      	bcc.n	800aa5c <__multiply+0x98>
 800aa18:	f107 0114 	add.w	r1, r7, #20
 800aa1c:	f104 0214 	add.w	r2, r4, #20
 800aa20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aa24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aa28:	9302      	str	r3, [sp, #8]
 800aa2a:	1b13      	subs	r3, r2, r4
 800aa2c:	3b15      	subs	r3, #21
 800aa2e:	f023 0303 	bic.w	r3, r3, #3
 800aa32:	3304      	adds	r3, #4
 800aa34:	f104 0715 	add.w	r7, r4, #21
 800aa38:	42ba      	cmp	r2, r7
 800aa3a:	bf38      	it	cc
 800aa3c:	2304      	movcc	r3, #4
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	9b02      	ldr	r3, [sp, #8]
 800aa42:	9103      	str	r1, [sp, #12]
 800aa44:	428b      	cmp	r3, r1
 800aa46:	d80c      	bhi.n	800aa62 <__multiply+0x9e>
 800aa48:	2e00      	cmp	r6, #0
 800aa4a:	dd03      	ble.n	800aa54 <__multiply+0x90>
 800aa4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d05b      	beq.n	800ab0c <__multiply+0x148>
 800aa54:	6106      	str	r6, [r0, #16]
 800aa56:	b005      	add	sp, #20
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	f843 2b04 	str.w	r2, [r3], #4
 800aa60:	e7d8      	b.n	800aa14 <__multiply+0x50>
 800aa62:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa66:	f1ba 0f00 	cmp.w	sl, #0
 800aa6a:	d024      	beq.n	800aab6 <__multiply+0xf2>
 800aa6c:	f104 0e14 	add.w	lr, r4, #20
 800aa70:	46a9      	mov	r9, r5
 800aa72:	f04f 0c00 	mov.w	ip, #0
 800aa76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa7a:	f8d9 3000 	ldr.w	r3, [r9]
 800aa7e:	fa1f fb87 	uxth.w	fp, r7
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa8c:	f8d9 7000 	ldr.w	r7, [r9]
 800aa90:	4463      	add	r3, ip
 800aa92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa96:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aaa4:	4572      	cmp	r2, lr
 800aaa6:	f849 3b04 	str.w	r3, [r9], #4
 800aaaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aaae:	d8e2      	bhi.n	800aa76 <__multiply+0xb2>
 800aab0:	9b01      	ldr	r3, [sp, #4]
 800aab2:	f845 c003 	str.w	ip, [r5, r3]
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aabc:	3104      	adds	r1, #4
 800aabe:	f1b9 0f00 	cmp.w	r9, #0
 800aac2:	d021      	beq.n	800ab08 <__multiply+0x144>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	f104 0c14 	add.w	ip, r4, #20
 800aaca:	46ae      	mov	lr, r5
 800aacc:	f04f 0a00 	mov.w	sl, #0
 800aad0:	f8bc b000 	ldrh.w	fp, [ip]
 800aad4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aad8:	fb09 770b 	mla	r7, r9, fp, r7
 800aadc:	4457      	add	r7, sl
 800aade:	b29b      	uxth	r3, r3
 800aae0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aae4:	f84e 3b04 	str.w	r3, [lr], #4
 800aae8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aaec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aaf0:	f8be 3000 	ldrh.w	r3, [lr]
 800aaf4:	fb09 330a 	mla	r3, r9, sl, r3
 800aaf8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aafc:	4562      	cmp	r2, ip
 800aafe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab02:	d8e5      	bhi.n	800aad0 <__multiply+0x10c>
 800ab04:	9f01      	ldr	r7, [sp, #4]
 800ab06:	51eb      	str	r3, [r5, r7]
 800ab08:	3504      	adds	r5, #4
 800ab0a:	e799      	b.n	800aa40 <__multiply+0x7c>
 800ab0c:	3e01      	subs	r6, #1
 800ab0e:	e79b      	b.n	800aa48 <__multiply+0x84>
 800ab10:	0800b780 	.word	0x0800b780
 800ab14:	0800b791 	.word	0x0800b791

0800ab18 <__pow5mult>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	4615      	mov	r5, r2
 800ab1e:	f012 0203 	ands.w	r2, r2, #3
 800ab22:	4607      	mov	r7, r0
 800ab24:	460e      	mov	r6, r1
 800ab26:	d007      	beq.n	800ab38 <__pow5mult+0x20>
 800ab28:	4c25      	ldr	r4, [pc, #148]	@ (800abc0 <__pow5mult+0xa8>)
 800ab2a:	3a01      	subs	r2, #1
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab32:	f7ff fe9f 	bl	800a874 <__multadd>
 800ab36:	4606      	mov	r6, r0
 800ab38:	10ad      	asrs	r5, r5, #2
 800ab3a:	d03d      	beq.n	800abb8 <__pow5mult+0xa0>
 800ab3c:	69fc      	ldr	r4, [r7, #28]
 800ab3e:	b97c      	cbnz	r4, 800ab60 <__pow5mult+0x48>
 800ab40:	2010      	movs	r0, #16
 800ab42:	f7ff fd7f 	bl	800a644 <malloc>
 800ab46:	4602      	mov	r2, r0
 800ab48:	61f8      	str	r0, [r7, #28]
 800ab4a:	b928      	cbnz	r0, 800ab58 <__pow5mult+0x40>
 800ab4c:	4b1d      	ldr	r3, [pc, #116]	@ (800abc4 <__pow5mult+0xac>)
 800ab4e:	481e      	ldr	r0, [pc, #120]	@ (800abc8 <__pow5mult+0xb0>)
 800ab50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ab54:	f000 fa6a 	bl	800b02c <__assert_func>
 800ab58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab5c:	6004      	str	r4, [r0, #0]
 800ab5e:	60c4      	str	r4, [r0, #12]
 800ab60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab68:	b94c      	cbnz	r4, 800ab7e <__pow5mult+0x66>
 800ab6a:	f240 2171 	movw	r1, #625	@ 0x271
 800ab6e:	4638      	mov	r0, r7
 800ab70:	f7ff ff12 	bl	800a998 <__i2b>
 800ab74:	2300      	movs	r3, #0
 800ab76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	f04f 0900 	mov.w	r9, #0
 800ab82:	07eb      	lsls	r3, r5, #31
 800ab84:	d50a      	bpl.n	800ab9c <__pow5mult+0x84>
 800ab86:	4631      	mov	r1, r6
 800ab88:	4622      	mov	r2, r4
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	f7ff ff1a 	bl	800a9c4 <__multiply>
 800ab90:	4631      	mov	r1, r6
 800ab92:	4680      	mov	r8, r0
 800ab94:	4638      	mov	r0, r7
 800ab96:	f7ff fe4b 	bl	800a830 <_Bfree>
 800ab9a:	4646      	mov	r6, r8
 800ab9c:	106d      	asrs	r5, r5, #1
 800ab9e:	d00b      	beq.n	800abb8 <__pow5mult+0xa0>
 800aba0:	6820      	ldr	r0, [r4, #0]
 800aba2:	b938      	cbnz	r0, 800abb4 <__pow5mult+0x9c>
 800aba4:	4622      	mov	r2, r4
 800aba6:	4621      	mov	r1, r4
 800aba8:	4638      	mov	r0, r7
 800abaa:	f7ff ff0b 	bl	800a9c4 <__multiply>
 800abae:	6020      	str	r0, [r4, #0]
 800abb0:	f8c0 9000 	str.w	r9, [r0]
 800abb4:	4604      	mov	r4, r0
 800abb6:	e7e4      	b.n	800ab82 <__pow5mult+0x6a>
 800abb8:	4630      	mov	r0, r6
 800abba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abbe:	bf00      	nop
 800abc0:	0800b7ec 	.word	0x0800b7ec
 800abc4:	0800b711 	.word	0x0800b711
 800abc8:	0800b791 	.word	0x0800b791

0800abcc <__lshift>:
 800abcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd0:	460c      	mov	r4, r1
 800abd2:	6849      	ldr	r1, [r1, #4]
 800abd4:	6923      	ldr	r3, [r4, #16]
 800abd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	4607      	mov	r7, r0
 800abde:	4691      	mov	r9, r2
 800abe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abe4:	f108 0601 	add.w	r6, r8, #1
 800abe8:	42b3      	cmp	r3, r6
 800abea:	db0b      	blt.n	800ac04 <__lshift+0x38>
 800abec:	4638      	mov	r0, r7
 800abee:	f7ff fddf 	bl	800a7b0 <_Balloc>
 800abf2:	4605      	mov	r5, r0
 800abf4:	b948      	cbnz	r0, 800ac0a <__lshift+0x3e>
 800abf6:	4602      	mov	r2, r0
 800abf8:	4b28      	ldr	r3, [pc, #160]	@ (800ac9c <__lshift+0xd0>)
 800abfa:	4829      	ldr	r0, [pc, #164]	@ (800aca0 <__lshift+0xd4>)
 800abfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ac00:	f000 fa14 	bl	800b02c <__assert_func>
 800ac04:	3101      	adds	r1, #1
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	e7ee      	b.n	800abe8 <__lshift+0x1c>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f100 0114 	add.w	r1, r0, #20
 800ac10:	f100 0210 	add.w	r2, r0, #16
 800ac14:	4618      	mov	r0, r3
 800ac16:	4553      	cmp	r3, sl
 800ac18:	db33      	blt.n	800ac82 <__lshift+0xb6>
 800ac1a:	6920      	ldr	r0, [r4, #16]
 800ac1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac20:	f104 0314 	add.w	r3, r4, #20
 800ac24:	f019 091f 	ands.w	r9, r9, #31
 800ac28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac30:	d02b      	beq.n	800ac8a <__lshift+0xbe>
 800ac32:	f1c9 0e20 	rsb	lr, r9, #32
 800ac36:	468a      	mov	sl, r1
 800ac38:	2200      	movs	r2, #0
 800ac3a:	6818      	ldr	r0, [r3, #0]
 800ac3c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac40:	4310      	orrs	r0, r2
 800ac42:	f84a 0b04 	str.w	r0, [sl], #4
 800ac46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac4a:	459c      	cmp	ip, r3
 800ac4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac50:	d8f3      	bhi.n	800ac3a <__lshift+0x6e>
 800ac52:	ebac 0304 	sub.w	r3, ip, r4
 800ac56:	3b15      	subs	r3, #21
 800ac58:	f023 0303 	bic.w	r3, r3, #3
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	f104 0015 	add.w	r0, r4, #21
 800ac62:	4584      	cmp	ip, r0
 800ac64:	bf38      	it	cc
 800ac66:	2304      	movcc	r3, #4
 800ac68:	50ca      	str	r2, [r1, r3]
 800ac6a:	b10a      	cbz	r2, 800ac70 <__lshift+0xa4>
 800ac6c:	f108 0602 	add.w	r6, r8, #2
 800ac70:	3e01      	subs	r6, #1
 800ac72:	4638      	mov	r0, r7
 800ac74:	612e      	str	r6, [r5, #16]
 800ac76:	4621      	mov	r1, r4
 800ac78:	f7ff fdda 	bl	800a830 <_Bfree>
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac82:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac86:	3301      	adds	r3, #1
 800ac88:	e7c5      	b.n	800ac16 <__lshift+0x4a>
 800ac8a:	3904      	subs	r1, #4
 800ac8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac90:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac94:	459c      	cmp	ip, r3
 800ac96:	d8f9      	bhi.n	800ac8c <__lshift+0xc0>
 800ac98:	e7ea      	b.n	800ac70 <__lshift+0xa4>
 800ac9a:	bf00      	nop
 800ac9c:	0800b780 	.word	0x0800b780
 800aca0:	0800b791 	.word	0x0800b791

0800aca4 <__mcmp>:
 800aca4:	690a      	ldr	r2, [r1, #16]
 800aca6:	4603      	mov	r3, r0
 800aca8:	6900      	ldr	r0, [r0, #16]
 800acaa:	1a80      	subs	r0, r0, r2
 800acac:	b530      	push	{r4, r5, lr}
 800acae:	d10e      	bne.n	800acce <__mcmp+0x2a>
 800acb0:	3314      	adds	r3, #20
 800acb2:	3114      	adds	r1, #20
 800acb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800acb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800acbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800acc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800acc4:	4295      	cmp	r5, r2
 800acc6:	d003      	beq.n	800acd0 <__mcmp+0x2c>
 800acc8:	d205      	bcs.n	800acd6 <__mcmp+0x32>
 800acca:	f04f 30ff 	mov.w	r0, #4294967295
 800acce:	bd30      	pop	{r4, r5, pc}
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	d3f3      	bcc.n	800acbc <__mcmp+0x18>
 800acd4:	e7fb      	b.n	800acce <__mcmp+0x2a>
 800acd6:	2001      	movs	r0, #1
 800acd8:	e7f9      	b.n	800acce <__mcmp+0x2a>
	...

0800acdc <__mdiff>:
 800acdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	4689      	mov	r9, r1
 800ace2:	4606      	mov	r6, r0
 800ace4:	4611      	mov	r1, r2
 800ace6:	4648      	mov	r0, r9
 800ace8:	4614      	mov	r4, r2
 800acea:	f7ff ffdb 	bl	800aca4 <__mcmp>
 800acee:	1e05      	subs	r5, r0, #0
 800acf0:	d112      	bne.n	800ad18 <__mdiff+0x3c>
 800acf2:	4629      	mov	r1, r5
 800acf4:	4630      	mov	r0, r6
 800acf6:	f7ff fd5b 	bl	800a7b0 <_Balloc>
 800acfa:	4602      	mov	r2, r0
 800acfc:	b928      	cbnz	r0, 800ad0a <__mdiff+0x2e>
 800acfe:	4b3f      	ldr	r3, [pc, #252]	@ (800adfc <__mdiff+0x120>)
 800ad00:	f240 2137 	movw	r1, #567	@ 0x237
 800ad04:	483e      	ldr	r0, [pc, #248]	@ (800ae00 <__mdiff+0x124>)
 800ad06:	f000 f991 	bl	800b02c <__assert_func>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad10:	4610      	mov	r0, r2
 800ad12:	b003      	add	sp, #12
 800ad14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad18:	bfbc      	itt	lt
 800ad1a:	464b      	movlt	r3, r9
 800ad1c:	46a1      	movlt	r9, r4
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ad24:	bfba      	itte	lt
 800ad26:	461c      	movlt	r4, r3
 800ad28:	2501      	movlt	r5, #1
 800ad2a:	2500      	movge	r5, #0
 800ad2c:	f7ff fd40 	bl	800a7b0 <_Balloc>
 800ad30:	4602      	mov	r2, r0
 800ad32:	b918      	cbnz	r0, 800ad3c <__mdiff+0x60>
 800ad34:	4b31      	ldr	r3, [pc, #196]	@ (800adfc <__mdiff+0x120>)
 800ad36:	f240 2145 	movw	r1, #581	@ 0x245
 800ad3a:	e7e3      	b.n	800ad04 <__mdiff+0x28>
 800ad3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ad40:	6926      	ldr	r6, [r4, #16]
 800ad42:	60c5      	str	r5, [r0, #12]
 800ad44:	f109 0310 	add.w	r3, r9, #16
 800ad48:	f109 0514 	add.w	r5, r9, #20
 800ad4c:	f104 0e14 	add.w	lr, r4, #20
 800ad50:	f100 0b14 	add.w	fp, r0, #20
 800ad54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	46d9      	mov	r9, fp
 800ad60:	f04f 0c00 	mov.w	ip, #0
 800ad64:	9b01      	ldr	r3, [sp, #4]
 800ad66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	fa1f f38a 	uxth.w	r3, sl
 800ad74:	4619      	mov	r1, r3
 800ad76:	b283      	uxth	r3, r0
 800ad78:	1acb      	subs	r3, r1, r3
 800ad7a:	0c00      	lsrs	r0, r0, #16
 800ad7c:	4463      	add	r3, ip
 800ad7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad8c:	4576      	cmp	r6, lr
 800ad8e:	f849 3b04 	str.w	r3, [r9], #4
 800ad92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad96:	d8e5      	bhi.n	800ad64 <__mdiff+0x88>
 800ad98:	1b33      	subs	r3, r6, r4
 800ad9a:	3b15      	subs	r3, #21
 800ad9c:	f023 0303 	bic.w	r3, r3, #3
 800ada0:	3415      	adds	r4, #21
 800ada2:	3304      	adds	r3, #4
 800ada4:	42a6      	cmp	r6, r4
 800ada6:	bf38      	it	cc
 800ada8:	2304      	movcc	r3, #4
 800adaa:	441d      	add	r5, r3
 800adac:	445b      	add	r3, fp
 800adae:	461e      	mov	r6, r3
 800adb0:	462c      	mov	r4, r5
 800adb2:	4544      	cmp	r4, r8
 800adb4:	d30e      	bcc.n	800add4 <__mdiff+0xf8>
 800adb6:	f108 0103 	add.w	r1, r8, #3
 800adba:	1b49      	subs	r1, r1, r5
 800adbc:	f021 0103 	bic.w	r1, r1, #3
 800adc0:	3d03      	subs	r5, #3
 800adc2:	45a8      	cmp	r8, r5
 800adc4:	bf38      	it	cc
 800adc6:	2100      	movcc	r1, #0
 800adc8:	440b      	add	r3, r1
 800adca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adce:	b191      	cbz	r1, 800adf6 <__mdiff+0x11a>
 800add0:	6117      	str	r7, [r2, #16]
 800add2:	e79d      	b.n	800ad10 <__mdiff+0x34>
 800add4:	f854 1b04 	ldr.w	r1, [r4], #4
 800add8:	46e6      	mov	lr, ip
 800adda:	0c08      	lsrs	r0, r1, #16
 800addc:	fa1c fc81 	uxtah	ip, ip, r1
 800ade0:	4471      	add	r1, lr
 800ade2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ade6:	b289      	uxth	r1, r1
 800ade8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800adec:	f846 1b04 	str.w	r1, [r6], #4
 800adf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800adf4:	e7dd      	b.n	800adb2 <__mdiff+0xd6>
 800adf6:	3f01      	subs	r7, #1
 800adf8:	e7e7      	b.n	800adca <__mdiff+0xee>
 800adfa:	bf00      	nop
 800adfc:	0800b780 	.word	0x0800b780
 800ae00:	0800b791 	.word	0x0800b791

0800ae04 <__d2b>:
 800ae04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae08:	460f      	mov	r7, r1
 800ae0a:	2101      	movs	r1, #1
 800ae0c:	ec59 8b10 	vmov	r8, r9, d0
 800ae10:	4616      	mov	r6, r2
 800ae12:	f7ff fccd 	bl	800a7b0 <_Balloc>
 800ae16:	4604      	mov	r4, r0
 800ae18:	b930      	cbnz	r0, 800ae28 <__d2b+0x24>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	4b23      	ldr	r3, [pc, #140]	@ (800aeac <__d2b+0xa8>)
 800ae1e:	4824      	ldr	r0, [pc, #144]	@ (800aeb0 <__d2b+0xac>)
 800ae20:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae24:	f000 f902 	bl	800b02c <__assert_func>
 800ae28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae30:	b10d      	cbz	r5, 800ae36 <__d2b+0x32>
 800ae32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	f1b8 0300 	subs.w	r3, r8, #0
 800ae3c:	d023      	beq.n	800ae86 <__d2b+0x82>
 800ae3e:	4668      	mov	r0, sp
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	f7ff fd7c 	bl	800a93e <__lo0bits>
 800ae46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae4a:	b1d0      	cbz	r0, 800ae82 <__d2b+0x7e>
 800ae4c:	f1c0 0320 	rsb	r3, r0, #32
 800ae50:	fa02 f303 	lsl.w	r3, r2, r3
 800ae54:	430b      	orrs	r3, r1
 800ae56:	40c2      	lsrs	r2, r0
 800ae58:	6163      	str	r3, [r4, #20]
 800ae5a:	9201      	str	r2, [sp, #4]
 800ae5c:	9b01      	ldr	r3, [sp, #4]
 800ae5e:	61a3      	str	r3, [r4, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	bf0c      	ite	eq
 800ae64:	2201      	moveq	r2, #1
 800ae66:	2202      	movne	r2, #2
 800ae68:	6122      	str	r2, [r4, #16]
 800ae6a:	b1a5      	cbz	r5, 800ae96 <__d2b+0x92>
 800ae6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae70:	4405      	add	r5, r0
 800ae72:	603d      	str	r5, [r7, #0]
 800ae74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae78:	6030      	str	r0, [r6, #0]
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	b003      	add	sp, #12
 800ae7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae82:	6161      	str	r1, [r4, #20]
 800ae84:	e7ea      	b.n	800ae5c <__d2b+0x58>
 800ae86:	a801      	add	r0, sp, #4
 800ae88:	f7ff fd59 	bl	800a93e <__lo0bits>
 800ae8c:	9b01      	ldr	r3, [sp, #4]
 800ae8e:	6163      	str	r3, [r4, #20]
 800ae90:	3020      	adds	r0, #32
 800ae92:	2201      	movs	r2, #1
 800ae94:	e7e8      	b.n	800ae68 <__d2b+0x64>
 800ae96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae9e:	6038      	str	r0, [r7, #0]
 800aea0:	6918      	ldr	r0, [r3, #16]
 800aea2:	f7ff fd2d 	bl	800a900 <__hi0bits>
 800aea6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aeaa:	e7e5      	b.n	800ae78 <__d2b+0x74>
 800aeac:	0800b780 	.word	0x0800b780
 800aeb0:	0800b791 	.word	0x0800b791

0800aeb4 <__sflush_r>:
 800aeb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aebc:	0716      	lsls	r6, r2, #28
 800aebe:	4605      	mov	r5, r0
 800aec0:	460c      	mov	r4, r1
 800aec2:	d454      	bmi.n	800af6e <__sflush_r+0xba>
 800aec4:	684b      	ldr	r3, [r1, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	dc02      	bgt.n	800aed0 <__sflush_r+0x1c>
 800aeca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dd48      	ble.n	800af62 <__sflush_r+0xae>
 800aed0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aed2:	2e00      	cmp	r6, #0
 800aed4:	d045      	beq.n	800af62 <__sflush_r+0xae>
 800aed6:	2300      	movs	r3, #0
 800aed8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aedc:	682f      	ldr	r7, [r5, #0]
 800aede:	6a21      	ldr	r1, [r4, #32]
 800aee0:	602b      	str	r3, [r5, #0]
 800aee2:	d030      	beq.n	800af46 <__sflush_r+0x92>
 800aee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	0759      	lsls	r1, r3, #29
 800aeea:	d505      	bpl.n	800aef8 <__sflush_r+0x44>
 800aeec:	6863      	ldr	r3, [r4, #4]
 800aeee:	1ad2      	subs	r2, r2, r3
 800aef0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aef2:	b10b      	cbz	r3, 800aef8 <__sflush_r+0x44>
 800aef4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aef6:	1ad2      	subs	r2, r2, r3
 800aef8:	2300      	movs	r3, #0
 800aefa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aefc:	6a21      	ldr	r1, [r4, #32]
 800aefe:	4628      	mov	r0, r5
 800af00:	47b0      	blx	r6
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	d106      	bne.n	800af16 <__sflush_r+0x62>
 800af08:	6829      	ldr	r1, [r5, #0]
 800af0a:	291d      	cmp	r1, #29
 800af0c:	d82b      	bhi.n	800af66 <__sflush_r+0xb2>
 800af0e:	4a2a      	ldr	r2, [pc, #168]	@ (800afb8 <__sflush_r+0x104>)
 800af10:	410a      	asrs	r2, r1
 800af12:	07d6      	lsls	r6, r2, #31
 800af14:	d427      	bmi.n	800af66 <__sflush_r+0xb2>
 800af16:	2200      	movs	r2, #0
 800af18:	6062      	str	r2, [r4, #4]
 800af1a:	04d9      	lsls	r1, r3, #19
 800af1c:	6922      	ldr	r2, [r4, #16]
 800af1e:	6022      	str	r2, [r4, #0]
 800af20:	d504      	bpl.n	800af2c <__sflush_r+0x78>
 800af22:	1c42      	adds	r2, r0, #1
 800af24:	d101      	bne.n	800af2a <__sflush_r+0x76>
 800af26:	682b      	ldr	r3, [r5, #0]
 800af28:	b903      	cbnz	r3, 800af2c <__sflush_r+0x78>
 800af2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800af2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af2e:	602f      	str	r7, [r5, #0]
 800af30:	b1b9      	cbz	r1, 800af62 <__sflush_r+0xae>
 800af32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af36:	4299      	cmp	r1, r3
 800af38:	d002      	beq.n	800af40 <__sflush_r+0x8c>
 800af3a:	4628      	mov	r0, r5
 800af3c:	f7ff fb38 	bl	800a5b0 <_free_r>
 800af40:	2300      	movs	r3, #0
 800af42:	6363      	str	r3, [r4, #52]	@ 0x34
 800af44:	e00d      	b.n	800af62 <__sflush_r+0xae>
 800af46:	2301      	movs	r3, #1
 800af48:	4628      	mov	r0, r5
 800af4a:	47b0      	blx	r6
 800af4c:	4602      	mov	r2, r0
 800af4e:	1c50      	adds	r0, r2, #1
 800af50:	d1c9      	bne.n	800aee6 <__sflush_r+0x32>
 800af52:	682b      	ldr	r3, [r5, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0c6      	beq.n	800aee6 <__sflush_r+0x32>
 800af58:	2b1d      	cmp	r3, #29
 800af5a:	d001      	beq.n	800af60 <__sflush_r+0xac>
 800af5c:	2b16      	cmp	r3, #22
 800af5e:	d11e      	bne.n	800af9e <__sflush_r+0xea>
 800af60:	602f      	str	r7, [r5, #0]
 800af62:	2000      	movs	r0, #0
 800af64:	e022      	b.n	800afac <__sflush_r+0xf8>
 800af66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af6a:	b21b      	sxth	r3, r3
 800af6c:	e01b      	b.n	800afa6 <__sflush_r+0xf2>
 800af6e:	690f      	ldr	r7, [r1, #16]
 800af70:	2f00      	cmp	r7, #0
 800af72:	d0f6      	beq.n	800af62 <__sflush_r+0xae>
 800af74:	0793      	lsls	r3, r2, #30
 800af76:	680e      	ldr	r6, [r1, #0]
 800af78:	bf08      	it	eq
 800af7a:	694b      	ldreq	r3, [r1, #20]
 800af7c:	600f      	str	r7, [r1, #0]
 800af7e:	bf18      	it	ne
 800af80:	2300      	movne	r3, #0
 800af82:	eba6 0807 	sub.w	r8, r6, r7
 800af86:	608b      	str	r3, [r1, #8]
 800af88:	f1b8 0f00 	cmp.w	r8, #0
 800af8c:	dde9      	ble.n	800af62 <__sflush_r+0xae>
 800af8e:	6a21      	ldr	r1, [r4, #32]
 800af90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af92:	4643      	mov	r3, r8
 800af94:	463a      	mov	r2, r7
 800af96:	4628      	mov	r0, r5
 800af98:	47b0      	blx	r6
 800af9a:	2800      	cmp	r0, #0
 800af9c:	dc08      	bgt.n	800afb0 <__sflush_r+0xfc>
 800af9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa6:	81a3      	strh	r3, [r4, #12]
 800afa8:	f04f 30ff 	mov.w	r0, #4294967295
 800afac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb0:	4407      	add	r7, r0
 800afb2:	eba8 0800 	sub.w	r8, r8, r0
 800afb6:	e7e7      	b.n	800af88 <__sflush_r+0xd4>
 800afb8:	dfbffffe 	.word	0xdfbffffe

0800afbc <_fflush_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	690b      	ldr	r3, [r1, #16]
 800afc0:	4605      	mov	r5, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	b913      	cbnz	r3, 800afcc <_fflush_r+0x10>
 800afc6:	2500      	movs	r5, #0
 800afc8:	4628      	mov	r0, r5
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	b118      	cbz	r0, 800afd6 <_fflush_r+0x1a>
 800afce:	6a03      	ldr	r3, [r0, #32]
 800afd0:	b90b      	cbnz	r3, 800afd6 <_fflush_r+0x1a>
 800afd2:	f7fe fb99 	bl	8009708 <__sinit>
 800afd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0f3      	beq.n	800afc6 <_fflush_r+0xa>
 800afde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800afe0:	07d0      	lsls	r0, r2, #31
 800afe2:	d404      	bmi.n	800afee <_fflush_r+0x32>
 800afe4:	0599      	lsls	r1, r3, #22
 800afe6:	d402      	bmi.n	800afee <_fflush_r+0x32>
 800afe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afea:	f7fe fc84 	bl	80098f6 <__retarget_lock_acquire_recursive>
 800afee:	4628      	mov	r0, r5
 800aff0:	4621      	mov	r1, r4
 800aff2:	f7ff ff5f 	bl	800aeb4 <__sflush_r>
 800aff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aff8:	07da      	lsls	r2, r3, #31
 800affa:	4605      	mov	r5, r0
 800affc:	d4e4      	bmi.n	800afc8 <_fflush_r+0xc>
 800affe:	89a3      	ldrh	r3, [r4, #12]
 800b000:	059b      	lsls	r3, r3, #22
 800b002:	d4e1      	bmi.n	800afc8 <_fflush_r+0xc>
 800b004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b006:	f7fe fc77 	bl	80098f8 <__retarget_lock_release_recursive>
 800b00a:	e7dd      	b.n	800afc8 <_fflush_r+0xc>

0800b00c <_sbrk_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d06      	ldr	r5, [pc, #24]	@ (800b028 <_sbrk_r+0x1c>)
 800b010:	2300      	movs	r3, #0
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	602b      	str	r3, [r5, #0]
 800b018:	f7f6 f902 	bl	8001220 <_sbrk>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d102      	bne.n	800b026 <_sbrk_r+0x1a>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	b103      	cbz	r3, 800b026 <_sbrk_r+0x1a>
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	2001a060 	.word	0x2001a060

0800b02c <__assert_func>:
 800b02c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b02e:	4614      	mov	r4, r2
 800b030:	461a      	mov	r2, r3
 800b032:	4b09      	ldr	r3, [pc, #36]	@ (800b058 <__assert_func+0x2c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4605      	mov	r5, r0
 800b038:	68d8      	ldr	r0, [r3, #12]
 800b03a:	b954      	cbnz	r4, 800b052 <__assert_func+0x26>
 800b03c:	4b07      	ldr	r3, [pc, #28]	@ (800b05c <__assert_func+0x30>)
 800b03e:	461c      	mov	r4, r3
 800b040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b044:	9100      	str	r1, [sp, #0]
 800b046:	462b      	mov	r3, r5
 800b048:	4905      	ldr	r1, [pc, #20]	@ (800b060 <__assert_func+0x34>)
 800b04a:	f000 f841 	bl	800b0d0 <fiprintf>
 800b04e:	f000 f851 	bl	800b0f4 <abort>
 800b052:	4b04      	ldr	r3, [pc, #16]	@ (800b064 <__assert_func+0x38>)
 800b054:	e7f4      	b.n	800b040 <__assert_func+0x14>
 800b056:	bf00      	nop
 800b058:	20000108 	.word	0x20000108
 800b05c:	0800b92d 	.word	0x0800b92d
 800b060:	0800b8ff 	.word	0x0800b8ff
 800b064:	0800b8f2 	.word	0x0800b8f2

0800b068 <_calloc_r>:
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	fba1 5402 	umull	r5, r4, r1, r2
 800b06e:	b93c      	cbnz	r4, 800b080 <_calloc_r+0x18>
 800b070:	4629      	mov	r1, r5
 800b072:	f7ff fb11 	bl	800a698 <_malloc_r>
 800b076:	4606      	mov	r6, r0
 800b078:	b928      	cbnz	r0, 800b086 <_calloc_r+0x1e>
 800b07a:	2600      	movs	r6, #0
 800b07c:	4630      	mov	r0, r6
 800b07e:	bd70      	pop	{r4, r5, r6, pc}
 800b080:	220c      	movs	r2, #12
 800b082:	6002      	str	r2, [r0, #0]
 800b084:	e7f9      	b.n	800b07a <_calloc_r+0x12>
 800b086:	462a      	mov	r2, r5
 800b088:	4621      	mov	r1, r4
 800b08a:	f7fe fbb6 	bl	80097fa <memset>
 800b08e:	e7f5      	b.n	800b07c <_calloc_r+0x14>

0800b090 <__ascii_mbtowc>:
 800b090:	b082      	sub	sp, #8
 800b092:	b901      	cbnz	r1, 800b096 <__ascii_mbtowc+0x6>
 800b094:	a901      	add	r1, sp, #4
 800b096:	b142      	cbz	r2, 800b0aa <__ascii_mbtowc+0x1a>
 800b098:	b14b      	cbz	r3, 800b0ae <__ascii_mbtowc+0x1e>
 800b09a:	7813      	ldrb	r3, [r2, #0]
 800b09c:	600b      	str	r3, [r1, #0]
 800b09e:	7812      	ldrb	r2, [r2, #0]
 800b0a0:	1e10      	subs	r0, r2, #0
 800b0a2:	bf18      	it	ne
 800b0a4:	2001      	movne	r0, #1
 800b0a6:	b002      	add	sp, #8
 800b0a8:	4770      	bx	lr
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	e7fb      	b.n	800b0a6 <__ascii_mbtowc+0x16>
 800b0ae:	f06f 0001 	mvn.w	r0, #1
 800b0b2:	e7f8      	b.n	800b0a6 <__ascii_mbtowc+0x16>

0800b0b4 <__ascii_wctomb>:
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	4608      	mov	r0, r1
 800b0b8:	b141      	cbz	r1, 800b0cc <__ascii_wctomb+0x18>
 800b0ba:	2aff      	cmp	r2, #255	@ 0xff
 800b0bc:	d904      	bls.n	800b0c8 <__ascii_wctomb+0x14>
 800b0be:	228a      	movs	r2, #138	@ 0x8a
 800b0c0:	601a      	str	r2, [r3, #0]
 800b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c6:	4770      	bx	lr
 800b0c8:	700a      	strb	r2, [r1, #0]
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	4770      	bx	lr
	...

0800b0d0 <fiprintf>:
 800b0d0:	b40e      	push	{r1, r2, r3}
 800b0d2:	b503      	push	{r0, r1, lr}
 800b0d4:	4601      	mov	r1, r0
 800b0d6:	ab03      	add	r3, sp, #12
 800b0d8:	4805      	ldr	r0, [pc, #20]	@ (800b0f0 <fiprintf+0x20>)
 800b0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0de:	6800      	ldr	r0, [r0, #0]
 800b0e0:	9301      	str	r3, [sp, #4]
 800b0e2:	f000 f837 	bl	800b154 <_vfiprintf_r>
 800b0e6:	b002      	add	sp, #8
 800b0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0ec:	b003      	add	sp, #12
 800b0ee:	4770      	bx	lr
 800b0f0:	20000108 	.word	0x20000108

0800b0f4 <abort>:
 800b0f4:	b508      	push	{r3, lr}
 800b0f6:	2006      	movs	r0, #6
 800b0f8:	f000 fa00 	bl	800b4fc <raise>
 800b0fc:	2001      	movs	r0, #1
 800b0fe:	f7f6 f817 	bl	8001130 <_exit>

0800b102 <__sfputc_r>:
 800b102:	6893      	ldr	r3, [r2, #8]
 800b104:	3b01      	subs	r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	b410      	push	{r4}
 800b10a:	6093      	str	r3, [r2, #8]
 800b10c:	da08      	bge.n	800b120 <__sfputc_r+0x1e>
 800b10e:	6994      	ldr	r4, [r2, #24]
 800b110:	42a3      	cmp	r3, r4
 800b112:	db01      	blt.n	800b118 <__sfputc_r+0x16>
 800b114:	290a      	cmp	r1, #10
 800b116:	d103      	bne.n	800b120 <__sfputc_r+0x1e>
 800b118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b11c:	f000 b932 	b.w	800b384 <__swbuf_r>
 800b120:	6813      	ldr	r3, [r2, #0]
 800b122:	1c58      	adds	r0, r3, #1
 800b124:	6010      	str	r0, [r2, #0]
 800b126:	7019      	strb	r1, [r3, #0]
 800b128:	4608      	mov	r0, r1
 800b12a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <__sfputs_r>:
 800b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b132:	4606      	mov	r6, r0
 800b134:	460f      	mov	r7, r1
 800b136:	4614      	mov	r4, r2
 800b138:	18d5      	adds	r5, r2, r3
 800b13a:	42ac      	cmp	r4, r5
 800b13c:	d101      	bne.n	800b142 <__sfputs_r+0x12>
 800b13e:	2000      	movs	r0, #0
 800b140:	e007      	b.n	800b152 <__sfputs_r+0x22>
 800b142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b146:	463a      	mov	r2, r7
 800b148:	4630      	mov	r0, r6
 800b14a:	f7ff ffda 	bl	800b102 <__sfputc_r>
 800b14e:	1c43      	adds	r3, r0, #1
 800b150:	d1f3      	bne.n	800b13a <__sfputs_r+0xa>
 800b152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b154 <_vfiprintf_r>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	460d      	mov	r5, r1
 800b15a:	b09d      	sub	sp, #116	@ 0x74
 800b15c:	4614      	mov	r4, r2
 800b15e:	4698      	mov	r8, r3
 800b160:	4606      	mov	r6, r0
 800b162:	b118      	cbz	r0, 800b16c <_vfiprintf_r+0x18>
 800b164:	6a03      	ldr	r3, [r0, #32]
 800b166:	b90b      	cbnz	r3, 800b16c <_vfiprintf_r+0x18>
 800b168:	f7fe face 	bl	8009708 <__sinit>
 800b16c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b16e:	07d9      	lsls	r1, r3, #31
 800b170:	d405      	bmi.n	800b17e <_vfiprintf_r+0x2a>
 800b172:	89ab      	ldrh	r3, [r5, #12]
 800b174:	059a      	lsls	r2, r3, #22
 800b176:	d402      	bmi.n	800b17e <_vfiprintf_r+0x2a>
 800b178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b17a:	f7fe fbbc 	bl	80098f6 <__retarget_lock_acquire_recursive>
 800b17e:	89ab      	ldrh	r3, [r5, #12]
 800b180:	071b      	lsls	r3, r3, #28
 800b182:	d501      	bpl.n	800b188 <_vfiprintf_r+0x34>
 800b184:	692b      	ldr	r3, [r5, #16]
 800b186:	b99b      	cbnz	r3, 800b1b0 <_vfiprintf_r+0x5c>
 800b188:	4629      	mov	r1, r5
 800b18a:	4630      	mov	r0, r6
 800b18c:	f000 f938 	bl	800b400 <__swsetup_r>
 800b190:	b170      	cbz	r0, 800b1b0 <_vfiprintf_r+0x5c>
 800b192:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b194:	07dc      	lsls	r4, r3, #31
 800b196:	d504      	bpl.n	800b1a2 <_vfiprintf_r+0x4e>
 800b198:	f04f 30ff 	mov.w	r0, #4294967295
 800b19c:	b01d      	add	sp, #116	@ 0x74
 800b19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	0598      	lsls	r0, r3, #22
 800b1a6:	d4f7      	bmi.n	800b198 <_vfiprintf_r+0x44>
 800b1a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1aa:	f7fe fba5 	bl	80098f8 <__retarget_lock_release_recursive>
 800b1ae:	e7f3      	b.n	800b198 <_vfiprintf_r+0x44>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1b4:	2320      	movs	r3, #32
 800b1b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1be:	2330      	movs	r3, #48	@ 0x30
 800b1c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b370 <_vfiprintf_r+0x21c>
 800b1c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1c8:	f04f 0901 	mov.w	r9, #1
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	469a      	mov	sl, r3
 800b1d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1d4:	b10a      	cbz	r2, 800b1da <_vfiprintf_r+0x86>
 800b1d6:	2a25      	cmp	r2, #37	@ 0x25
 800b1d8:	d1f9      	bne.n	800b1ce <_vfiprintf_r+0x7a>
 800b1da:	ebba 0b04 	subs.w	fp, sl, r4
 800b1de:	d00b      	beq.n	800b1f8 <_vfiprintf_r+0xa4>
 800b1e0:	465b      	mov	r3, fp
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f7ff ffa2 	bl	800b130 <__sfputs_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	f000 80a7 	beq.w	800b340 <_vfiprintf_r+0x1ec>
 800b1f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1f4:	445a      	add	r2, fp
 800b1f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 809f 	beq.w	800b340 <_vfiprintf_r+0x1ec>
 800b202:	2300      	movs	r3, #0
 800b204:	f04f 32ff 	mov.w	r2, #4294967295
 800b208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b20c:	f10a 0a01 	add.w	sl, sl, #1
 800b210:	9304      	str	r3, [sp, #16]
 800b212:	9307      	str	r3, [sp, #28]
 800b214:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b218:	931a      	str	r3, [sp, #104]	@ 0x68
 800b21a:	4654      	mov	r4, sl
 800b21c:	2205      	movs	r2, #5
 800b21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b222:	4853      	ldr	r0, [pc, #332]	@ (800b370 <_vfiprintf_r+0x21c>)
 800b224:	f7f4 ffdc 	bl	80001e0 <memchr>
 800b228:	9a04      	ldr	r2, [sp, #16]
 800b22a:	b9d8      	cbnz	r0, 800b264 <_vfiprintf_r+0x110>
 800b22c:	06d1      	lsls	r1, r2, #27
 800b22e:	bf44      	itt	mi
 800b230:	2320      	movmi	r3, #32
 800b232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b236:	0713      	lsls	r3, r2, #28
 800b238:	bf44      	itt	mi
 800b23a:	232b      	movmi	r3, #43	@ 0x2b
 800b23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b240:	f89a 3000 	ldrb.w	r3, [sl]
 800b244:	2b2a      	cmp	r3, #42	@ 0x2a
 800b246:	d015      	beq.n	800b274 <_vfiprintf_r+0x120>
 800b248:	9a07      	ldr	r2, [sp, #28]
 800b24a:	4654      	mov	r4, sl
 800b24c:	2000      	movs	r0, #0
 800b24e:	f04f 0c0a 	mov.w	ip, #10
 800b252:	4621      	mov	r1, r4
 800b254:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b258:	3b30      	subs	r3, #48	@ 0x30
 800b25a:	2b09      	cmp	r3, #9
 800b25c:	d94b      	bls.n	800b2f6 <_vfiprintf_r+0x1a2>
 800b25e:	b1b0      	cbz	r0, 800b28e <_vfiprintf_r+0x13a>
 800b260:	9207      	str	r2, [sp, #28]
 800b262:	e014      	b.n	800b28e <_vfiprintf_r+0x13a>
 800b264:	eba0 0308 	sub.w	r3, r0, r8
 800b268:	fa09 f303 	lsl.w	r3, r9, r3
 800b26c:	4313      	orrs	r3, r2
 800b26e:	9304      	str	r3, [sp, #16]
 800b270:	46a2      	mov	sl, r4
 800b272:	e7d2      	b.n	800b21a <_vfiprintf_r+0xc6>
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	1d19      	adds	r1, r3, #4
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	9103      	str	r1, [sp, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	bfbb      	ittet	lt
 800b280:	425b      	neglt	r3, r3
 800b282:	f042 0202 	orrlt.w	r2, r2, #2
 800b286:	9307      	strge	r3, [sp, #28]
 800b288:	9307      	strlt	r3, [sp, #28]
 800b28a:	bfb8      	it	lt
 800b28c:	9204      	strlt	r2, [sp, #16]
 800b28e:	7823      	ldrb	r3, [r4, #0]
 800b290:	2b2e      	cmp	r3, #46	@ 0x2e
 800b292:	d10a      	bne.n	800b2aa <_vfiprintf_r+0x156>
 800b294:	7863      	ldrb	r3, [r4, #1]
 800b296:	2b2a      	cmp	r3, #42	@ 0x2a
 800b298:	d132      	bne.n	800b300 <_vfiprintf_r+0x1ac>
 800b29a:	9b03      	ldr	r3, [sp, #12]
 800b29c:	1d1a      	adds	r2, r3, #4
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	9203      	str	r2, [sp, #12]
 800b2a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2a6:	3402      	adds	r4, #2
 800b2a8:	9305      	str	r3, [sp, #20]
 800b2aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b380 <_vfiprintf_r+0x22c>
 800b2ae:	7821      	ldrb	r1, [r4, #0]
 800b2b0:	2203      	movs	r2, #3
 800b2b2:	4650      	mov	r0, sl
 800b2b4:	f7f4 ff94 	bl	80001e0 <memchr>
 800b2b8:	b138      	cbz	r0, 800b2ca <_vfiprintf_r+0x176>
 800b2ba:	9b04      	ldr	r3, [sp, #16]
 800b2bc:	eba0 000a 	sub.w	r0, r0, sl
 800b2c0:	2240      	movs	r2, #64	@ 0x40
 800b2c2:	4082      	lsls	r2, r0
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	3401      	adds	r4, #1
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ce:	4829      	ldr	r0, [pc, #164]	@ (800b374 <_vfiprintf_r+0x220>)
 800b2d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2d4:	2206      	movs	r2, #6
 800b2d6:	f7f4 ff83 	bl	80001e0 <memchr>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d03f      	beq.n	800b35e <_vfiprintf_r+0x20a>
 800b2de:	4b26      	ldr	r3, [pc, #152]	@ (800b378 <_vfiprintf_r+0x224>)
 800b2e0:	bb1b      	cbnz	r3, 800b32a <_vfiprintf_r+0x1d6>
 800b2e2:	9b03      	ldr	r3, [sp, #12]
 800b2e4:	3307      	adds	r3, #7
 800b2e6:	f023 0307 	bic.w	r3, r3, #7
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	9303      	str	r3, [sp, #12]
 800b2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f0:	443b      	add	r3, r7
 800b2f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2f4:	e76a      	b.n	800b1cc <_vfiprintf_r+0x78>
 800b2f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	e7a8      	b.n	800b252 <_vfiprintf_r+0xfe>
 800b300:	2300      	movs	r3, #0
 800b302:	3401      	adds	r4, #1
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	4619      	mov	r1, r3
 800b308:	f04f 0c0a 	mov.w	ip, #10
 800b30c:	4620      	mov	r0, r4
 800b30e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b312:	3a30      	subs	r2, #48	@ 0x30
 800b314:	2a09      	cmp	r2, #9
 800b316:	d903      	bls.n	800b320 <_vfiprintf_r+0x1cc>
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d0c6      	beq.n	800b2aa <_vfiprintf_r+0x156>
 800b31c:	9105      	str	r1, [sp, #20]
 800b31e:	e7c4      	b.n	800b2aa <_vfiprintf_r+0x156>
 800b320:	fb0c 2101 	mla	r1, ip, r1, r2
 800b324:	4604      	mov	r4, r0
 800b326:	2301      	movs	r3, #1
 800b328:	e7f0      	b.n	800b30c <_vfiprintf_r+0x1b8>
 800b32a:	ab03      	add	r3, sp, #12
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	462a      	mov	r2, r5
 800b330:	4b12      	ldr	r3, [pc, #72]	@ (800b37c <_vfiprintf_r+0x228>)
 800b332:	a904      	add	r1, sp, #16
 800b334:	4630      	mov	r0, r6
 800b336:	f7fd fda3 	bl	8008e80 <_printf_float>
 800b33a:	4607      	mov	r7, r0
 800b33c:	1c78      	adds	r0, r7, #1
 800b33e:	d1d6      	bne.n	800b2ee <_vfiprintf_r+0x19a>
 800b340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b342:	07d9      	lsls	r1, r3, #31
 800b344:	d405      	bmi.n	800b352 <_vfiprintf_r+0x1fe>
 800b346:	89ab      	ldrh	r3, [r5, #12]
 800b348:	059a      	lsls	r2, r3, #22
 800b34a:	d402      	bmi.n	800b352 <_vfiprintf_r+0x1fe>
 800b34c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b34e:	f7fe fad3 	bl	80098f8 <__retarget_lock_release_recursive>
 800b352:	89ab      	ldrh	r3, [r5, #12]
 800b354:	065b      	lsls	r3, r3, #25
 800b356:	f53f af1f 	bmi.w	800b198 <_vfiprintf_r+0x44>
 800b35a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b35c:	e71e      	b.n	800b19c <_vfiprintf_r+0x48>
 800b35e:	ab03      	add	r3, sp, #12
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	462a      	mov	r2, r5
 800b364:	4b05      	ldr	r3, [pc, #20]	@ (800b37c <_vfiprintf_r+0x228>)
 800b366:	a904      	add	r1, sp, #16
 800b368:	4630      	mov	r0, r6
 800b36a:	f7fe f821 	bl	80093b0 <_printf_i>
 800b36e:	e7e4      	b.n	800b33a <_vfiprintf_r+0x1e6>
 800b370:	0800ba2f 	.word	0x0800ba2f
 800b374:	0800ba39 	.word	0x0800ba39
 800b378:	08008e81 	.word	0x08008e81
 800b37c:	0800b131 	.word	0x0800b131
 800b380:	0800ba35 	.word	0x0800ba35

0800b384 <__swbuf_r>:
 800b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b386:	460e      	mov	r6, r1
 800b388:	4614      	mov	r4, r2
 800b38a:	4605      	mov	r5, r0
 800b38c:	b118      	cbz	r0, 800b396 <__swbuf_r+0x12>
 800b38e:	6a03      	ldr	r3, [r0, #32]
 800b390:	b90b      	cbnz	r3, 800b396 <__swbuf_r+0x12>
 800b392:	f7fe f9b9 	bl	8009708 <__sinit>
 800b396:	69a3      	ldr	r3, [r4, #24]
 800b398:	60a3      	str	r3, [r4, #8]
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	071a      	lsls	r2, r3, #28
 800b39e:	d501      	bpl.n	800b3a4 <__swbuf_r+0x20>
 800b3a0:	6923      	ldr	r3, [r4, #16]
 800b3a2:	b943      	cbnz	r3, 800b3b6 <__swbuf_r+0x32>
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	f000 f82a 	bl	800b400 <__swsetup_r>
 800b3ac:	b118      	cbz	r0, 800b3b6 <__swbuf_r+0x32>
 800b3ae:	f04f 37ff 	mov.w	r7, #4294967295
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	6922      	ldr	r2, [r4, #16]
 800b3ba:	1a98      	subs	r0, r3, r2
 800b3bc:	6963      	ldr	r3, [r4, #20]
 800b3be:	b2f6      	uxtb	r6, r6
 800b3c0:	4283      	cmp	r3, r0
 800b3c2:	4637      	mov	r7, r6
 800b3c4:	dc05      	bgt.n	800b3d2 <__swbuf_r+0x4e>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f7ff fdf7 	bl	800afbc <_fflush_r>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d1ed      	bne.n	800b3ae <__swbuf_r+0x2a>
 800b3d2:	68a3      	ldr	r3, [r4, #8]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	60a3      	str	r3, [r4, #8]
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	1c5a      	adds	r2, r3, #1
 800b3dc:	6022      	str	r2, [r4, #0]
 800b3de:	701e      	strb	r6, [r3, #0]
 800b3e0:	6962      	ldr	r2, [r4, #20]
 800b3e2:	1c43      	adds	r3, r0, #1
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d004      	beq.n	800b3f2 <__swbuf_r+0x6e>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	07db      	lsls	r3, r3, #31
 800b3ec:	d5e1      	bpl.n	800b3b2 <__swbuf_r+0x2e>
 800b3ee:	2e0a      	cmp	r6, #10
 800b3f0:	d1df      	bne.n	800b3b2 <__swbuf_r+0x2e>
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f7ff fde1 	bl	800afbc <_fflush_r>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d0d9      	beq.n	800b3b2 <__swbuf_r+0x2e>
 800b3fe:	e7d6      	b.n	800b3ae <__swbuf_r+0x2a>

0800b400 <__swsetup_r>:
 800b400:	b538      	push	{r3, r4, r5, lr}
 800b402:	4b29      	ldr	r3, [pc, #164]	@ (800b4a8 <__swsetup_r+0xa8>)
 800b404:	4605      	mov	r5, r0
 800b406:	6818      	ldr	r0, [r3, #0]
 800b408:	460c      	mov	r4, r1
 800b40a:	b118      	cbz	r0, 800b414 <__swsetup_r+0x14>
 800b40c:	6a03      	ldr	r3, [r0, #32]
 800b40e:	b90b      	cbnz	r3, 800b414 <__swsetup_r+0x14>
 800b410:	f7fe f97a 	bl	8009708 <__sinit>
 800b414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b418:	0719      	lsls	r1, r3, #28
 800b41a:	d422      	bmi.n	800b462 <__swsetup_r+0x62>
 800b41c:	06da      	lsls	r2, r3, #27
 800b41e:	d407      	bmi.n	800b430 <__swsetup_r+0x30>
 800b420:	2209      	movs	r2, #9
 800b422:	602a      	str	r2, [r5, #0]
 800b424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
 800b42e:	e033      	b.n	800b498 <__swsetup_r+0x98>
 800b430:	0758      	lsls	r0, r3, #29
 800b432:	d512      	bpl.n	800b45a <__swsetup_r+0x5a>
 800b434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b436:	b141      	cbz	r1, 800b44a <__swsetup_r+0x4a>
 800b438:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b43c:	4299      	cmp	r1, r3
 800b43e:	d002      	beq.n	800b446 <__swsetup_r+0x46>
 800b440:	4628      	mov	r0, r5
 800b442:	f7ff f8b5 	bl	800a5b0 <_free_r>
 800b446:	2300      	movs	r3, #0
 800b448:	6363      	str	r3, [r4, #52]	@ 0x34
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	2300      	movs	r3, #0
 800b454:	6063      	str	r3, [r4, #4]
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	f043 0308 	orr.w	r3, r3, #8
 800b460:	81a3      	strh	r3, [r4, #12]
 800b462:	6923      	ldr	r3, [r4, #16]
 800b464:	b94b      	cbnz	r3, 800b47a <__swsetup_r+0x7a>
 800b466:	89a3      	ldrh	r3, [r4, #12]
 800b468:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b46c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b470:	d003      	beq.n	800b47a <__swsetup_r+0x7a>
 800b472:	4621      	mov	r1, r4
 800b474:	4628      	mov	r0, r5
 800b476:	f000 f883 	bl	800b580 <__smakebuf_r>
 800b47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b47e:	f013 0201 	ands.w	r2, r3, #1
 800b482:	d00a      	beq.n	800b49a <__swsetup_r+0x9a>
 800b484:	2200      	movs	r2, #0
 800b486:	60a2      	str	r2, [r4, #8]
 800b488:	6962      	ldr	r2, [r4, #20]
 800b48a:	4252      	negs	r2, r2
 800b48c:	61a2      	str	r2, [r4, #24]
 800b48e:	6922      	ldr	r2, [r4, #16]
 800b490:	b942      	cbnz	r2, 800b4a4 <__swsetup_r+0xa4>
 800b492:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b496:	d1c5      	bne.n	800b424 <__swsetup_r+0x24>
 800b498:	bd38      	pop	{r3, r4, r5, pc}
 800b49a:	0799      	lsls	r1, r3, #30
 800b49c:	bf58      	it	pl
 800b49e:	6962      	ldrpl	r2, [r4, #20]
 800b4a0:	60a2      	str	r2, [r4, #8]
 800b4a2:	e7f4      	b.n	800b48e <__swsetup_r+0x8e>
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	e7f7      	b.n	800b498 <__swsetup_r+0x98>
 800b4a8:	20000108 	.word	0x20000108

0800b4ac <_raise_r>:
 800b4ac:	291f      	cmp	r1, #31
 800b4ae:	b538      	push	{r3, r4, r5, lr}
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	d904      	bls.n	800b4c0 <_raise_r+0x14>
 800b4b6:	2316      	movs	r3, #22
 800b4b8:	6003      	str	r3, [r0, #0]
 800b4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b4be:	bd38      	pop	{r3, r4, r5, pc}
 800b4c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b4c2:	b112      	cbz	r2, 800b4ca <_raise_r+0x1e>
 800b4c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4c8:	b94b      	cbnz	r3, 800b4de <_raise_r+0x32>
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	f000 f830 	bl	800b530 <_getpid_r>
 800b4d0:	4622      	mov	r2, r4
 800b4d2:	4601      	mov	r1, r0
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4da:	f000 b817 	b.w	800b50c <_kill_r>
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d00a      	beq.n	800b4f8 <_raise_r+0x4c>
 800b4e2:	1c59      	adds	r1, r3, #1
 800b4e4:	d103      	bne.n	800b4ee <_raise_r+0x42>
 800b4e6:	2316      	movs	r3, #22
 800b4e8:	6003      	str	r3, [r0, #0]
 800b4ea:	2001      	movs	r0, #1
 800b4ec:	e7e7      	b.n	800b4be <_raise_r+0x12>
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	4798      	blx	r3
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	e7e0      	b.n	800b4be <_raise_r+0x12>

0800b4fc <raise>:
 800b4fc:	4b02      	ldr	r3, [pc, #8]	@ (800b508 <raise+0xc>)
 800b4fe:	4601      	mov	r1, r0
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	f7ff bfd3 	b.w	800b4ac <_raise_r>
 800b506:	bf00      	nop
 800b508:	20000108 	.word	0x20000108

0800b50c <_kill_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	4d07      	ldr	r5, [pc, #28]	@ (800b52c <_kill_r+0x20>)
 800b510:	2300      	movs	r3, #0
 800b512:	4604      	mov	r4, r0
 800b514:	4608      	mov	r0, r1
 800b516:	4611      	mov	r1, r2
 800b518:	602b      	str	r3, [r5, #0]
 800b51a:	f7f5 fdf9 	bl	8001110 <_kill>
 800b51e:	1c43      	adds	r3, r0, #1
 800b520:	d102      	bne.n	800b528 <_kill_r+0x1c>
 800b522:	682b      	ldr	r3, [r5, #0]
 800b524:	b103      	cbz	r3, 800b528 <_kill_r+0x1c>
 800b526:	6023      	str	r3, [r4, #0]
 800b528:	bd38      	pop	{r3, r4, r5, pc}
 800b52a:	bf00      	nop
 800b52c:	2001a060 	.word	0x2001a060

0800b530 <_getpid_r>:
 800b530:	f7f5 bde6 	b.w	8001100 <_getpid>

0800b534 <__swhatbuf_r>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	460c      	mov	r4, r1
 800b538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b53c:	2900      	cmp	r1, #0
 800b53e:	b096      	sub	sp, #88	@ 0x58
 800b540:	4615      	mov	r5, r2
 800b542:	461e      	mov	r6, r3
 800b544:	da0d      	bge.n	800b562 <__swhatbuf_r+0x2e>
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b54c:	f04f 0100 	mov.w	r1, #0
 800b550:	bf14      	ite	ne
 800b552:	2340      	movne	r3, #64	@ 0x40
 800b554:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b558:	2000      	movs	r0, #0
 800b55a:	6031      	str	r1, [r6, #0]
 800b55c:	602b      	str	r3, [r5, #0]
 800b55e:	b016      	add	sp, #88	@ 0x58
 800b560:	bd70      	pop	{r4, r5, r6, pc}
 800b562:	466a      	mov	r2, sp
 800b564:	f000 f848 	bl	800b5f8 <_fstat_r>
 800b568:	2800      	cmp	r0, #0
 800b56a:	dbec      	blt.n	800b546 <__swhatbuf_r+0x12>
 800b56c:	9901      	ldr	r1, [sp, #4]
 800b56e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b572:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b576:	4259      	negs	r1, r3
 800b578:	4159      	adcs	r1, r3
 800b57a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b57e:	e7eb      	b.n	800b558 <__swhatbuf_r+0x24>

0800b580 <__smakebuf_r>:
 800b580:	898b      	ldrh	r3, [r1, #12]
 800b582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b584:	079d      	lsls	r5, r3, #30
 800b586:	4606      	mov	r6, r0
 800b588:	460c      	mov	r4, r1
 800b58a:	d507      	bpl.n	800b59c <__smakebuf_r+0x1c>
 800b58c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	6123      	str	r3, [r4, #16]
 800b594:	2301      	movs	r3, #1
 800b596:	6163      	str	r3, [r4, #20]
 800b598:	b003      	add	sp, #12
 800b59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b59c:	ab01      	add	r3, sp, #4
 800b59e:	466a      	mov	r2, sp
 800b5a0:	f7ff ffc8 	bl	800b534 <__swhatbuf_r>
 800b5a4:	9f00      	ldr	r7, [sp, #0]
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f7ff f874 	bl	800a698 <_malloc_r>
 800b5b0:	b948      	cbnz	r0, 800b5c6 <__smakebuf_r+0x46>
 800b5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5b6:	059a      	lsls	r2, r3, #22
 800b5b8:	d4ee      	bmi.n	800b598 <__smakebuf_r+0x18>
 800b5ba:	f023 0303 	bic.w	r3, r3, #3
 800b5be:	f043 0302 	orr.w	r3, r3, #2
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	e7e2      	b.n	800b58c <__smakebuf_r+0xc>
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	6020      	str	r0, [r4, #0]
 800b5ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ce:	81a3      	strh	r3, [r4, #12]
 800b5d0:	9b01      	ldr	r3, [sp, #4]
 800b5d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b5d6:	b15b      	cbz	r3, 800b5f0 <__smakebuf_r+0x70>
 800b5d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f000 f81d 	bl	800b61c <_isatty_r>
 800b5e2:	b128      	cbz	r0, 800b5f0 <__smakebuf_r+0x70>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f023 0303 	bic.w	r3, r3, #3
 800b5ea:	f043 0301 	orr.w	r3, r3, #1
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	431d      	orrs	r5, r3
 800b5f4:	81a5      	strh	r5, [r4, #12]
 800b5f6:	e7cf      	b.n	800b598 <__smakebuf_r+0x18>

0800b5f8 <_fstat_r>:
 800b5f8:	b538      	push	{r3, r4, r5, lr}
 800b5fa:	4d07      	ldr	r5, [pc, #28]	@ (800b618 <_fstat_r+0x20>)
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	4604      	mov	r4, r0
 800b600:	4608      	mov	r0, r1
 800b602:	4611      	mov	r1, r2
 800b604:	602b      	str	r3, [r5, #0]
 800b606:	f7f5 fde3 	bl	80011d0 <_fstat>
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	d102      	bne.n	800b614 <_fstat_r+0x1c>
 800b60e:	682b      	ldr	r3, [r5, #0]
 800b610:	b103      	cbz	r3, 800b614 <_fstat_r+0x1c>
 800b612:	6023      	str	r3, [r4, #0]
 800b614:	bd38      	pop	{r3, r4, r5, pc}
 800b616:	bf00      	nop
 800b618:	2001a060 	.word	0x2001a060

0800b61c <_isatty_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4d06      	ldr	r5, [pc, #24]	@ (800b638 <_isatty_r+0x1c>)
 800b620:	2300      	movs	r3, #0
 800b622:	4604      	mov	r4, r0
 800b624:	4608      	mov	r0, r1
 800b626:	602b      	str	r3, [r5, #0]
 800b628:	f7f5 fde2 	bl	80011f0 <_isatty>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_isatty_r+0x1a>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b103      	cbz	r3, 800b636 <_isatty_r+0x1a>
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	2001a060 	.word	0x2001a060

0800b63c <_init>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	bf00      	nop
 800b640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b642:	bc08      	pop	{r3}
 800b644:	469e      	mov	lr, r3
 800b646:	4770      	bx	lr

0800b648 <_fini>:
 800b648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64a:	bf00      	nop
 800b64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b64e:	bc08      	pop	{r3}
 800b650:	469e      	mov	lr, r3
 800b652:	4770      	bx	lr
